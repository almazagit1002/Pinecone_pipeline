[{"date_scraped_timestamp":1710925564519,"host":"www.romanpichler.com","page_title":"10 Tips for Using Key Performance Indicators","text":"\n \n Published on 14th December 2015\n \n Last Updated on: 18 Jul 2023\n \n \n \n \n \n \n Product key performance indicators, or KPIs for short, are metrics that measure the performance of a product. They help you understand if the product is creating the desired value. Without KPIs, you end up guessing how your product is doing. But choosing the right indicators is not always straightforward, and I have seen many product people struggle with it. This post shares my tips on how to select those KPIs that really help you understand how your product is doing. \n \n1 Use the User, Business, and Product Goals to Choose the Right KPIs\nTo select the right key performance indicators or KPIs, you must be clear on the user and business goals your product serves. If your product directly generates revenue, then revenue is likely to be a key indicator, for example. If you are not sure what these goals are, then ask yourself how the product benefits the users and the company. Why would people want to use it and why would the business want to invest in it? Then take the next step and capture the goals using, for instance, my Product Vision Board. You can download the tool and find out how to use it at romanpichler/tools/product-vision-board.\nAdditionally, use any product goals that you have set for your product to derive further KPIs and complete your set of indicators. Product goals are specific benefits or outcomes that your product should create. These goals should be derived from, or at least aligned with, the user and business goals. I capture them on a product roadmap like my GO roadmap, as I explain in more detail in my article How to Choose the Right KPIs for your Product.\n2 Make the Goals Specific\nKnowing the business goals of your product is a prerequisite for selecting the right KPIs. But it is not enough. To effectively apply the indicators, analyse the resulting data, and take the right actions, the goals must be specific and realistic. Establishing such goals can be challenging, particularly for brand-new and young products. The next tips will help you with this.\n3 Use Ratios and Ranges\nWork with ratios and ranges to describe your goals, as Alistair Croll and Benjamin Yoskovitz recommend in their book Lean Analytics. Instead of stating that a new product should create x amount of revenue per year, you could say that the product should increase the company’s revenue by five to 10% within one year after its launch, for instance. While you might not be sure that goal will be met, at least you have drawn a line in the sand against which progress can be measured. If it turns out that the goal is too ambitious, then you move the line and adjust the target.\n4 Avoid Vanity Metrics\nStay clear of vanity metrics, measures that make your product look good but don’t add value. Take the number of downloads for an app as an example. While a fair amount of people might download the product, this tells you little about how successful it is. Instead of measuring downloads, you should choose a relevant and helpful metric, such as daily active usage or referral rate.\n5 Don’t Measure Everything that Can Be Measured\nDon’t measure everything that can be measured and don’t blindly trust an analytics tool to collect the right data. Instead, use the business goals to choose a small number of metrics that truly help you understand how your product performs. Otherwise, you take the risk of wasting time and effort analysing data that creates little or no insights. In the worst case, you action irrelevant data and make the wrong decisions.\n6 Use Quantitative and Qualitative KPIs\nAs their name suggests, quantitative indicators, such as daily active users or revenue, measure the quantity of something rather than its quality. This has the benefit of collecting “hard” and statistically representative data. Qualitative indicators, such as user feedback, help you understand why something has happened, for instance, why users aren’t as satisfied with the product as expected. Combining the two types gives you a balanced outlook on how your product is doing. It reduces the risk of losing sight of the most important success factor: The people behind the numbers, the individuals who buy and use the product.\n7 Employ Lagging and Leading Indicators\nLagging indicators, such as revenue, profit, and cost, are backwards-focused and tell you about the outcome of past actions. Leading indicators help you understand how likely it is that your product will meet a goal in the future. Take product quality as an example. If the code is becoming increasingly complex, then adding new features will become more expensive and require more time. Meeting profit targets and delivery dates will therefore become harder. Using backward and forward-focused indicators allows you to tell if you have met the business goals and helps you anticipate if the product is likely to meet the goals in the future.\n8 Look beyond Financial and Customer Indicators\nFinancial indicators, such as revenue and profit, and customer metrics, including engagement and referral rate, are the two most common indicator types in my experience. While these metrics are undoubtedly important, they are not sufficient. Say your product is meeting its revenue and profit goals and that customer engagement and referral rate are high. This suggests that your product is doing well and that there is no reason to worry. But if at the same time, the team motivation is low or if the code quality is deteriorating, then you should be concerned: These indicators suggest that achieving product success will be much harder in the future. You should therefore look beyond financial and customer indicators and complement them with the relevant product, process, and people indicators.\n9 Leverage Trends\nCompare the data you report to other time periods, user groups, or competitors, such as revenue growth over the last six weeks or cancellation rates from quarter to quarter. This helps you spot trends, for instance, if revenue is increasing, staying flat, or declining. Trends allow you to better understand what’s happening and to take the right actions. If a decline in revenue is a one-off occurrence, for instance, then there is probably no reason to be overly worried. But if it is a trend, then you should investigate how you can stop and revert it – unless you are about to sunset your product.\n10 Use a Product Scorecard\nOnce you have selected the right key performance indicators for your product, you should collect the relevant data and regularly analyse it. A product scorecard like the on shown below is a great tool for this job. An effective scorecard uses the right indicators and helps you spot trends.\n ","url":"https://www.romanpichler.com/blog/10-tips-how-to-choose-the-right-product-key-performance-indicators-kpis/"},{"date_scraped_timestamp":1710925534186,"host":"www.romanpichler.com","page_title":null,"text":null,"url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3155"},{"date_scraped_timestamp":1710925521231,"host":"www.romanpichler.com","page_title":null,"text":null,"url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3152"},{"date_scraped_timestamp":1710925531921,"host":"www.romanpichler.com","page_title":null,"text":null,"url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3151"},{"date_scraped_timestamp":1710925549087,"host":"www.romanpichler.com","page_title":"10 Tips for Creating Agile Personas","text":"\n \n Published on 19th December 2013\n \n Last Updated on: 6 Feb 2023\n \n \n \n \n \n \n Personas are a powerful technique to describe the users and customers of a product in order to make the right product decisions. This post shares my tips to create helpful personas for digital products. \n 1. Get to Know the Users\nAny persona description should be based on knowledge gained from direct interaction with the target customers and users. This is necessary to build a connection with the beneficiaries of your product, develop empathy, and understand their current wants, needs, and circumstances.\nBefore you create your personas, you should therefore get to know your audience, for example, by observing how they currently get a job done and by interviewing them. Otherwise, your characters may not accurately represent your target group. In the worst case, they are based on ideas and speculation, not real people. Involve (some of) the team members in the user research work, including UX people and developers. This allows you to leverage their knowledge, and it establishes a shared understanding of the users and their goals.\nPut aside any ideas about the desired user experience and the product features when you develop your personas. Describe the characters according to your market insights. Do not make them fit your ideas and assumptions!\n2. Keep your Personas Concise\nWhile every persona description should help the team members understand who the beneficiaries of the product are and what the goals they pursue, I recommend that you make and keep your personas concise so they fit on an A4 sheet of paper.\nBe careful not to bloat them and don’t add irrelevant details, for instance, another spare time activity or a cute pet. While your personas have to contain enough information to be usable, too much detail makes them difficult to work with. Only include information that helps you make informed decisions about the user interactions, the visual design, and the product functionality. Leave out the rest.\nMy simple, minimalist persona template wants to help you write concise personas. You can download the template by clicking on the picture below.\n3. Distinguish User and Buyer Personas\nCreate separate user and customer personas whenever the users and the customers are not the same people. This allows you to capture the user and the customer-specific needs, and it makes divergent or conflicting goals easier to see.\nSay we want to develop a new, advanced X-Wing Fighter, admittedly a highly implausible but fun scenario. The Rebel Alliance pilots would want a plane that’s easy to fly and well protected. But the purchase department of the Alliance is likely to be concerned with its price and maintenance cost. Employing two different personas allows you to model the user and the buyer, and to state their different goals.\n4. Choose a Primary Persona\nWhenever you create several personas for a product, choose one primary persona. The primary persona is the character you mainly design and build the product for. Say we choose Luke, a pilot, as the primary persona in the X-Wing Fighter example above. Then meeting Luke’s goal—creating a plane that’s easy to fly and well protected—becomes our top priority. But if we choose John, a purchase team member, as the primary persona, then the resulting product would be very different.\nIf you find it difficult to choose one primary persona, this may indicate that your target market is too large and heterogeneous, or that your product has become too big and complex. If that’s the case, then consider re-segmenting the market, unbundling the product, or introducing product variants.\n5. Make your Personas Believable\nYour personas should help the development team empathise with the users and view the product from their perspective. To achieve this, your personas must be believable. The following three tips help you with this:\nBase your personas on first-hand user research (as discussed above).\nChoose a representative name and picture.\nCreate and update personas together with the development team.\n6. Focus on the Main Benefit or Problem\nI frequently see personas that contain a lengthy list of goals. While is it is perfectly OK that a persona description states more than one problem that should be addressed or benefit that should be offered, I recommend selecting one main problem or benefit—the true reason why the persona would want to use or purchase the product. This creates focus and facilitates effective decision-making. If you feel that the other persona goals are too important to omit them, prioritise the goals and put the primary one at the top.\n7. Connect Personas and User Stories\nMake the most of your personas, and use them in the scenarios, the storyboards, the workflows, and the user stories you discover: your primary persona should be the protagonist in your stories. The template below puts the user or customer modelled as a persona into the user story (based on by Rachel Davies’ user story template).\nAs <persona> ,\nI want <what?>\nso that <why?>.\n8. Involve the Development Team Members\nThe best persona descriptions are worthless if the people who should use them don’t understand or accept them. I therefore recommend that you involve (some of) the development team members in creating the personas. Ideally, the individuals should participate in the user research on which the personas are based.\nIf that’s not possible, then review the initial persona descriptions together with the team members and be open to feedback. Don’t add unnecessary or speculative details, but be willing to adjust the descriptions so that they are easier to understand for and resonate with the team members.\n9. Don’t Forget to Update Your Personas\nAdjust your persona descriptions, as you lean more about the users and customers and their needs by building prototypes and product increments. This is particularly useful in an agile context, where you want to minimise the amount of initial market research and start with provisional, good-enough personas to quickly test your crucial ideas. Adjust and refine your personas based on the insights you generate. Rewrite your personas or start with brand-new ones if you have to pivot and change your product strategy.\n10. Recognise when Personas are not Appropriate\nWhile personas are a powerful tool, there are instances when they are not appropriate. If you create a bespoke product that serves a small user group, then working with personas may not be necessary. Similarly, if your product does not have any end users, employing personas is not advisable.\nTake a client of mine that develops a physics engine, software responsible for the clever animations in computer games. The users of the software are games developers who integrate the engine into their code. Creating personas for the physics engine is not beneficial in my mind. But for the entire game it is, of course.\n ","url":"https://www.romanpichler.com/blog/10-tips-agile-personas/"},{"date_scraped_timestamp":1710925668090,"host":"www.romanpichler.com","page_title":"10 Tips for Creating a Product Strategy with the Product Vision Board","text":"\n \n Published on 16th July 2014\n \n \n \n \n \n \n \n This post does what its title says: It shares my recommendations for creating an agile product strategy using the Vision Board. It addresses readers who want to find out more about using a product strategy in an agile, dynamic environment and readers who want to get better at using the Vision Board. \n 1 Start with What You Know Now\nTraditionally, a product strategy is the result of months of market research and business analysis work. It is intended to be factual, reliable, and ready to be implemented. But in an agile, dynamic environment a product strategy is best created differently: Start with your idea, state the vision behind it, and capture your initial strategy. Then identify the biggest risk or the crucial leap-of-faith assumption, address it, and change and improve your strategy. Repeat this process until you are confident that your product strategy is valid.\nThis iterative approach, pioneered by Lean Startup, provides several advantages: First, it helps you develop a strategy built on empirical evidence rather than on intuition, authority, or influence. Second, it enforces fast failure and minimises the risk of following the wrong strategy and launching a product that bombs. Third, it avoids carrying out too much and too little market research; it helps you do just enough research to acquire the knowledge you really need.\n2 Focus on what Matters Most\nThe term product strategy means different things to different people, and strategies come in different shapes and sizes. While that’s perfectly fine, an initial product strategy that forms the basis for subsequent correction and refinement cycles should focus on what matters most: the market, the value proposition, the product’s unique selling points, and the business goals. This is where my Vision Board comes in. I have designed it as the simplest thing that could possibly work to capture the vision and the product strategy. You can find more information about the board and download it for free from romanpichler.com/tools/vision-board.\n3 Create the Product Strategy Collaboratively\nA great way to create your product strategy is to employ a collaborative workshop. Invite the key stakeholders–the people required to develop, market, sell and service your product and the senior management sponsor. Such a workshop generates early buy-in, creates shared ownership, and leverages the collective knowledge and creativity of the group. Selling an existing vision and product strategy can be challenging. Co-creation is often the better option.\nYour initial Vision Board has to be good enough to create a shared understanding of your vision and initial strategy and to identify the biggest risk so you can start re-working your board. But don’t spend too much time on it and don’t try to make it perfect. Your board will change as you test, correct, and refine it.\n4 Let Your Vision Guide You\nThe product vision is the very reason for creating your product: It describes your overarching, aspirational goal. The vision also forms the basis of your product strategy as the path to reach your overall goal. As the vision is so important, you should capture it before you describe your strategy.\nHere are four tips to help you capture your vision:\nYour vision should not restate your product idea. It should rather go beyond it. For instance, the idea for this post is to write about creating an agile product strategy, but my vision is to help you develop awesome and successful products.\nChoose a broad vision, a vision that engages people and that enables you to pivot – to change the strategy while staying true to your vision.\nMake your vision statement concise; capture it in one or two sentences; and ensure that it is clear and easy to understand.\nTry to come up with a motivating and inspiring vision that helps unite everyone working on the product. Choosing an altruistic vision, a vision that focuses on the benefits created for others, can help you with this.\nYou can find more information on formulating a compelling product vision in my post 8 Tips for Creating A Powerful Product Vision.\n5 Put the Users First\nOnce you have captured your vision, work on your strategy by filling in the lower sections of the Vision Board from left to right. Start with the “Target Group”, the people who should use and buy your product rather than thinking about the cool, amazing product features or the smart business model that will monetise the product. While both aspects are important, capturing the users and customers and their needs forms the basis for making the right product and business model decisions.\nWhile it’s tempting to think of all the people who could possibly benefit from your product, it is more helpful to choose a clear-cut and narrow target group instead. Describe the users and customers as clearly as you can and state the relevant demographic characteristics. If there are several segments that your product could serve then choose the most promising one.\nWorking with a focused target group makes it easier to test your assumptions, to select the right test group and test method, and to analyse the resulting feedback and data. If it turns out that you have picked the wrong group or made the segment is too small then simply pivot to a new or bigger one. A large or heterogeneous target group is usually difficult to test. What’s more, it leads to many diverse needs, which make it difficult to determine a clear and convincing value proposition and therefore to market and sell the product.\n6 Clearly State the Main Problem or Benefit\nOnce you have captured your target users and customers, describe their needs. Consider why they would purchase and use your product. What problem will your product solve, what pain or discomfort will it remove, what tangible benefit will it create?\nIf you identify several needs, then determine the main problem or the main benefit, for instance, by putting it at the top of the section. This helps you test your ideas and create a convincing value proposition. I find that if I am not able to clearly describe the main problem or benefit, I don’t really understand why people would want to use and to buy a product.\n7 Describe What Makes Your Product Special\nOnce you have captured the needs, use the “Product” section to describe your actual product idea. State the three to five key features of your product, those features that make the product desirable and that set it apart from its competitors. When capturing the features consider not only product functionality but also nonfunctional qualities such as performance and interoperability, and the visual design.\nDon’t make the mistake of turning this section into a product backlog. The point is not to describe the product comprehensively or in a great amount of detail–that’s done in the product backlog–but to identify those features that really matter to the target group.\n8 State the Desired Business Benefits\nUse the “Business Goals” section to state the product’s desired business benefits, such as, creating a new revenue stream, entering a new market, meeting a profitability goal, reducing cost, developing the brand, or selling another product. Make explicit why it is worthwhile for your company to invest in the product. Prioritise the business goals and state them in the order of their importance. This will guide your efforts and help you choose the right business model.\nOnce you have captured the business goals, state the key elements of your business model including the main revenue sources and cost factors. This is particularly important when you work with a new or significantly changed business model.\n9 Extend Your Board as and if Required\nThe Vision Board’s simplicity is one of its assets, but it can sometimes become restricting: The Product and the Value sections can get crowded as the board does not separately capture the competitors, the partners, the channels, the revenue sources, the cost factors, and other business model elements. Luckily there is a simple solution: Extend your board and add further sections, for instance, “Competitors”, “Channels”, “Revenue Streams”, and “Cost Factors”, or download an extended version from my website.\nBut before using an extended Vision Board make sure that you understand who your customers and users are and why they would buy and use the product. There is no point in worrying about the marketing and the sales channels or the technologies if you are not confident that you have identified a problem that’s worthwhile addressing. Additionally, a more complex board usually contains more risks and assumptions. This makes it harder to identify the biggest risk and leap-of-faith assumption.\n10 Put it to the Test\nCapturing your vision and initial product strategy on the Vision Board is great. But it’s only the beginning of a journey in search of a valid strategy, as your initial board is likely to be wrong. After all, you have based the board on what you know now rather than extensive market research work.\nYou should therefore review your initial Vision Board carefully, identify its critical risks or leap-of-faith assumptions, and select the most crucial risk or assumption. Determine the right test group, for instance, selected target users, and the right test method such as problem interviews. Carry out the test, analyse the feedback or data collected, and change your Vision Board with the newly gained knowledge as the picture below shows.\nIf you find that the key risks and assumptions hard to identify then your board may be too vague. If that’s the case then narrow down the target group, select the main problem or benefit, reduce the key features to no more than five, identify the main business benefit, and remove everything else.\nYour board may significantly change as you iterate over your strategy, and you may have to pivot, to choose a different strategy to make your vision come true. If your Vision Board does not change at all then you should stop and reflect: Are you addressing the right risks in the right way and are you analysing the feedback and data effectively?\n ","url":"https://www.romanpichler.com/blog/10-tips-creating-agile-product-strategy-vision-board/"},{"date_scraped_timestamp":1710925544024,"host":"www.romanpichler.com","page_title":"10 Tips for Effective Product Management Meetings","text":"\n \n Published on 5th April 2022\n \n \n \n \n \n \n \n Meetings are essential to align the stakeholders and development team members and make the right product decisions. But we’ve all been stuck in bad meetings that lacked a clear objective, didn’t have an agenda, were dominated by a few vocal individuals, started late, or overran. Such meetings are unproductive and demotivating. It doesn’t have to be this way, though. The following ten tips will help you run successful product management meetings that engage the attendees and help you achieve the desired outcomes. \n \nListen to this article:\n1 Set an Objective\nBe clear on the reason why the meeting is needed. What’s the meeting about? Which outcome do you want to achieve? For example, a product strategy workshop might have the objective to identify the key changes required to achieve product-market fit. Contrast this with a sprint review meeting, which might help you determine if users can easily sign up for the product. Without a clear and specific objective you will find it hard to determine what needs to be achieved, who needs to attend, and how you can effectively structure the meeting. If you struggle to find a such an objective, then this may indicate that the meeting is not required.\n2 Involve the Right People\nCarefully consider who should participate in the meeting to achieve the objective you have set. For product strategy and roadmap meetings, I recommend involving the key stakeholders, for example, someone from sales, marketing, support, and finance, as well as development team representatives—ideally members who know about the user experience (UX), architecture, and technologies. But for sprint review meetings, you may also want to invite (selected) users and customers to collect their feedback.\nAs a rule of thumb, avoid meetings with more than ten attendees when you have to make high-impact decisions and/or rework the product strategy, product roadmap, or product backlog. I find that engagement tends to decline when the group grows significantly larger and reaching agreement becomes harder. Consequently, you often have to run longer meetings. This can make it harder for people to free up the necessary time and attend them.\n3 Have the Right Input Available\nMake sure that the relevant data is available prior to the meeting. Which input you need will depend on the meeting type and its objective. Here are three meetings with sample input data:\nProduct strategy workshop: product performance data (KPIs), competitive analysis, market trends, development progress, for example, in the form of a release burndown chart, and user feedback on recent product increments. (This assumes that you review and update the strategy and roadmap together, an approach I find very useful.)Sprint planning meeting: product goal, prioritised product backlog with enough ready items, development team capacity for the next sprint, and any action items from the last sprint retrospective.Sprint review meeting: sprint goal, product increment, definition of done, release burndown chart.\nConsider sharing the input beforehand when you run a strategy workshop so that people can prepare for the meeting. This can speed up the decision-making process and lead to better decisions.\n4 Prepare an Agenda\nDecide how you want to structure the meeting and determine the steps you will have to take to achieve the objective. For example, for a strategy workshop, you might want to choose the following agenda:\nWelcome and check-in.State objective and agenda.Discuss product performance data (KPIs), competitive analysis, and market trends.Assess product strategy and adjust if necessary.Discuss development progress and user feedback on the latest product increments.Review and adjust product roadmap; check potential impact on the product strategy.Close the meeting.\nDon’t forget to allocate time for each agenda item and to add one or more breaks to the agenda if the meeting lasts longer than one hour. Share the agenda—together with the objective—in the meeting invite so that the attendees know what will happen in the meeting.\n5 Make Time to Check-in\nSet aside time at the beginning of the meeting to check-in, to allow people to casually touch base and reconnect. One way to do this is to ask the attendees to briefly answer the following two questions:\nHow am I feeling right now?Why am I feeling this way?\nWhile you might be tempted to skip checking-in to save time and get more done, this is usually a bad idea, especially in an online setting where it’s much harder for people to socialise and engage in a chat. Setting aside five minutes to check in shows the attendees that you are interested in how they are doing. It makes people feel valued, and it encourages everyone to contribute to the meeting right from the start. This can increase psychological safety, boost productivity, and lead to better decisions. To put it differently, if you don’t check, you might slow down the progress and achieve poorer results.\n6 Use a Facilitator\nIt can be challenging to get everyone to engage in a meeting in the right way. Some individuals may find it hard to stop talking; others may be shy and reluctant to contribute; and senior stakeholders may expect that their suggestions are followed by everyone. Additionally, as the person in charge of the product, you typically have to contribute to the meeting, share your expertise, and actively shape product decisions. \nI therefore recommend using a dedicated, skilled facilitator. This might be your Scrum Master or an agile coach. The facilitator should carry out the following tasks:\nStart and end the meeting on time.Introduce ground rules and remind the participants to follow them.Encourage people to engage in the meeting and to fully participate; ensure that everyone is heard, and nobody dominates.Help the attendees reach agreement by facilitating the decision-making process.Keep the meeting on track and redirect the conversation if people go off on a tangent.\nHaving a dedicated facilitator is particularly helpful when the attendees haven’t successfully worked together and when the meeting takes place online or in hybrid mode (onsite and online).\n7 Establish Ground Rules\nGround rules are guidelines that foster a collaborative mindset, encourage participation, and help the participants treat each other respectfully. The following list shares sample rules, which are based on my book How to Lead in Product Management:\nAlways have cameras turned on in online meetings and mute yourself if you don’t speak.Silence phones and other devices; disable notifications.Speak from a place of respect for the other attendees and assume good intentions on their part. Refrain from judging and labelling people.Respect differences of opinion and value the diversity of the group members.Listen with an open mind. Be receptive and refrain from making premature judgements.Speak honestly and openly. Always stick to observable facts.Ask questions when you sense misunderstanding or disagreement.Speak up if you have not been participating. Make room for others if you have spoken often.Do not interrupt others. Allow a moment of silence to let the previous speaker’s words sink in before the next person speaks. Use reactions in online meetings to signal that you want to say something.Stay present. Do not engage in side-conversations and don’t answer messages on your electronic devices.\n8 Choose a Decision Rule\nMany product management meetings I have attended were working meetings, or workshops, where product decisions were taken. In such a meeting, it is important to have a clear decision rule. Such a rule states who decides and how you can tell that the decision has been made. It avoids the risk that a meeting ends, and people are confused if a decision was taken or not.\nHelpful decision rules for product management meetings include unanimity, consent, and product person decides after discussion. Let’s take a look at the three rules. (For a more detailed discussion, see my article Use Decision Rules to Make Better Product Decisions.)\nDeciding by unanimity means that everyone agrees with the proposed solution and is happy to support it. This creates strong buy-in and shared ownership. On the downside, it can take a comparatively long time to achieve unanimity. Use this decision rule for high impact decisions like setting a product vision and coming up with a brand-new or significantly changed product strategy.Consent is the absence of objections. A decision is made when nobody disapproves. The support the rule creates is not as strong as in the case of unanimity. But it is quicker to achieve and often sufficient. Use consent, for example, when working on the product roadmap and when setting sprint goals.As its name suggests, product person decides after discussion means that you decide after you have carefully listened to the attendees’ ideas and concerns. While the decision rule allows you to leverage the views and expertise of the participants, it can result in comparatively low buy-in. Use this rule when unanimity and consent cannot be achieved or when you are pressed for time, for example, when you have to quickly react to a competitor’s move.\n9 Timebox the Meeting\nAllocate a fixed but realistic duration for the meeting. This creates focus, and it can make it easier for people to agree to attending the meeting. I find that a quarterly strategy workshop can often be timeboxed to two hours, assuming that the relevant data was shared beforehand and that no major changes will have to be made to the product strategy and roadmap. The same tends to be true for the review meeting of a fortnightly sprint.\nNote that a timeboxed meeting always starts and finishes on time. If you don’t manage to get through the agenda and make the necessary decisions, then you will have to schedule a follow-up meeting—the timebox itself cannot be extended.\nDon’t make the mistake, though, to rush important decisions. If, for example, you find at the end of a strategy workshop that you are running out of time, then set up a follow-up meeting rather shortcutting the decision-making process and making a poor decision or not securing the necessary buy-in.\n10 Properly Close the Meeting\nFinally, don’t forget to wrap up the meeting. How you end the meeting matters. It does not only to ensure that everyone understands what has been achieved; it also sets the tone for your next meeting. Properly closing the session includes carrying out the following three steps:\nSummarise the key decisions made so that everyone is clear what was decided and what has been achieved.Capture and assign action items. Clearly state what still needs to be done, who needs to do it, and by when will it have to be done. Consider distributing the action items in a follow-up email.Collect feedback. Ask people how valuable and enjoyable the meeting was and if there is anything that could be improved. You might invite every attendee to briefly share their views with the group, or you might collect the data via an online feedback form. Don’t forget to evaluate the feedback to make the next meeting even better.\nBonus Tip: Bring Food\nSharing food connects people, and bringing something to eat to the meeting shows that you care for the attendees. This can increase psychological safety and productivity. You don’t have to dish up a big meal. A healthy snack is often enough. If eating together is difficult, provide tea, coffee, or at least some water at the meeting. For online meetings, consider allocating a few minutes at the beginning to have an informal chat over a cup of tea or coffee before you kick off the session with the first agenda item. (Thanks to my colleague Caterina Sanders for suggesting this tip.)\n ","url":"https://www.romanpichler.com/blog/10-tips-for-effective-product-management-meetings/"},{"date_scraped_timestamp":1710925476976,"host":"www.romanpichler.com","page_title":"10 Tips for Using Key Performance Indicators","text":"\n \n Published on 14th December 2015\n \n Last Updated on: 18 Jul 2023\n \n \n \n \n \n \n Product key performance indicators, or KPIs for short, are metrics that measure the performance of a product. They help you understand if the product is creating the desired value. Without KPIs, you end up guessing how your product is doing. But choosing the right indicators is not always straightforward, and I have seen many product people struggle with it. This post shares my tips on how to select those KPIs that really help you understand how your product is doing. \n \n1 Use the User, Business, and Product Goals to Choose the Right KPIs\nTo select the right key performance indicators or KPIs, you must be clear on the user and business goals your product serves. If your product directly generates revenue, then revenue is likely to be a key indicator, for example. If you are not sure what these goals are, then ask yourself how the product benefits the users and the company. Why would people want to use it and why would the business want to invest in it? Then take the next step and capture the goals using, for instance, my Product Vision Board. You can download the tool and find out how to use it at romanpichler/tools/product-vision-board.\nAdditionally, use any product goals that you have set for your product to derive further KPIs and complete your set of indicators. Product goals are specific benefits or outcomes that your product should create. These goals should be derived from, or at least aligned with, the user and business goals. I capture them on a product roadmap like my GO roadmap, as I explain in more detail in my article How to Choose the Right KPIs for your Product.\n2 Make the Goals Specific\nKnowing the business goals of your product is a prerequisite for selecting the right KPIs. But it is not enough. To effectively apply the indicators, analyse the resulting data, and take the right actions, the goals must be specific and realistic. Establishing such goals can be challenging, particularly for brand-new and young products. The next tips will help you with this.\n3 Use Ratios and Ranges\nWork with ratios and ranges to describe your goals, as Alistair Croll and Benjamin Yoskovitz recommend in their book Lean Analytics. Instead of stating that a new product should create x amount of revenue per year, you could say that the product should increase the company’s revenue by five to 10% within one year after its launch, for instance. While you might not be sure that goal will be met, at least you have drawn a line in the sand against which progress can be measured. If it turns out that the goal is too ambitious, then you move the line and adjust the target.\n4 Avoid Vanity Metrics\nStay clear of vanity metrics, measures that make your product look good but don’t add value. Take the number of downloads for an app as an example. While a fair amount of people might download the product, this tells you little about how successful it is. Instead of measuring downloads, you should choose a relevant and helpful metric, such as daily active usage or referral rate.\n5 Don’t Measure Everything that Can Be Measured\nDon’t measure everything that can be measured and don’t blindly trust an analytics tool to collect the right data. Instead, use the business goals to choose a small number of metrics that truly help you understand how your product performs. Otherwise, you take the risk of wasting time and effort analysing data that creates little or no insights. In the worst case, you action irrelevant data and make the wrong decisions.\n6 Use Quantitative and Qualitative KPIs\nAs their name suggests, quantitative indicators, such as daily active users or revenue, measure the quantity of something rather than its quality. This has the benefit of collecting “hard” and statistically representative data. Qualitative indicators, such as user feedback, help you understand why something has happened, for instance, why users aren’t as satisfied with the product as expected. Combining the two types gives you a balanced outlook on how your product is doing. It reduces the risk of losing sight of the most important success factor: The people behind the numbers, the individuals who buy and use the product.\n7 Employ Lagging and Leading Indicators\nLagging indicators, such as revenue, profit, and cost, are backwards-focused and tell you about the outcome of past actions. Leading indicators help you understand how likely it is that your product will meet a goal in the future. Take product quality as an example. If the code is becoming increasingly complex, then adding new features will become more expensive and require more time. Meeting profit targets and delivery dates will therefore become harder. Using backward and forward-focused indicators allows you to tell if you have met the business goals and helps you anticipate if the product is likely to meet the goals in the future.\n8 Look beyond Financial and Customer Indicators\nFinancial indicators, such as revenue and profit, and customer metrics, including engagement and referral rate, are the two most common indicator types in my experience. While these metrics are undoubtedly important, they are not sufficient. Say your product is meeting its revenue and profit goals and that customer engagement and referral rate are high. This suggests that your product is doing well and that there is no reason to worry. But if at the same time, the team motivation is low or if the code quality is deteriorating, then you should be concerned: These indicators suggest that achieving product success will be much harder in the future. You should therefore look beyond financial and customer indicators and complement them with the relevant product, process, and people indicators.\n9 Leverage Trends\nCompare the data you report to other time periods, user groups, or competitors, such as revenue growth over the last six weeks or cancellation rates from quarter to quarter. This helps you spot trends, for instance, if revenue is increasing, staying flat, or declining. Trends allow you to better understand what’s happening and to take the right actions. If a decline in revenue is a one-off occurrence, for instance, then there is probably no reason to be overly worried. But if it is a trend, then you should investigate how you can stop and revert it – unless you are about to sunset your product.\n10 Use a Product Scorecard\nOnce you have selected the right key performance indicators for your product, you should collect the relevant data and regularly analyse it. A product scorecard like the on shown below is a great tool for this job. An effective scorecard uses the right indicators and helps you spot trends.\n ","url":"https://www.romanpichler.com/blog/10-tips-for-product-key-performance-indicators-kpis/"},{"date_scraped_timestamp":1710925686689,"host":"www.romanpichler.com","page_title":"10 Tips for Using Key Performance Indicators","text":"\n \n Published on 14th December 2015\n \n Last Updated on: 18 Jul 2023\n \n \n \n \n \n \n Product key performance indicators, or KPIs for short, are metrics that measure the performance of a product. They help you understand if the product is creating the desired value. Without KPIs, you end up guessing how your product is doing. But choosing the right indicators is not always straightforward, and I have seen many product people struggle with it. This post shares my tips on how to select those KPIs that really help you understand how your product is doing. \n \n1 Use the User, Business, and Product Goals to Choose the Right KPIs\nTo select the right key performance indicators or KPIs, you must be clear on the user and business goals your product serves. If your product directly generates revenue, then revenue is likely to be a key indicator, for example. If you are not sure what these goals are, then ask yourself how the product benefits the users and the company. Why would people want to use it and why would the business want to invest in it? Then take the next step and capture the goals using, for instance, my Product Vision Board. You can download the tool and find out how to use it at romanpichler/tools/product-vision-board.\nAdditionally, use any product goals that you have set for your product to derive further KPIs and complete your set of indicators. Product goals are specific benefits or outcomes that your product should create. These goals should be derived from, or at least aligned with, the user and business goals. I capture them on a product roadmap like my GO roadmap, as I explain in more detail in my article How to Choose the Right KPIs for your Product.\n2 Make the Goals Specific\nKnowing the business goals of your product is a prerequisite for selecting the right KPIs. But it is not enough. To effectively apply the indicators, analyse the resulting data, and take the right actions, the goals must be specific and realistic. Establishing such goals can be challenging, particularly for brand-new and young products. The next tips will help you with this.\n3 Use Ratios and Ranges\nWork with ratios and ranges to describe your goals, as Alistair Croll and Benjamin Yoskovitz recommend in their book Lean Analytics. Instead of stating that a new product should create x amount of revenue per year, you could say that the product should increase the company’s revenue by five to 10% within one year after its launch, for instance. While you might not be sure that goal will be met, at least you have drawn a line in the sand against which progress can be measured. If it turns out that the goal is too ambitious, then you move the line and adjust the target.\n4 Avoid Vanity Metrics\nStay clear of vanity metrics, measures that make your product look good but don’t add value. Take the number of downloads for an app as an example. While a fair amount of people might download the product, this tells you little about how successful it is. Instead of measuring downloads, you should choose a relevant and helpful metric, such as daily active usage or referral rate.\n5 Don’t Measure Everything that Can Be Measured\nDon’t measure everything that can be measured and don’t blindly trust an analytics tool to collect the right data. Instead, use the business goals to choose a small number of metrics that truly help you understand how your product performs. Otherwise, you take the risk of wasting time and effort analysing data that creates little or no insights. In the worst case, you action irrelevant data and make the wrong decisions.\n6 Use Quantitative and Qualitative KPIs\nAs their name suggests, quantitative indicators, such as daily active users or revenue, measure the quantity of something rather than its quality. This has the benefit of collecting “hard” and statistically representative data. Qualitative indicators, such as user feedback, help you understand why something has happened, for instance, why users aren’t as satisfied with the product as expected. Combining the two types gives you a balanced outlook on how your product is doing. It reduces the risk of losing sight of the most important success factor: The people behind the numbers, the individuals who buy and use the product.\n7 Employ Lagging and Leading Indicators\nLagging indicators, such as revenue, profit, and cost, are backwards-focused and tell you about the outcome of past actions. Leading indicators help you understand how likely it is that your product will meet a goal in the future. Take product quality as an example. If the code is becoming increasingly complex, then adding new features will become more expensive and require more time. Meeting profit targets and delivery dates will therefore become harder. Using backward and forward-focused indicators allows you to tell if you have met the business goals and helps you anticipate if the product is likely to meet the goals in the future.\n8 Look beyond Financial and Customer Indicators\nFinancial indicators, such as revenue and profit, and customer metrics, including engagement and referral rate, are the two most common indicator types in my experience. While these metrics are undoubtedly important, they are not sufficient. Say your product is meeting its revenue and profit goals and that customer engagement and referral rate are high. This suggests that your product is doing well and that there is no reason to worry. But if at the same time, the team motivation is low or if the code quality is deteriorating, then you should be concerned: These indicators suggest that achieving product success will be much harder in the future. You should therefore look beyond financial and customer indicators and complement them with the relevant product, process, and people indicators.\n9 Leverage Trends\nCompare the data you report to other time periods, user groups, or competitors, such as revenue growth over the last six weeks or cancellation rates from quarter to quarter. This helps you spot trends, for instance, if revenue is increasing, staying flat, or declining. Trends allow you to better understand what’s happening and to take the right actions. If a decline in revenue is a one-off occurrence, for instance, then there is probably no reason to be overly worried. But if it is a trend, then you should investigate how you can stop and revert it – unless you are about to sunset your product.\n10 Use a Product Scorecard\nOnce you have selected the right key performance indicators for your product, you should collect the relevant data and regularly analyse it. A product scorecard like the on shown below is a great tool for this job. An effective scorecard uses the right indicators and helps you spot trends.\n ","url":"https://www.romanpichler.com/blog/10-tips-for-product-key-performance-indicators-kpis/?replytocom=43723"},{"date_scraped_timestamp":1710925548376,"host":"www.romanpichler.com","page_title":"10 Tips for Writing Good User Stories","text":"\n \n Published on 24th March 2016\n \n Last Updated on: 2 Feb 2024\n \n \n \n \n \n \n User stories are probably the most popular agile technique to capture product functionality: Working with user stories is easy. But telling effective stories can be hard. The following ten tips help you create good stories. \n \n1 Users Come First\nAs its name suggests, a user story describes how a customer or user employs the product; it is told from the user’s perspective. What’s more, user stories are particularly helpful to capture a specific functionality, such as searching for a product or making a booking. The following picture illustrates the relationship between the user, the story, and the product functionality, symbolised by the circle.\nIf you don’t know who the users and customers are and why they would want to use the product, then you should not write any user stories. Carry out the necessary user research first, for example, by observing and interviewing users. Otherwise, you take the risk of writing speculative stories that are based on beliefs and ideas—but not on data and empirical evidence.\n2 Use Personas to Discover the Right Stories\nA great technique to capture your insights about the users and customers is working with personas. Personas are fictional characters that are based on first-hand knowledge of the target group. They usually consist of a name and a picture; relevant characteristics, behaviours, and attitudes; and a goal. The goal is the benefit the persona wants to achieve, or the problem the character wants to see solved by using the product.\nBut there is more to it: The persona goals help you discover the right stories: Ask yourself what functionality the product should provide to meet the goals of the personas, as I explain in my post From Personas to User Stories. You can download a handy template to describe your personas from romanpichler.com/tools/persona-template.\n3 Create Stories Collaboratively\nUser stories are intended as a lightweight technique that allows you to move fast. They are not a specification, but a collaboration tool. Stories should never be handed off to a development team. Instead, they should be embedded in a conversation: The product owner and the team should discuss the stories together. This allows you to capture only the minimum amount of information, reduce overhead, and accelerate delivery.\nYou can take this approach further and write stories collaboratively as part of your product backlog refinement process. This leverages the creativity and knowledge of the team and results in better user stories.\nIf you can’t involve the development team in the user story work, then you should  consider using another, more formal technique to capture the product functionality, for example, use cases.\n4 Keep your Stories Simple and Concise\nWrite your stories so that they are easy to understand. Keep them simple and concise. Avoid confusing and ambiguous terms, and use active voice. Focus on what’s important, and leave out the rest. The template below puts the user or customer modelled as a persona into the story and makes its benefit explicit. It is based on by Rachel Davies’ popular template, but I have replaced user role with persona name to connect the story with the relevant persona.\nAs <persona> ,I want <what?>so that <why?>.\nUse the template when it is helpful, but don’t feel obliged to always apply it. Experiment with different ways to write your stories to understand what works best for you and your team.\n5 Start with Epics\nAn epic is a big, sketchy, coarse-grained story. It is typically broken into several user stories over time—leveraging the user feedback on early prototypes and product increments. You can think of it as a headline and a placeholder for more detailed stories.\nStarting with epics allows you to sketch the product functionality without committing to the details. This is particularly helpful for describing new products and features: It allows you to capture the rough scope, and it buys you time to learn more about how to best address the needs of the users.\nIt also reduces the time and effort required to integrate new insights. If you have many detailed stories in the product backlog, then it’s often tricky and time-consuming to relate feedback to the appropriate items and it carries the risk of introducing inconsistencies.\n6 Refine the Stories until They are Ready\nBreak your epics into smaller, detailed stories until they are ready: clear, feasible, and testable. All development team members should have a shared understanding of the story’s meaning; the story should not be too big and comfortably fit into a sprint; and there has to be an effective way to determine if the story is done.\n7 Add Acceptance Criteria\nAs you break epics into smaller stories, remember to add acceptance criteria. Acceptance criteria complement the narrative: They allow you to describe the conditions that have to be fulfilled so that the story is done. The criteria enrich the story, make it testable, and ensure that the story can be demoed or released to the users and other stakeholders. As a rule of thumb, I like to use three to five acceptance criteria for detailed stories.\n8 Use Cards\nUser stories emerged in Extreme Programming (XP), and the early XP literature talks about story cards rather than user stories. There is a simple reason: User stories used to be captured on paper cards. This approach provides three benefits: First, paper cards are cheap and easy to use. Second, they facilitate collaboration: Every one can take a card and jot down an idea. Third, cards can be easily grouped on the table or wall to check for consistency and completeness and to visualise dependencies. If using paper cards is not an option for you, then choose a tool that allows you to create virtual cards, as Trello does, for example.\n9 Keep your Stories Visible and Accessible\nStories want to communicate information. Therefore don’t hide them on a network drive, the corporate intranet jungle, or a licensed tool. Make them visible, for instance, by putting them up on the wall. This fosters collaboration, creates transparency, and makes it obvious when you add too many stories too quickly, as you will start  running out of wall space. A handy tool to discover, visualise, and manage your stories is my product canvas shown below.\n10 Don’t Solely Rely on User Stories\nCreating a great user experience (UX) requires more than user stories. User stories are helpful to capture product functionality, but they are not well suited to describe the user journeys and the visual design. Therefore complement user stories with other techniques, such as, story maps, workflow diagrams, storyboards, sketches, and mockups.\nAdditionally, user stories are not good for capturing technical requirements. If you need to describe what an architectural element like a component or service should do, then write technical stories or—which is my preference—use a modelling language like UML.\nFinally, writing user stories is worthwhile when you develop software that’s likely to be used. But if you want to quickly create a throwaway prototype or mockup to validate an idea, then writing stories may not be necessary. Instead, it might be better to cocreate the prototype. Remember: User stories are not about documenting requirements. They want to enable you to move fast and develop software as quickly as possible—not to impose any overhead.\nMore User Story Tips\n ","url":"https://www.romanpichler.com/blog/10-tips-writing-good-user-stories/"},{"date_scraped_timestamp":1710925574533,"host":"www.romanpichler.com","page_title":"3 Common Product Roadmapping Mistakes","text":"\n \n Published on 19th August 2015\n \n \n \n \n \n \n \n The product roadmap is a great tool to describe the likely growth of a product. But there are three common mistakes I see people make: View the roadmap as a guarantee; show epics and user stories on the roadmap; and speculate about the likely development of the product. This post discusses the three product roadmapping mistakes to help you avoid and rectify them. \n Guarantee\nA product roadmap is not a guarantee but a high-level plan that describes the likely growth of your product based on what you currently know. It’s good to have confidence in your roadmap and it is great to be committed to your product. But your product roadmap is not fixed; it will change particularly if your product is immature or if your market is dynamic.\nClearly tell your stakeholders that the roadmap is not a hard-and-fast plan. Choose the right roadmap format and the right level of detail. Review and update the roadmap regularly and invite the key stakeholders to collaborative product roadmapping workshops. Take look at my post Getting Stakeholder Engagement Right find out how you can effectively identify and involve the stakeholders.\nYou can find out more about choosing the right roadmap format and level of detail in my post Goals vs. Features: How to Choose the Right Product Roadmap Format.\nEpics and User Stories\nDon’t put epics and user stories on the product roadmap. While it’s helpful to consider how the product is likely to evolve, you should focus on its key capabilities and leave out the details.\nA detailed roadmap has several drawbacks: It makes it hard to understand how you want to progress your product; it makes it more difficult to achieve agreement with the stakeholders; it is more prone to change; it carries the risk of turning the roadmap into a tactical tool that competes with the product backlog; and it restricts the freedom of the development team to make a commitment and pull the right amount of work into the sprint.\nCapture the epics and the user stories in the product backlog, not on the product roadmap. Use the roadmap to describe the big picture and the backlog to describe the details, as I discuss in my post The Product Roadmap and the Product Backlog.\nSpeculation and Wishful Thinking\nDon’t create a roadmap if you don’t have a valid product strategy available or if you cannot look beyond the first public release. The former implies that you have nailed the market segment, the value proposition, the key product features, and the desired business benefits.\nThe latter means that you can realistically anticipate the longer-term growth of your product. If you are working on a brand-new product, for instance, and are about to launch your first minimum viable product (MVP) then you may not be in a position to create a product roadmap for the next 12 months without resorting to speculation. You may be better off waiting until you have analysed the users’ response to the MVP.\nDelay the creation of your product roadmap until you have a valid product strategy in place and you understand how to implement the strategy. Otherwise you are likely to end up with a speculative and unreliable roadmap that is useless. This may cause the stakeholders to lose trust in the product roadmap and in your planning abilities.\n ","url":"https://www.romanpichler.com/blog/three-common-product-roadmapping-mistakes/"},{"date_scraped_timestamp":1710925458194,"host":"www.romanpichler.com","page_title":"3 Empowerment Levels in Product Management","text":"\n \n Published on 19th February 2024\n \n \n \n \n \n \n \n Being empowered can make all the difference in doing a great job. Sadly, not all product people have the authority they need. This observation is hardly new, though, and just wishing for more empowerment isn't enough. In this article, I explain what empowerment in product management really means. I help you determine how empowered you are, and I share specific tips to increase your empowerment. \n \nListen to the audio version of this article:\nIntroduction\nTo discuss empowerment in product management, I find it helpful to distinguish three main levels of decision-making authority, product delivery, product discovery, and product strategy, as the model in Figure 1 shows.[1]\nFigure 1: An Empowerment Model for Product People and Teams\nLevel one represents the authority to decide how features are detailed and guide their implementation. Level two increases empowerment by adding the authority to determine the features and user experience the product should offer. Level three, finally, allows product people and teams to develop the product strategy including the value proposition and business goals.\nBefore I discuss the three levels in more detail, let me briefly explain why I wrote this article. My intention is to help you better understand your current level of empowerment, decide if it is appropriate, and determine how you might strengthen your authority. If you manage a group of product people, for example, as the head of product, I hope that the article will help you determine if the group’s empowerment is sufficient.\nI certainly don’t intend to make anyone feel bad. At the same time, I believe that it is important to look at things the way they are. It’s the first step to bring about positive change.\nLevel 1: Product Delivery\nIf your job is to decide how features are implemented and if you work with one or two development teams to deliver them, then you are at level one. Here are four signs that this is the case:\nStakeholders, management, or another, more strategic product role determine which features have to be provided and communicate them to you, for example, during a sprint review meeting or in the form of feature requests.[2]\nThe product backlog, or one of its subsets, and the release plan are the main artefacts you work with.\nYou spend a significant amount of your time refining product backlog items, writing user stories, tracking the development progress, and talking to development team members.\nYou are not in a position to decline feature requests.\nWhile the work you do at level one is valuable, your role is similar to a project or delivery manager. As you are not empowered to determine the product features, you are not in a position to manage the product and significantly impact the value it creates. To put it differently, level-one empowerment is not sufficient for being an effective product manager or Scrum product owner.[3]\nLevel 2: Product Discovery\nLevel-two empowerment means that you determine the product features and user experience. You are usually at this level if the following five criteria apply:\nYou carry out product discovery activities including talking to users, detailing user needs, and deriving the right product features.\nYou use an outcome-based product roadmap and/or an opportunity solution tree, personas, user journey maps, and the product backlog to capture and validate your decisions and guide the product delivery effort.\nYou manage the stakeholders, for example, by inviting them to roadmapping workshops and sprint review meetings or by having regular one-on-ones with them.\nYou work towards an overarching product strategy, which states the value the product should create for the users, customers, and business. The strategy may be developed by the head of product or another senior manager.\nYou are empowered to decline a feature request if it does not meet the agreed strategic objectives.\nAt level two, you can actually manage the product and influence the value it creates. Consequently, this is the minimum level of empowerment product managers and Scrum product owners as well as product teams require.[4]\nLevel 3: Product Strategy\nIf you are authorised to determine not only the product features but also the product strategy, you experience level-three empowerment. Here are three signs that you are at this level:\nYou engage in strategizing work, such as market discovery and market research, competitor research and competitive analysis, business modelling and financial forecasting, strategy validation, and selecting and applying the right key performance indicators (KPIs).\nYou employ the following artefacts: product vision and product strategy, business model and business case (if applicable), and KPIs.\nYou follow a business strategy and, if appropriate, a product portfolio strategy, which guide and constrain your decisions.\nIf you’re at this level, you have full-stack empowerment: You are authorised to make strategic decisions in addition to solution-focused ones. I generally recommend that product people and product teams have level-three empowerment. This allows them to innovate fast and maximise value creation.\nIf you are familiar with my work, this recommendation won’t be a surprise. I’ve advocated level-three empowerment for product managers and Scrum product owners for many years. For example, I write in my book Strategize: “As the person in charge of the product, you should own the product strategy (…), and you should be empowered to have the final say on strategic decisions.”[5]\nIt’s not uncommon, though, that the head of product—also referred to as Director of Product Management, VP of Product, and Chief Product Officer—determines the product strategy. Unfortunately, this can cause the head to be overworked, become a bottleneck, and slow down decision-making. Proactively developing the product strategy and carrying out continuous strategizing work requires a significant effort. Additionally, it prevents the contributors from adding as much value as possible, and it can lead to lower morale and productivity.\nInstead of creating and evolving the strategies of individual products, the head of product should help the contributors make the right strategic decisions, for example, by mentoring and coaching them or by asking them to attend my strategy and roadmap training. Additionally, the individual should ensure that the overall product portfolio is effectively managed, as I explain in more detail in the article Should a Head of Product Make Strategic Product Decisions.\nLevelling Up\nIt’s all good and well to understand your current level of empowerment. But how can you increase your empowerment and move up from level one to levels two and three? The brief answer is: By increasing your referent and expert power and by bringing about some organisational change, as Figure 2 shows.\nFigure 2: Empowerment Factors\nReferent and expert power refer to your ability to influence others including management, stakeholders, and development teams.[6] The former is based on the respect and trust people have in you; the latter is founded on your expertise. The more people trust you and the more knowledgeable you are, the more they will listen to your advice and let you determine the product features and make strategic product decisions. It’s therefore desirable to grow both powers.\nDeveloping Your Referent and Expert Power\nA great way to develop your referent power is to empathise with people, practise active listening, speak and act with integrity, be accountable, and involve people in product decisions, as I explain in more detail in the video below.\nTo strengthen your expert power, acquire the necessary product management skills and the relevant knowledge about your product and its market. For example, developing your ability to understand user needs, create an effective product roadmap, determine the right product features, and prioritise the product backlog will help you step up to level two. Being able to do market and competitor research, perform competitive analysis, create, validate, and evolve a product strategy, carry out business modelling and come up with a financial forecast, as well as use the right KPIs will enable you to move up to level three.\nAffecting Organisational Change\nBut as Figure 2 illustrates, growing expert and referent power may not be enough. Say that you find yourself at level one. You are then unlikely to achieve level-two empowerment without your role being adjusted and its authority and responsibility being changed. These changes will most certainly require the support of your boss. If there is a larger impact, however, for instance, on career paths, development programs, and employee selection criteria, then you are likely to require the involvement of HR and the backing of senior management.\nTo bring about the necessary changes, try to influence the decision-makers and help them understand why product people require at least level-two empowerment—preferably after you have worked on your referent and expert power.[7] But if this fails, you are faced with two options: accept the status quo or look elsewhere for a product management job that offers the right level of empowerment.\nNotes\n[1] The model in Figure 1 takes advantage of the strategy, discovery, and delivery distinction described in Marty Cagan’s book Inspired, 2nd ed. Note that the model defines empowerment as having the necessary decision-making authority and having ownership of the product or at least some aspects of it.\n[2] I use the term feature to refer to a product capability, for example, commenting on this article.\n[3] In an agile, Scrum-based process, the project management work is collaboratively performed by the Scrum product owner and the development team with the latter taking on most of the work. In the scaling framework SAFe, however, the SAFe product owner has level-one empowerment, as far as I can tell.\n[4] Marty Cagan calls teams, which lack level-two empowerment, “feature teams”.\n[5] I continue by saying: “But this does not mean that you should create the strategy and roadmap on your own, hand the finished plans to the stakeholders and development teams, and expect them to put them into action. No matter how well thought-out your product strategy and roadmap are, they are worthless if the stakeholders and development teams do not buy into them. You should therefore involve them in creating and updating the plans, preferably in the form of collaborative workshops.” Strategize, 2nd ed., p. 20.\n[6] Referent and expert power were first described by French and Raven in their paper The Basis of Social Power. They are also referred to as personal power to distinguish them from positional power, which is derived from a position in the org chart. See also my article Decoding Product Leadership for more information.\n[7] If you have qualified coaches in your organisation, ask them to support you. A Scrum Master, for example, is meant to address organisational impediments and help bring about the changes necessary to establish an effective way of working. This includes increasing the empowerment of the product people.\n ","url":"https://www.romanpichler.com/blog/empowerment-levels-in-product-management/"},{"date_scraped_timestamp":1710925737929,"host":"www.romanpichler.com","page_title":"4 Daily Scrum Tips for Product Owners","text":"\n \n Published on 20th June 2017\n \n \n \n \n \n \n \n The Daily Scrum is an important meeting for agile development teams: It facilitates self-organisation and helps maximise the chances of reaching the sprint goal. Despite its importance, the meeting is not always effective. This articles share my recommendations on how you as the product owner can help make the Daily Scrum a success. \n Tip #1: Know what it’s all about\nThe Daily Scrum meeting, sometimes also referred to as stand-up meeting, wants to help the development team manage its work. In Scrum, the team collectively agrees to a sprint goal and is responsible for meeting it. This includes tracking progress of the work on a daily basis and discussing any changes that may be required. The Daily Scrum supports self-organisation by encouraging the team members to talk about:\nThe progress made by the team members;\nWhat people intend to work on next, and\nIf anybody needs help—if there are any impediments or blockers.\nThe Daily Scrum is meant to be a quick meeting that lasts no more than 15 minutes. It should be held at the same place and time every day; I find it’s best to have the meeting in the morning.\nTip #2: Should you attend?\nI recommend that you participate in the Daily Scrum at least twice a week as the person in charge of the product. [1] This allows you to understand what’s happening in the current sprint, and if and how you can help. You may find, for example, that some user stories are done and can be reviewed; or you may discover that the team is struggling with some acceptance criteria and requires your input. Additionally, you may want to ask the team to help refine product backlog items or update the product roadmap, for instance. [2]\nBe aware that the meeting is not intended to solve any problems. Therefore, don’t turn it into a product backlog or roadmapping workshop. If you hear that the team members have questions about acceptance criteria, for example, then answer them after the meeting. Similarly, if you require the help of the team to work on the product roadmap, then hold a separate workshop.\nAdditionally, don’t forget to balance your various duties. These include not only working with the development team, but also meeting users and customers, and engaging with the stakeholders. If you religiously attend the Daily Scrum, then check if the balance is still right.\nTip #3: Don’t interfere\nRecognise that the meeting is not for you, but for the development team. Refrain from interfering with the team’s self-organisation and do not assign tasks or criticise individuals, as this would damage the team’s autonomy and weaken the commitment. If you are concerned about the sprint progress, then say so in a honest but constructive way. Do not tell the team what to do. It’s up to the team members to manage the sprint and meet the sprint goal, and it’s up to you to manage the product and the entire release (made up of several sprints).\nIf you find that the team members look at you and tell you what they have done, you know something is wrong: People report the project status to you instead of taking charge of their work. Therefore, share with the team what you see happening and ask people not to address you but each other. Alternatively, stop attending the meeting until you’ve discussed the issue in the next sprint retrospective where process improvements should be agreed (see below).\nSimilarly, if it’s hard for you not to suggest who should do what or what should be done next, then stop attending the meeting in order to give the team the necessary autonomy to self-organise and take full control of their work. You should also investigate why you find it hard to let go and trust the team to do a good job: Are you anxious to meet an ambitious product goal? Do you doubt the team’s ability to meet the sprint goal? And what can you do to feel more at ease?\nTip #4: Let the ScrumMaster do their job\nKnow that it’s the ScrumMaster’s job to ensure that the Daily Scrum takes place and that it is effective. If you feel that something is wrong, however, that the team members don’t track their work well, that people don’t attend the meeting or arrive late, or that the Daily Scrum often overruns, for instance, then discuss your concerns with the development team and ScrumMaster in the next sprint retrospective. But don’t take on ScrumMaster duties.\nRemember that your job is to manage the product—not the team or process. If you don’t have a ScrumMaster or if the individual is not available or qualified, then recognise this is as an impediment to achieving product success that needs to be resolved—by hiring a qualified ScrumMaster or helping the current one develop and grow.\nNotes\n[1] If you are in charge of a larger product and work together with other product people like feature or component owners, then you usually don’t attend Daily Scrums. Instead, participate in the Scrum of Scrums (SoS) meeting, a variant of the Daily Scrum, which is often used to facilitate multi-team development efforts. I like to work with daily SoS meetings that take place immediately after the teams’ Daily Scrums and involve a representative from each development team.\n[2] Please note that this recommendation is not in line with the 2017 edition of the Scrum Guide. Over the years, the definition of the meeting has changed. Initially, it was an open meeting, but only development team members and ScrumMaster were allowed to talk (see Agile Software Development with Scrum). In the book Agile Project Management with Scrum, the meeting is changed to allow product owners to contribute (see pp. 135 and 141). No matter what the current official definition is, the key to a successful Daily Scrum is letting the development team take full control of the work in the sprint.\n ","url":"https://www.romanpichler.com/blog/4-daily-scrum-tips-for-product-owners-product-managers/"},{"date_scraped_timestamp":1710925721250,"host":"www.romanpichler.com","page_title":"5 Tips for Building Empathy with Users","text":"\n \n Published on 4th October 2017\n \n \n \n \n \n \n \n Being able to empathise with the users and understand their feelings and thoughts is key to offer a successful product. This article shares five tips to help you develop empathy for your users and create a deeper understanding of their needs. \n Why Empathy Matters\nPossibly the most profound challenge in product management is to understand the needs of users and customers. Without developing the right understanding, our chances of creating a successful product are slim.\nWhile there are numerous techniques available to uncover user needs—think of direct observation, problem interviews, focus groups, surveys, and MVPs, to name just a few—none of them is truly useful, if we do not empathise with the people that will use our product, if we do take a genuine interest in the individuals, and want to help them.\nOtherwise, we run the risk of pushing out feature after feature, MVP after MVP, without ever knowing why some features or products stick and others don’t. In the worst case, we build digital products that are harmful and encourage addictive behaviour, as we don’t see the humans behind the analytics data and financial numbers.\nEmpathy in a Nutshell\nEmpathy is our capacity to relate to each other on a very fundamental level: to understand other people’s feelings and to take the perspective of the other person. Say a friend tells you how sad she is after splitting up with her partner. Your natural reaction will be to feel sad for her, to mirror her feelings. Or another friend shares with you how happy he is after finding a new job. You are then bound to feel happy for him. The best explanation of empathy I have found is the one below. \nWhile it is in our nature to empathise, there are some conditions that increase our ability to be empathic, while others decrease it. The following tips want to help you empathise with users and develop a deeper understanding of their needs.\nEmpathy Tip 1: Meet Users Face to Face\nMeeting real users on a regular basis should be part of every product person’s job. Unfortunately, that’s not always the case. As product people, we are sometimes shielded from the users by management, sales, or support.\nBut without meeting the beneficiaries of your product, you cannot truly understand their feelings and needs. In the worst case, you create an ineffective empathy map or persona based on hearsay and half-knowledge, but not on personal experience and insight—which is a common mistake in my experience. And while it’s great to have analytics and quantitative data available, I for my part find it impossible to empathise with numbers.\nTherefore, make sure that you meet users face to face and preferably in person, at least once every three months. While a video call call might work, I wouldn’t recommend it if you haven’t met the individual before, as it’s harder to empathise with the person if you are not in the same room.\nEmpathy Tip 2: Take a Genuine Interest in the Person\nUnderstanding another person requires a friendly, kind, and open attitude. Be respectfully curious about the individual’s thoughts and feelings, no matter if you find the person likeable or not. Now, that’s easier said than done for me, as I can be critical about others and myself. But I know that having the courage to openly engage with a “difficult person“—someone I find challenging to relate to—helps me see the individual for what she or he is: a fellow human being with hopes and dreams, worries and fears just like me.\nAdditionally, appreciate the opportunity to meet users, and be careful not to view the meeting as a tick-box exercise, as this might instrumentalise the other person: You might be more interested in collecting the right information as quickly and efficiently as possible rather than engaging with the individual. But such an approach significantly reduces your ability to empathise and consequently collect the missing information.\nAt the same time, be kind to yourself. Recognise that being worried, stressed, tense, tired, or restless will make it harder to be empathic. If you are not reasonably content, then it’s difficult to reach out and connect with others, as you are likely to be caught up in your own thoughts, emotions, and concerns.\nSimilarly, if you are primarily concerned about your own success, if you are mainly motivated by meeting a business goal or improving a product KPI, then this is likely to get in the way of developing empathy. While every product has to provide a business benefit, you should try to let go of your own and your company’s ambition to understand the person in front of you. Remember that only when a product addresses a real user need, will it be possible to achieve the desired business benefits.\nEmpathy Tip 3: Cultivate Open Mind and Stay Present\nMost of us are so used to evaluating, analysing, and judging other people’s views, emotions, looks, attitudes, and behaviour that we are hardly aware of it. Unfortunately, a judgemental, critical mind is an empathy barrier. Let’s look at an example.\nJohn, one of the users you are meeting, tells you that the latest update is rubbish. But your data suggests that the majority of users think the opposite. It’s easy then to become defensive and label John’s view as an outlier. While this might be correct, it is a judgement. Thinking that the person’s opinion is non-representative or wrong is likely to prevent you from understanding John’s reason for preferring the old product version and possibly enhancing the latest one.\nAlternatively, you might find that John’s feedback triggers a thought process. Your mind wanders and you evaluate how you could fix the issue. You might start identifying improvements for the product, possibly even redesign the user experience, while you are still sat in front of John.\nIf your mind is critical or not focused on the present, then you lose some of the connection with the other person; you are likely to empathise and understand less. What helps me is being mindful, paying attention to what’s happening inside me, how I respond to what I see and hear, and catch myself before I get lost in my own thoughts and feelings.\nEmpathy Tip 4: Ask Clarifying Questions to Deepen Your Understanding\nJohn’s feedback clearly tells us that he does not like the latest product update. But why is that? Why is he unhappy with the product? To deepen your understanding, ask open, clarifying questions.\nFor example, you might want to say to John: “It seems to me that you are disappointed with the latest update. Can you please share why that is?” This should move on the conversation to uncovering the reason for John’s negative feedback, which is likely to be an unmet need. This in turn may lead to the opportunity to innovate.\nGive John the necessary time to answer your question. Tolerate silence and don’t jump in with suggestions (“it’s probably because you wanted …”). Allow yourself to be patient; developing empathy can take time.\nEmpathy Tip 5: Eat Your Own Dog Food\nUsing your own product will also help you empathise with the users: You are likely to experience the shortcomings virtually every product has. This allows you to better understand the negative feelings and actions that the product might trigger, for example, users becoming impatient or frustrated and consequently not completing a user journey or possibly stopping to use the product.\nWhile you may want to ensure that your product does a great job for all its users, be aware that you cannot please everyone. Empathy, therefore, may require saying no so that your product continues to have a clear value proposition and addresses a specific problem for a particular group of people.\n ","url":"https://www.romanpichler.com/blog/empathy-tips-product-management/"},{"date_scraped_timestamp":1710925511984,"host":"www.romanpichler.com","page_title":"5 Tips for Saying No to Stakeholders","text":"\n \n Published on 12th January 2021\n \n \n \n \n \n \n \n Saying no is a firm part of our job as product people: Trying to please everyone and taking on board every idea is hardly a recipe for achieving product success. But saying no can be tough, especially when we are faced with a senior, assertive stakeholder. This article offers five practical tips to help you say no in the right way. \n \nListen to this article:\nImagine that you are talking to John, a senior salesperson who’s been involved with the product for a while. John mentions the upcoming product release and says, “You really must add the enhanced reporting feature. I’ve spoken to several customers, and they have all confirmed that it is absolutely crucial.” You know, though, that it is impossible to add the feature to the development effort. The dev team is struggling with the current workload, and moving the date is not an option.\nWhat’s more, you suspect that John’s request may be motivated by the desire to meet his sales targets. But John is a well-connected and influential individual who doesn’t like to be told that he is wrong. How can you decline his request without offending him and losing his support?\nYou can also access the content of this article on my YouTube channel.\nDon’t Feel Bad about Saying No\nDeclining a request can be hard. You might not want to disappoint John in the example above, you might worry that saying no will anger him and lead to conflict, or you might not want to be seen as a naysayer but somebody who has a can-do attitude and wants to help.\nSaying no, however, is part and parcel of a product person’s job. If you said yes to every idea and request, you would end up with a feature soup, a product with an uncompelling value proposition and a poor user experience. As Steve Jobs once said, “Innovation is saying ‘no’ to 1,000 things. You have to pick carefully.”\nIf you believe, however, that it would be impossible for you to say no to John, then this may indicate that you are not properly empowered, that you lack the authority and respect required to be in charge of the product and be responsible for its success. If that’s the case, explore how you can strengthen your product leadership. Refer to my article “Boost Your Product Leadership Power” for more guidance.\nEmpathise with the Stakeholder\nHaving decided that you can’t accept John’s request, you might be tempted to share your view with the individual and say, for instance: “Sorry, John. But there is no way that I can add the feature to the current release. The development team is struggling to implement the agreed features, and, as you know, we can’t push out the date.” This might seem like a reasonable answer: It’s direct and it offers an explanation. But would it be effective?\nIf John does not feel heard and understood, it will be hard for him to accept no as an answer, no matter how valid your arguments are. Instead, he might feel rejected and react with disappointment or anger. He might think that you don’t appreciate his views and don’t care about his needs. Consequently, John may no longer fully trust and support you.\nTo avoid this situation and maximise the chances that John can receive a no, empathise with the individual before you offer an answer. Find out why the feature is important to John. What is his personal, vested interest in getting the feature included in the release? Why does it matter to him? Only if John feels understood will he open up to your perspective, listen to your arguments, and accept that you can’t add the feature to the release. The following listening techniques will help you with this:\nGive your full attention to the individual. Maintain eye contact and show the person that you are interested in what she or he has to say.Keep an open mind even if you disagree with what you are hearing or if you dislike the individual. Listen with the intention to understand, not to answer. John might be right, after all, and you should add the feature to the release.Pay attention to the person’s body language. Non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—expresses the speaker’s feelings, which help you uncover the individual’s underlying interests.Ask clarifying and probing questions to check that you have correctly understood what was said and encourage the other person to provide more information. You might say, for instance, “Can you please help me understand why adding the feature is important to you?”\nReframe the Conversation\nStakeholders often request specific features without necessarily being fully aware of the problem it addresses. But value is hardly created by adding a single piece of functionality—at least as long as a product is young or changing. Instead of debating an individual feature with John, reframe the conversation. Explore which user or customer problem the functionality would help address. How would implementing the feature benefit these individuals? Why do some customers view it as crucial, to stay with the example above? And would there be an alternative way to achieve the desired impact?\nAdditionally, consider if the feature is aligned with the product goal of the current development effort, the outcome you want to achieve, for example, to enter a new market or to increase engagement. Will addressing the user problem help you meet this goal and create the desired benefit?\nIf the answer is yes, then you should consider adapting the development effort. You may decide to add the feature to the release, assuming that you make appropriate adjustments like reducing or removing other features or moving the delivery date. But if the answer is no, then you should decline the request.\nDon’t Rush the Decision\nIt can be tempting to quickly make a decision just to be done with it. While you don’t want to procrastinate the decision, rushing it is usually a bad idea.\nSay that the conversation with John has turned difficult. He is adamant that the feature must be added, and he doesn’t want to accept your view. What’s more, he suggests that you don’t understand what the customers want, and he threatens to escalate the issue if you decline his request. In such a situation, it’s natural to feel difficult emotions like confusion, worry, and anger. \nWhen this happens, it’s best to pause the conversation and to postpone the decision to regain a cool head and allow the difficult feelings to subside. You might say to John, “It’s really important to me that we find a good solution. But I am feeling upset right now, and I need some time to reflect on what I heard you say. Let’s please continue the conversation in the afternoon.”\nAdditionally, consider if you can and should make the decision on your own. If the decision has a bigger impact, if you require other people’s input to make the right decision, or if you want to secure their buy-in, I recommend scheduling a meeting with all the key stakeholders and the development team representatives in order to discuss and evaluate the feature request and make a joint decision. You might even find that you need to run an experiment and collect relevant data, for instance, by interviewing users or releasing a feature fake, before you can make the decision.\nTry to Find Common Ground, but Don’t Split the Difference\nWhile saying no is sometimes unavoidable, I recommend that you explore if there is an alternative way to meet the stakeholder’s underlying need. Say that your suspicion turned out to be right: John’s request is, at least partly, motivated by the desire to meet his sales targets and claim a bonus.\nIf that’s the case, find out if you can help him achieve his goal without having to add the feature—assuming that you believe that it is right for you to help John pursue this goal. Would it be helpful, for example, to develop a sales pitch that shows that the product addresses some of the customer needs without providing the extra feature? Or is there another solution you can develop together with John?\nDon’t make the mistake, though, to simply split the difference and suggest to John that you will partially implement the feature as part of the current release—unless this would actually meet John’s underlying need and not sacrifice sustainable pace for the development team.\nDo what is necessary to maximise the value your product creates but don’t attempt to please individual stakeholders. Be kind and firm. Remember: Successful products are not built on weak compromises or the smallest common denominator.\n ","url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/"},{"date_scraped_timestamp":1710925776981,"host":"www.romanpichler.com","page_title":"5 Tips for Saying No to Stakeholders","text":"\n \n Published on 12th January 2021\n \n \n \n \n \n \n \n Saying no is a firm part of our job as product people: Trying to please everyone and taking on board every idea is hardly a recipe for achieving product success. But saying no can be tough, especially when we are faced with a senior, assertive stakeholder. This article offers five practical tips to help you say no in the right way. \n \nListen to this article:\nImagine that you are talking to John, a senior salesperson who’s been involved with the product for a while. John mentions the upcoming product release and says, “You really must add the enhanced reporting feature. I’ve spoken to several customers, and they have all confirmed that it is absolutely crucial.” You know, though, that it is impossible to add the feature to the development effort. The dev team is struggling with the current workload, and moving the date is not an option.\nWhat’s more, you suspect that John’s request may be motivated by the desire to meet his sales targets. But John is a well-connected and influential individual who doesn’t like to be told that he is wrong. How can you decline his request without offending him and losing his support?\nYou can also access the content of this article on my YouTube channel.\nDon’t Feel Bad about Saying No\nDeclining a request can be hard. You might not want to disappoint John in the example above, you might worry that saying no will anger him and lead to conflict, or you might not want to be seen as a naysayer but somebody who has a can-do attitude and wants to help.\nSaying no, however, is part and parcel of a product person’s job. If you said yes to every idea and request, you would end up with a feature soup, a product with an uncompelling value proposition and a poor user experience. As Steve Jobs once said, “Innovation is saying ‘no’ to 1,000 things. You have to pick carefully.”\nIf you believe, however, that it would be impossible for you to say no to John, then this may indicate that you are not properly empowered, that you lack the authority and respect required to be in charge of the product and be responsible for its success. If that’s the case, explore how you can strengthen your product leadership. Refer to my article “Boost Your Product Leadership Power” for more guidance.\nEmpathise with the Stakeholder\nHaving decided that you can’t accept John’s request, you might be tempted to share your view with the individual and say, for instance: “Sorry, John. But there is no way that I can add the feature to the current release. The development team is struggling to implement the agreed features, and, as you know, we can’t push out the date.” This might seem like a reasonable answer: It’s direct and it offers an explanation. But would it be effective?\nIf John does not feel heard and understood, it will be hard for him to accept no as an answer, no matter how valid your arguments are. Instead, he might feel rejected and react with disappointment or anger. He might think that you don’t appreciate his views and don’t care about his needs. Consequently, John may no longer fully trust and support you.\nTo avoid this situation and maximise the chances that John can receive a no, empathise with the individual before you offer an answer. Find out why the feature is important to John. What is his personal, vested interest in getting the feature included in the release? Why does it matter to him? Only if John feels understood will he open up to your perspective, listen to your arguments, and accept that you can’t add the feature to the release. The following listening techniques will help you with this:\nGive your full attention to the individual. Maintain eye contact and show the person that you are interested in what she or he has to say.Keep an open mind even if you disagree with what you are hearing or if you dislike the individual. Listen with the intention to understand, not to answer. John might be right, after all, and you should add the feature to the release.Pay attention to the person’s body language. Non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—expresses the speaker’s feelings, which help you uncover the individual’s underlying interests.Ask clarifying and probing questions to check that you have correctly understood what was said and encourage the other person to provide more information. You might say, for instance, “Can you please help me understand why adding the feature is important to you?”\nReframe the Conversation\nStakeholders often request specific features without necessarily being fully aware of the problem it addresses. But value is hardly created by adding a single piece of functionality—at least as long as a product is young or changing. Instead of debating an individual feature with John, reframe the conversation. Explore which user or customer problem the functionality would help address. How would implementing the feature benefit these individuals? Why do some customers view it as crucial, to stay with the example above? And would there be an alternative way to achieve the desired impact?\nAdditionally, consider if the feature is aligned with the product goal of the current development effort, the outcome you want to achieve, for example, to enter a new market or to increase engagement. Will addressing the user problem help you meet this goal and create the desired benefit?\nIf the answer is yes, then you should consider adapting the development effort. You may decide to add the feature to the release, assuming that you make appropriate adjustments like reducing or removing other features or moving the delivery date. But if the answer is no, then you should decline the request.\nDon’t Rush the Decision\nIt can be tempting to quickly make a decision just to be done with it. While you don’t want to procrastinate the decision, rushing it is usually a bad idea.\nSay that the conversation with John has turned difficult. He is adamant that the feature must be added, and he doesn’t want to accept your view. What’s more, he suggests that you don’t understand what the customers want, and he threatens to escalate the issue if you decline his request. In such a situation, it’s natural to feel difficult emotions like confusion, worry, and anger. \nWhen this happens, it’s best to pause the conversation and to postpone the decision to regain a cool head and allow the difficult feelings to subside. You might say to John, “It’s really important to me that we find a good solution. But I am feeling upset right now, and I need some time to reflect on what I heard you say. Let’s please continue the conversation in the afternoon.”\nAdditionally, consider if you can and should make the decision on your own. If the decision has a bigger impact, if you require other people’s input to make the right decision, or if you want to secure their buy-in, I recommend scheduling a meeting with all the key stakeholders and the development team representatives in order to discuss and evaluate the feature request and make a joint decision. You might even find that you need to run an experiment and collect relevant data, for instance, by interviewing users or releasing a feature fake, before you can make the decision.\nTry to Find Common Ground, but Don’t Split the Difference\nWhile saying no is sometimes unavoidable, I recommend that you explore if there is an alternative way to meet the stakeholder’s underlying need. Say that your suspicion turned out to be right: John’s request is, at least partly, motivated by the desire to meet his sales targets and claim a bonus.\nIf that’s the case, find out if you can help him achieve his goal without having to add the feature—assuming that you believe that it is right for you to help John pursue this goal. Would it be helpful, for example, to develop a sales pitch that shows that the product addresses some of the customer needs without providing the extra feature? Or is there another solution you can develop together with John?\nDon’t make the mistake, though, to simply split the difference and suggest to John that you will partially implement the feature as part of the current release—unless this would actually meet John’s underlying need and not sacrifice sustainable pace for the development team.\nDo what is necessary to maximise the value your product creates but don’t attempt to please individual stakeholders. Be kind and firm. Remember: Successful products are not built on weak compromises or the smallest common denominator.\n ","url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/?replytocom=53943"},{"date_scraped_timestamp":1710925783941,"host":"www.romanpichler.com","page_title":"5 Tips for Saying No to Stakeholders","text":"\n \n Published on 12th January 2021\n \n \n \n \n \n \n \n Saying no is a firm part of our job as product people: Trying to please everyone and taking on board every idea is hardly a recipe for achieving product success. But saying no can be tough, especially when we are faced with a senior, assertive stakeholder. This article offers five practical tips to help you say no in the right way. \n \nListen to this article:\nImagine that you are talking to John, a senior salesperson who’s been involved with the product for a while. John mentions the upcoming product release and says, “You really must add the enhanced reporting feature. I’ve spoken to several customers, and they have all confirmed that it is absolutely crucial.” You know, though, that it is impossible to add the feature to the development effort. The dev team is struggling with the current workload, and moving the date is not an option.\nWhat’s more, you suspect that John’s request may be motivated by the desire to meet his sales targets. But John is a well-connected and influential individual who doesn’t like to be told that he is wrong. How can you decline his request without offending him and losing his support?\nYou can also access the content of this article on my YouTube channel.\nDon’t Feel Bad about Saying No\nDeclining a request can be hard. You might not want to disappoint John in the example above, you might worry that saying no will anger him and lead to conflict, or you might not want to be seen as a naysayer but somebody who has a can-do attitude and wants to help.\nSaying no, however, is part and parcel of a product person’s job. If you said yes to every idea and request, you would end up with a feature soup, a product with an uncompelling value proposition and a poor user experience. As Steve Jobs once said, “Innovation is saying ‘no’ to 1,000 things. You have to pick carefully.”\nIf you believe, however, that it would be impossible for you to say no to John, then this may indicate that you are not properly empowered, that you lack the authority and respect required to be in charge of the product and be responsible for its success. If that’s the case, explore how you can strengthen your product leadership. Refer to my article “Boost Your Product Leadership Power” for more guidance.\nEmpathise with the Stakeholder\nHaving decided that you can’t accept John’s request, you might be tempted to share your view with the individual and say, for instance: “Sorry, John. But there is no way that I can add the feature to the current release. The development team is struggling to implement the agreed features, and, as you know, we can’t push out the date.” This might seem like a reasonable answer: It’s direct and it offers an explanation. But would it be effective?\nIf John does not feel heard and understood, it will be hard for him to accept no as an answer, no matter how valid your arguments are. Instead, he might feel rejected and react with disappointment or anger. He might think that you don’t appreciate his views and don’t care about his needs. Consequently, John may no longer fully trust and support you.\nTo avoid this situation and maximise the chances that John can receive a no, empathise with the individual before you offer an answer. Find out why the feature is important to John. What is his personal, vested interest in getting the feature included in the release? Why does it matter to him? Only if John feels understood will he open up to your perspective, listen to your arguments, and accept that you can’t add the feature to the release. The following listening techniques will help you with this:\nGive your full attention to the individual. Maintain eye contact and show the person that you are interested in what she or he has to say.Keep an open mind even if you disagree with what you are hearing or if you dislike the individual. Listen with the intention to understand, not to answer. John might be right, after all, and you should add the feature to the release.Pay attention to the person’s body language. Non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—expresses the speaker’s feelings, which help you uncover the individual’s underlying interests.Ask clarifying and probing questions to check that you have correctly understood what was said and encourage the other person to provide more information. You might say, for instance, “Can you please help me understand why adding the feature is important to you?”\nReframe the Conversation\nStakeholders often request specific features without necessarily being fully aware of the problem it addresses. But value is hardly created by adding a single piece of functionality—at least as long as a product is young or changing. Instead of debating an individual feature with John, reframe the conversation. Explore which user or customer problem the functionality would help address. How would implementing the feature benefit these individuals? Why do some customers view it as crucial, to stay with the example above? And would there be an alternative way to achieve the desired impact?\nAdditionally, consider if the feature is aligned with the product goal of the current development effort, the outcome you want to achieve, for example, to enter a new market or to increase engagement. Will addressing the user problem help you meet this goal and create the desired benefit?\nIf the answer is yes, then you should consider adapting the development effort. You may decide to add the feature to the release, assuming that you make appropriate adjustments like reducing or removing other features or moving the delivery date. But if the answer is no, then you should decline the request.\nDon’t Rush the Decision\nIt can be tempting to quickly make a decision just to be done with it. While you don’t want to procrastinate the decision, rushing it is usually a bad idea.\nSay that the conversation with John has turned difficult. He is adamant that the feature must be added, and he doesn’t want to accept your view. What’s more, he suggests that you don’t understand what the customers want, and he threatens to escalate the issue if you decline his request. In such a situation, it’s natural to feel difficult emotions like confusion, worry, and anger. \nWhen this happens, it’s best to pause the conversation and to postpone the decision to regain a cool head and allow the difficult feelings to subside. You might say to John, “It’s really important to me that we find a good solution. But I am feeling upset right now, and I need some time to reflect on what I heard you say. Let’s please continue the conversation in the afternoon.”\nAdditionally, consider if you can and should make the decision on your own. If the decision has a bigger impact, if you require other people’s input to make the right decision, or if you want to secure their buy-in, I recommend scheduling a meeting with all the key stakeholders and the development team representatives in order to discuss and evaluate the feature request and make a joint decision. You might even find that you need to run an experiment and collect relevant data, for instance, by interviewing users or releasing a feature fake, before you can make the decision.\nTry to Find Common Ground, but Don’t Split the Difference\nWhile saying no is sometimes unavoidable, I recommend that you explore if there is an alternative way to meet the stakeholder’s underlying need. Say that your suspicion turned out to be right: John’s request is, at least partly, motivated by the desire to meet his sales targets and claim a bonus.\nIf that’s the case, find out if you can help him achieve his goal without having to add the feature—assuming that you believe that it is right for you to help John pursue this goal. Would it be helpful, for example, to develop a sales pitch that shows that the product addresses some of the customer needs without providing the extra feature? Or is there another solution you can develop together with John?\nDon’t make the mistake, though, to simply split the difference and suggest to John that you will partially implement the feature as part of the current release—unless this would actually meet John’s underlying need and not sacrifice sustainable pace for the development team.\nDo what is necessary to maximise the value your product creates but don’t attempt to please individual stakeholders. Be kind and firm. Remember: Successful products are not built on weak compromises or the smallest common denominator.\n ","url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/?replytocom=54271"},{"date_scraped_timestamp":1710925773545,"host":"www.romanpichler.com","page_title":"5 Tips for Saying No to Stakeholders","text":"\n \n Published on 12th January 2021\n \n \n \n \n \n \n \n Saying no is a firm part of our job as product people: Trying to please everyone and taking on board every idea is hardly a recipe for achieving product success. But saying no can be tough, especially when we are faced with a senior, assertive stakeholder. This article offers five practical tips to help you say no in the right way. \n \nListen to this article:\nImagine that you are talking to John, a senior salesperson who’s been involved with the product for a while. John mentions the upcoming product release and says, “You really must add the enhanced reporting feature. I’ve spoken to several customers, and they have all confirmed that it is absolutely crucial.” You know, though, that it is impossible to add the feature to the development effort. The dev team is struggling with the current workload, and moving the date is not an option.\nWhat’s more, you suspect that John’s request may be motivated by the desire to meet his sales targets. But John is a well-connected and influential individual who doesn’t like to be told that he is wrong. How can you decline his request without offending him and losing his support?\nYou can also access the content of this article on my YouTube channel.\nDon’t Feel Bad about Saying No\nDeclining a request can be hard. You might not want to disappoint John in the example above, you might worry that saying no will anger him and lead to conflict, or you might not want to be seen as a naysayer but somebody who has a can-do attitude and wants to help.\nSaying no, however, is part and parcel of a product person’s job. If you said yes to every idea and request, you would end up with a feature soup, a product with an uncompelling value proposition and a poor user experience. As Steve Jobs once said, “Innovation is saying ‘no’ to 1,000 things. You have to pick carefully.”\nIf you believe, however, that it would be impossible for you to say no to John, then this may indicate that you are not properly empowered, that you lack the authority and respect required to be in charge of the product and be responsible for its success. If that’s the case, explore how you can strengthen your product leadership. Refer to my article “Boost Your Product Leadership Power” for more guidance.\nEmpathise with the Stakeholder\nHaving decided that you can’t accept John’s request, you might be tempted to share your view with the individual and say, for instance: “Sorry, John. But there is no way that I can add the feature to the current release. The development team is struggling to implement the agreed features, and, as you know, we can’t push out the date.” This might seem like a reasonable answer: It’s direct and it offers an explanation. But would it be effective?\nIf John does not feel heard and understood, it will be hard for him to accept no as an answer, no matter how valid your arguments are. Instead, he might feel rejected and react with disappointment or anger. He might think that you don’t appreciate his views and don’t care about his needs. Consequently, John may no longer fully trust and support you.\nTo avoid this situation and maximise the chances that John can receive a no, empathise with the individual before you offer an answer. Find out why the feature is important to John. What is his personal, vested interest in getting the feature included in the release? Why does it matter to him? Only if John feels understood will he open up to your perspective, listen to your arguments, and accept that you can’t add the feature to the release. The following listening techniques will help you with this:\nGive your full attention to the individual. Maintain eye contact and show the person that you are interested in what she or he has to say.Keep an open mind even if you disagree with what you are hearing or if you dislike the individual. Listen with the intention to understand, not to answer. John might be right, after all, and you should add the feature to the release.Pay attention to the person’s body language. Non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—expresses the speaker’s feelings, which help you uncover the individual’s underlying interests.Ask clarifying and probing questions to check that you have correctly understood what was said and encourage the other person to provide more information. You might say, for instance, “Can you please help me understand why adding the feature is important to you?”\nReframe the Conversation\nStakeholders often request specific features without necessarily being fully aware of the problem it addresses. But value is hardly created by adding a single piece of functionality—at least as long as a product is young or changing. Instead of debating an individual feature with John, reframe the conversation. Explore which user or customer problem the functionality would help address. How would implementing the feature benefit these individuals? Why do some customers view it as crucial, to stay with the example above? And would there be an alternative way to achieve the desired impact?\nAdditionally, consider if the feature is aligned with the product goal of the current development effort, the outcome you want to achieve, for example, to enter a new market or to increase engagement. Will addressing the user problem help you meet this goal and create the desired benefit?\nIf the answer is yes, then you should consider adapting the development effort. You may decide to add the feature to the release, assuming that you make appropriate adjustments like reducing or removing other features or moving the delivery date. But if the answer is no, then you should decline the request.\nDon’t Rush the Decision\nIt can be tempting to quickly make a decision just to be done with it. While you don’t want to procrastinate the decision, rushing it is usually a bad idea.\nSay that the conversation with John has turned difficult. He is adamant that the feature must be added, and he doesn’t want to accept your view. What’s more, he suggests that you don’t understand what the customers want, and he threatens to escalate the issue if you decline his request. In such a situation, it’s natural to feel difficult emotions like confusion, worry, and anger. \nWhen this happens, it’s best to pause the conversation and to postpone the decision to regain a cool head and allow the difficult feelings to subside. You might say to John, “It’s really important to me that we find a good solution. But I am feeling upset right now, and I need some time to reflect on what I heard you say. Let’s please continue the conversation in the afternoon.”\nAdditionally, consider if you can and should make the decision on your own. If the decision has a bigger impact, if you require other people’s input to make the right decision, or if you want to secure their buy-in, I recommend scheduling a meeting with all the key stakeholders and the development team representatives in order to discuss and evaluate the feature request and make a joint decision. You might even find that you need to run an experiment and collect relevant data, for instance, by interviewing users or releasing a feature fake, before you can make the decision.\nTry to Find Common Ground, but Don’t Split the Difference\nWhile saying no is sometimes unavoidable, I recommend that you explore if there is an alternative way to meet the stakeholder’s underlying need. Say that your suspicion turned out to be right: John’s request is, at least partly, motivated by the desire to meet his sales targets and claim a bonus.\nIf that’s the case, find out if you can help him achieve his goal without having to add the feature—assuming that you believe that it is right for you to help John pursue this goal. Would it be helpful, for example, to develop a sales pitch that shows that the product addresses some of the customer needs without providing the extra feature? Or is there another solution you can develop together with John?\nDon’t make the mistake, though, to simply split the difference and suggest to John that you will partially implement the feature as part of the current release—unless this would actually meet John’s underlying need and not sacrifice sustainable pace for the development team.\nDo what is necessary to maximise the value your product creates but don’t attempt to please individual stakeholders. Be kind and firm. Remember: Successful products are not built on weak compromises or the smallest common denominator.\n ","url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/?replytocom=56624"},{"date_scraped_timestamp":1710925783317,"host":"www.romanpichler.com","page_title":"5 Tips for Saying No to Stakeholders","text":"\n \n Published on 12th January 2021\n \n \n \n \n \n \n \n Saying no is a firm part of our job as product people: Trying to please everyone and taking on board every idea is hardly a recipe for achieving product success. But saying no can be tough, especially when we are faced with a senior, assertive stakeholder. This article offers five practical tips to help you say no in the right way. \n \nListen to this article:\nImagine that you are talking to John, a senior salesperson who’s been involved with the product for a while. John mentions the upcoming product release and says, “You really must add the enhanced reporting feature. I’ve spoken to several customers, and they have all confirmed that it is absolutely crucial.” You know, though, that it is impossible to add the feature to the development effort. The dev team is struggling with the current workload, and moving the date is not an option.\nWhat’s more, you suspect that John’s request may be motivated by the desire to meet his sales targets. But John is a well-connected and influential individual who doesn’t like to be told that he is wrong. How can you decline his request without offending him and losing his support?\nYou can also access the content of this article on my YouTube channel.\nDon’t Feel Bad about Saying No\nDeclining a request can be hard. You might not want to disappoint John in the example above, you might worry that saying no will anger him and lead to conflict, or you might not want to be seen as a naysayer but somebody who has a can-do attitude and wants to help.\nSaying no, however, is part and parcel of a product person’s job. If you said yes to every idea and request, you would end up with a feature soup, a product with an uncompelling value proposition and a poor user experience. As Steve Jobs once said, “Innovation is saying ‘no’ to 1,000 things. You have to pick carefully.”\nIf you believe, however, that it would be impossible for you to say no to John, then this may indicate that you are not properly empowered, that you lack the authority and respect required to be in charge of the product and be responsible for its success. If that’s the case, explore how you can strengthen your product leadership. Refer to my article “Boost Your Product Leadership Power” for more guidance.\nEmpathise with the Stakeholder\nHaving decided that you can’t accept John’s request, you might be tempted to share your view with the individual and say, for instance: “Sorry, John. But there is no way that I can add the feature to the current release. The development team is struggling to implement the agreed features, and, as you know, we can’t push out the date.” This might seem like a reasonable answer: It’s direct and it offers an explanation. But would it be effective?\nIf John does not feel heard and understood, it will be hard for him to accept no as an answer, no matter how valid your arguments are. Instead, he might feel rejected and react with disappointment or anger. He might think that you don’t appreciate his views and don’t care about his needs. Consequently, John may no longer fully trust and support you.\nTo avoid this situation and maximise the chances that John can receive a no, empathise with the individual before you offer an answer. Find out why the feature is important to John. What is his personal, vested interest in getting the feature included in the release? Why does it matter to him? Only if John feels understood will he open up to your perspective, listen to your arguments, and accept that you can’t add the feature to the release. The following listening techniques will help you with this:\nGive your full attention to the individual. Maintain eye contact and show the person that you are interested in what she or he has to say.Keep an open mind even if you disagree with what you are hearing or if you dislike the individual. Listen with the intention to understand, not to answer. John might be right, after all, and you should add the feature to the release.Pay attention to the person’s body language. Non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—expresses the speaker’s feelings, which help you uncover the individual’s underlying interests.Ask clarifying and probing questions to check that you have correctly understood what was said and encourage the other person to provide more information. You might say, for instance, “Can you please help me understand why adding the feature is important to you?”\nReframe the Conversation\nStakeholders often request specific features without necessarily being fully aware of the problem it addresses. But value is hardly created by adding a single piece of functionality—at least as long as a product is young or changing. Instead of debating an individual feature with John, reframe the conversation. Explore which user or customer problem the functionality would help address. How would implementing the feature benefit these individuals? Why do some customers view it as crucial, to stay with the example above? And would there be an alternative way to achieve the desired impact?\nAdditionally, consider if the feature is aligned with the product goal of the current development effort, the outcome you want to achieve, for example, to enter a new market or to increase engagement. Will addressing the user problem help you meet this goal and create the desired benefit?\nIf the answer is yes, then you should consider adapting the development effort. You may decide to add the feature to the release, assuming that you make appropriate adjustments like reducing or removing other features or moving the delivery date. But if the answer is no, then you should decline the request.\nDon’t Rush the Decision\nIt can be tempting to quickly make a decision just to be done with it. While you don’t want to procrastinate the decision, rushing it is usually a bad idea.\nSay that the conversation with John has turned difficult. He is adamant that the feature must be added, and he doesn’t want to accept your view. What’s more, he suggests that you don’t understand what the customers want, and he threatens to escalate the issue if you decline his request. In such a situation, it’s natural to feel difficult emotions like confusion, worry, and anger. \nWhen this happens, it’s best to pause the conversation and to postpone the decision to regain a cool head and allow the difficult feelings to subside. You might say to John, “It’s really important to me that we find a good solution. But I am feeling upset right now, and I need some time to reflect on what I heard you say. Let’s please continue the conversation in the afternoon.”\nAdditionally, consider if you can and should make the decision on your own. If the decision has a bigger impact, if you require other people’s input to make the right decision, or if you want to secure their buy-in, I recommend scheduling a meeting with all the key stakeholders and the development team representatives in order to discuss and evaluate the feature request and make a joint decision. You might even find that you need to run an experiment and collect relevant data, for instance, by interviewing users or releasing a feature fake, before you can make the decision.\nTry to Find Common Ground, but Don’t Split the Difference\nWhile saying no is sometimes unavoidable, I recommend that you explore if there is an alternative way to meet the stakeholder’s underlying need. Say that your suspicion turned out to be right: John’s request is, at least partly, motivated by the desire to meet his sales targets and claim a bonus.\nIf that’s the case, find out if you can help him achieve his goal without having to add the feature—assuming that you believe that it is right for you to help John pursue this goal. Would it be helpful, for example, to develop a sales pitch that shows that the product addresses some of the customer needs without providing the extra feature? Or is there another solution you can develop together with John?\nDon’t make the mistake, though, to simply split the difference and suggest to John that you will partially implement the feature as part of the current release—unless this would actually meet John’s underlying need and not sacrifice sustainable pace for the development team.\nDo what is necessary to maximise the value your product creates but don’t attempt to please individual stakeholders. Be kind and firm. Remember: Successful products are not built on weak compromises or the smallest common denominator.\n ","url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/?replytocom=55554"},{"date_scraped_timestamp":1710925772785,"host":"www.romanpichler.com","page_title":"5 Tips for Saying No to Stakeholders","text":"\n \n Published on 12th January 2021\n \n \n \n \n \n \n \n Saying no is a firm part of our job as product people: Trying to please everyone and taking on board every idea is hardly a recipe for achieving product success. But saying no can be tough, especially when we are faced with a senior, assertive stakeholder. This article offers five practical tips to help you say no in the right way. \n \nListen to this article:\nImagine that you are talking to John, a senior salesperson who’s been involved with the product for a while. John mentions the upcoming product release and says, “You really must add the enhanced reporting feature. I’ve spoken to several customers, and they have all confirmed that it is absolutely crucial.” You know, though, that it is impossible to add the feature to the development effort. The dev team is struggling with the current workload, and moving the date is not an option.\nWhat’s more, you suspect that John’s request may be motivated by the desire to meet his sales targets. But John is a well-connected and influential individual who doesn’t like to be told that he is wrong. How can you decline his request without offending him and losing his support?\nYou can also access the content of this article on my YouTube channel.\nDon’t Feel Bad about Saying No\nDeclining a request can be hard. You might not want to disappoint John in the example above, you might worry that saying no will anger him and lead to conflict, or you might not want to be seen as a naysayer but somebody who has a can-do attitude and wants to help.\nSaying no, however, is part and parcel of a product person’s job. If you said yes to every idea and request, you would end up with a feature soup, a product with an uncompelling value proposition and a poor user experience. As Steve Jobs once said, “Innovation is saying ‘no’ to 1,000 things. You have to pick carefully.”\nIf you believe, however, that it would be impossible for you to say no to John, then this may indicate that you are not properly empowered, that you lack the authority and respect required to be in charge of the product and be responsible for its success. If that’s the case, explore how you can strengthen your product leadership. Refer to my article “Boost Your Product Leadership Power” for more guidance.\nEmpathise with the Stakeholder\nHaving decided that you can’t accept John’s request, you might be tempted to share your view with the individual and say, for instance: “Sorry, John. But there is no way that I can add the feature to the current release. The development team is struggling to implement the agreed features, and, as you know, we can’t push out the date.” This might seem like a reasonable answer: It’s direct and it offers an explanation. But would it be effective?\nIf John does not feel heard and understood, it will be hard for him to accept no as an answer, no matter how valid your arguments are. Instead, he might feel rejected and react with disappointment or anger. He might think that you don’t appreciate his views and don’t care about his needs. Consequently, John may no longer fully trust and support you.\nTo avoid this situation and maximise the chances that John can receive a no, empathise with the individual before you offer an answer. Find out why the feature is important to John. What is his personal, vested interest in getting the feature included in the release? Why does it matter to him? Only if John feels understood will he open up to your perspective, listen to your arguments, and accept that you can’t add the feature to the release. The following listening techniques will help you with this:\nGive your full attention to the individual. Maintain eye contact and show the person that you are interested in what she or he has to say.Keep an open mind even if you disagree with what you are hearing or if you dislike the individual. Listen with the intention to understand, not to answer. John might be right, after all, and you should add the feature to the release.Pay attention to the person’s body language. Non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—expresses the speaker’s feelings, which help you uncover the individual’s underlying interests.Ask clarifying and probing questions to check that you have correctly understood what was said and encourage the other person to provide more information. You might say, for instance, “Can you please help me understand why adding the feature is important to you?”\nReframe the Conversation\nStakeholders often request specific features without necessarily being fully aware of the problem it addresses. But value is hardly created by adding a single piece of functionality—at least as long as a product is young or changing. Instead of debating an individual feature with John, reframe the conversation. Explore which user or customer problem the functionality would help address. How would implementing the feature benefit these individuals? Why do some customers view it as crucial, to stay with the example above? And would there be an alternative way to achieve the desired impact?\nAdditionally, consider if the feature is aligned with the product goal of the current development effort, the outcome you want to achieve, for example, to enter a new market or to increase engagement. Will addressing the user problem help you meet this goal and create the desired benefit?\nIf the answer is yes, then you should consider adapting the development effort. You may decide to add the feature to the release, assuming that you make appropriate adjustments like reducing or removing other features or moving the delivery date. But if the answer is no, then you should decline the request.\nDon’t Rush the Decision\nIt can be tempting to quickly make a decision just to be done with it. While you don’t want to procrastinate the decision, rushing it is usually a bad idea.\nSay that the conversation with John has turned difficult. He is adamant that the feature must be added, and he doesn’t want to accept your view. What’s more, he suggests that you don’t understand what the customers want, and he threatens to escalate the issue if you decline his request. In such a situation, it’s natural to feel difficult emotions like confusion, worry, and anger. \nWhen this happens, it’s best to pause the conversation and to postpone the decision to regain a cool head and allow the difficult feelings to subside. You might say to John, “It’s really important to me that we find a good solution. But I am feeling upset right now, and I need some time to reflect on what I heard you say. Let’s please continue the conversation in the afternoon.”\nAdditionally, consider if you can and should make the decision on your own. If the decision has a bigger impact, if you require other people’s input to make the right decision, or if you want to secure their buy-in, I recommend scheduling a meeting with all the key stakeholders and the development team representatives in order to discuss and evaluate the feature request and make a joint decision. You might even find that you need to run an experiment and collect relevant data, for instance, by interviewing users or releasing a feature fake, before you can make the decision.\nTry to Find Common Ground, but Don’t Split the Difference\nWhile saying no is sometimes unavoidable, I recommend that you explore if there is an alternative way to meet the stakeholder’s underlying need. Say that your suspicion turned out to be right: John’s request is, at least partly, motivated by the desire to meet his sales targets and claim a bonus.\nIf that’s the case, find out if you can help him achieve his goal without having to add the feature—assuming that you believe that it is right for you to help John pursue this goal. Would it be helpful, for example, to develop a sales pitch that shows that the product addresses some of the customer needs without providing the extra feature? Or is there another solution you can develop together with John?\nDon’t make the mistake, though, to simply split the difference and suggest to John that you will partially implement the feature as part of the current release—unless this would actually meet John’s underlying need and not sacrifice sustainable pace for the development team.\nDo what is necessary to maximise the value your product creates but don’t attempt to please individual stakeholders. Be kind and firm. Remember: Successful products are not built on weak compromises or the smallest common denominator.\n ","url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/?replytocom=55506"},{"date_scraped_timestamp":1710925630673,"host":"www.romanpichler.com","page_title":"8 Tips for Collaborating with Development Teams","text":"\n \n Published on 11th July 2016\n \n \n \n \n \n \n \n The development team is a key partner for every product manager and product owner: the team designs and builds the actual product. But it's not always easy to effectively guide and work with the team. This post shares eight tips to make your collaboration with the development team even more effective, thereby increasing the chances of creating a successful product. \n Manage the Product, not the Team\nFocus on your job as the product manager or product owner, and manage the product, not the team. Provide guidance on the product, including its market, value proposition, business goals, and key features. Care about the team members. But let the ScrumMaster or coach tackle people, process, and organisational issues; and recognise that the development team should determine what needs to be done to implement the user stories and other product backlog items.\nIt’s a common mistake to step in and take on the ScrumMaster role if there is no ScrumMaster or if the individual is struggling to do a good job. While this may hep you in the short-term, it’s going to hurt you in the long run. Taking on too many responsibilities means spreading yourself too thinly: something will have to go. You will either neglect some of your product responsibilities or put your health at risk. Neither is desirable. (For more guidance on the relationship between the product owner and ScrumMaster see my post Every Great Product Owner Needs a Great ScrumMaster.)\nTreat the Team as an Equal Partner\nRemember the Golden Rule? Treat others how you want to be treated. The team members are not your resources but the people who work with you and create the product. If your relationship with the team is poor, then your product is likely to suffer.\nTo establish a healthy relationship, assume that the team members want to do their best. Respect their UX/UI and technology decisions and their right to determine how much work can be done. Be honest and open. Provide constructive feedback and share your concerns. But don’t tell people how to do their job and refrain from assigning tasks. Development teams should manage their own work (using a sprint backlog or Kanban board). If the team struggles, then it’s the ScrumMaster’s job to help the team—not yours (as discussed above).\nHelp the Team See the Bigger Picture\nDeveloping a successful digital product requires more than technical knowledge. It’s virtually impossible to develop the right solution without understanding the product context, including who the customers and users are, what value the product creates for them, what makes the product stand out, and how it benefits the business.\nYou should therefore help the team acquire the relevant market and domain knowledge—for instance, by involving the team in product discovery work, inviting them to join you when you visit customers— and ensure that they are aware of the product strategy and product roadmap as well as the business goals and KPIs. This will not only lead to better technical decisions and a better product. It also eases your workload: understanding the bigger picture allows the team to be more self-sufficient.\nInvolve the Team in Product Decisions\nWhile you own and manage the product, the development team should understand and support important product decisions. The best way to achieve strong buy-in is involving the team members in the decision-making process. This also leverages their creativity and knowledge and is likely to lead to better decisions. There are a number of techniques that help you achieve strong buy-in including the following ones:\nLeading through shared goals: Creating a vision, release goals, and sprint goals everyone agrees on;\nInvolving the team members in research and validation activities, for example, observing users or building MVPs and jointly analysing the resulting data;\nEngaging the team in developing and updating the product roadmap;\nCollaborating on the product backlog: prioritising items and creating user stories.\nBe aware that collaboration requires leadership. As the person in charge of the product, you should be open and collaborative but decisive at the same time. Aim to build consensus with the development team, but don’t shy away from difficult conversations. Don’t settle for the smallest common denominator and have the courage to make a decision if no agreement can be achieved: Great products are not based on weak compromises.\nSpend Enough Time with the Team but Don’t Neglect your Other Duties\nMake time to collaborate with the team in order to work on user stories, answer questions, and participate in meetings. If you are not available or difficult to reach, you are not guiding the team. In the worst case, people get fed up with trying to get hold of you or waiting for an answer and stop consulting you. Consequently, you may end up with a product that requires extra rework or has features that cannot be released.\nIf, however, you feel overwhelmed by the team’s questions, then coach the team to help people see the bigger picture and involve the team in product backlog grooming and user story creation. This will allow them to carry out their work autonomously and it reduces the amount of questions you have to answer during the sprint while the team is implementing the stories.\nAs important as it is to make enough time for the team, don’t neglect your other product management duties, such as, engaging with users, working on the product strategy and roadmap, and managing the stakeholders. If you become too team-focused, your product is likely to suffer.\nExpect High Standards but Don’t Pressurise People\nHold the team accountable and expect that people do a good job–that commitments are kept and agreements respected, that sprint goals are delivered, that the team adheres to the definition of done and creates software that works, is documented, and tested. But recognise that software development can be challenging and that human beings make mistakes. Don’t be mad with the team if the sprint goal is missed once. But don’t accept it if the team repeatedly doesn’t deliver what was promised. Use the sprint retrospective to investigate the causes and explore how you can help, for instance, by creating smaller user stories or better acceptance criteria.\nDon’t force work on the development team and don’t ask people to carry out more tasks than they can realistically cope with. Otherwise the team may become demotivated and start to take shortcuts like compromising quality and neglecting documentation. In the worst case, people will fall ill or leave. Instead, involve the team in setting a meaningful sprint goal that provides motivation and guidance for the team and respect the team’s right to decide how much work can be done. This creates a sustainable pace and keeps your team motivated.\nGive the Team Time to Experiment and Learn\nIn order to generate value, a product has to offer something new; it has to innovate to a greater or lesser extent. To help your product create value in the future, the team requires time to learn their skills and to investigate new technologies and tools. But this is unlikely to happen if you expect that people work new features all the time.\nYou should therefore give the team enough room to experiment with new ideas and acquire new knowledge. Some teams use gold cards to allocate time in a sprint for experimentation and learning; others use hack days. Whatever works for your team, help people prepare for the future. This will benefit your product and the team morale.\nFully Participate in the Meetings\nThis might seem like a trivial piece of advice, but I’ve seen my fair share of product people who half-heartedly attended meetings with the development team. Therefore, come prepared to a meeting and fully participate—silence your phone, put away your laptop and tablet—or don’t attend.\nIn a Scrum context, the two most important meetings for product managers and product owners are usually sprint planning and sprint review. You should always aim to be present at these meetings and do the necessary prep work, such as prioritising the product backlog and refining user stories for sprint planning or inviting the right people and selecting the right product validation technique for the review meeting. But don’t facilitate the sessions. Let the ScrumMaster do this job.\n ","url":"https://www.romanpichler.com/blog/tips-for-working-development-team-for-product-managers-product-owners/"},{"date_scraped_timestamp":1710925552451,"host":"www.romanpichler.com","page_title":"8 Tips for Creating A Compelling Product Vision","text":"\n \n Published on 8th October 2014\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Creating and managing a successful product requires a lot of time and energy. In order to be fully committed, you have to be convinced that what you are doing is right and have a clear vision of where to take your product. This post shares eight tips to help you create an effective product vision that inspires the development team and the stakeholders. \n \nDescribe the Motivation behind the Product\nHaving an idea for a new product is great. But it’s not enough. What you need is a vision that guides everyone involved in making the product a success: product management, development, marketing, sales, and support. The product vision is the overarching goal you are aiming for, the reason for creating the product. It provides a continued purpose in an ever-changing world, acts as the product’s true north, provides motivation when the going gets tough, and facilitates effective collaboration.\nTo choose the right vision, ask yourself why you are excited to work on the product, why you care about it, what positive change the product should bring about, and how it will shape the future. One of my favourite vision statements comes from Toys R Us. The company’s vision is to  “put joy in kids’ hearts and a smile on parents’ faces”. The statement concisely captures the intention behind the company’s products and services and describes the change the users and customers should experience.\nIf you choose the company vision for you product, then that’s fine. Otherwise make sure that the two visions aren’t in conflict other but aligned.\nLook beyond the Product\nBe clear on the difference between the product vision and the product and don’t confuse the two. The former is the motivation for developing the product; the latter is a means to achieve the overarching goal.\nSay that I want to create a computer game that allows children to choose and interact with characters, select different music tracks and worlds, choreograph their own dances, and play together with friends. This might be a nice idea, but it is not the actual vision.\nAn effective product vision goes beyond the product and captures the change the product should instigate. A vision for the game would be “Help children enjoy music and dancing”.\nDistinguish between Vision and Product Strategy\nYour product vision should not be a plan that shows how to reach your goal. Instead, you should keep the product vision and the product strategy – the path towards the goal – separate. This enables to change your strategy while staying grounded in your vision. (This is called to pivot in Lean Startup.)\nAt the same time, a vision is the prerequisite for choosing the right strategy. If you don’t have an overarching goal then you cannot decide how you best get there. This is nicely illustrated by the famous conversation between the Cheshire Cat and Alice in Alice’s Adventures in Wonderland. Asked which way Alice should take, the cat replies: “That depends a good deal on where you want to get to.” “I don’t much care where –,” says Alice. “Then it doesn’t matter which way you go,” responds the Cheshire Cat.\nA handy tool for describing both the product vision and the product strategy is the Product Vision Board. Its top section captures the vision, and the ones below state the strategy to realise the vision. You can download the tool for free from romanpichler.com/tools/vision-board.\nCreate a Shared Vision\nYou can come up with the most beautiful vision for your product. But it’s useless if the people involved in making the product a success don’t buy into it. To leverage the vision as the product’s true north, to create alignment, and to facilitate effective collaboration, the product vision must be shared – everyone must have the same vision. Without a shared vision, people follow their own goals making it much harder to achieve product success.\nA great way to create a shared product vision is to employ a collaborative visioning workshop. Rather than formulating a product vision and then selling it to the key people you create it together. Use the product idea as an input and ask the workshop attendees to capture their motivation for working on the product. Then compare the different visions, look for common ground, and combine the different goals into a new one everybody agrees with.\nYou can employ a similar approach for an existing product: Invite the right people, ask them to write down their vision, and compare them. If the visions are the same or very similar, then that’s great. If not then you have some work to do.\nChoose an Inspiring Vision\n“If you are working on something exciting that you really care about, you don’t have to be pushed. The vision pulls you,” said Steve Jobs. Your vision should therefore motivate people, connect them to the product, and inspire them.\nI find that a vision focused on creating a benefit for others provides a particularly deep motivation and a lasting inspiration. It guides me when I am feeling doubtful much more than a money- or self-centric vision can. There is nothing wrong with making money, of course, and every product needs a viable business model. But I find that people excel because they believe that they are doing something meaningful and beneficial.\nGoing back to the computer game example used earlier, an alternative vision for the game could be “Diversify and grow the business”. But such a vision is not inspirational and motivating enough in my mind. It would not lift me up in moments of doubt. Rather than stating business goals in the vision, I like to capture them in the product strategy (using the business goal section of the Product Vision Board).\nIf you are not sure then I recommend that you include the beneficial change the product should create for others and for your business without trying to quantify or detail those benefits. Otherwise your vision may no longer be able to guide you when you pivot.\nThink Big\nMake your product vision broad and ambitious so that it engages people and it can facilities a change in the strategy. The vision of the computer game example “Help children enjoy music and dancing” is a broad and ambitious vision, for instance. It does not refer to the actual product idea or a specific target group, and it is not satisfied with creating a fun gaming experience. It aims for more.\nIf it turns out that the idea of developing a computer game for children is ill conceived then there are still alternatives to make the vision come true. I could, for instance, decide to open up a dance school or create a virtual dance course. (Given that I am an exceptionally bad dancer, I seriously doubt that I’d be good at either. But at least I have some options.)\nKeep your Vision Short and Sweet\nAs your vision is the ultimate reason for creating the product, it should be easy to communicate and to understand. Other artefacts including a product strategy, a business model, a product backlog, and a marketing plan provide the necessary details. Your vision should be short and sweet, it should be easy to memorise and recite. I like to employ a simple slogan to capture the vision. It can take me several iterations to get to such a vision but I find it worth the effort. As Leonardo da Vinci said, “Simplicity is the ultimate sophistication.”\nUse the Vision to Guide your Decisions\nUse the vision to guide your product decisions and to focus everyone on the ultimate reason for creating the product. While the vision alone is certainly not enough, it is a first filter for new ideas and change requests: Anything that helps you move closer to your vision—be it a new feature, a change of direction, or a new technology— is helpful and should be considered; anything that doesn’t, is not beneficial and should probably be discarded.\n ","url":"https://www.romanpichler.com/blog/tips-for-writing-compelling-product-vision/"},{"date_scraped_timestamp":1710925765368,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/?replytocom=39305"},{"date_scraped_timestamp":1710925768912,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/?replytocom=41952"},{"date_scraped_timestamp":1710925763243,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/?replytocom=39293"},{"date_scraped_timestamp":1710925769097,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/?replytocom=39306"},{"date_scraped_timestamp":1710925764076,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/?replytocom=41949"},{"date_scraped_timestamp":1710925702448,"host":"www.romanpichler.com","page_title":"A Strategy Map","text":"\n \n Published on 4th March 2019\n \n Last Updated on: 22 Jan 2024\n \n \n \n \n \n \n Without an effective strategy, it’s hard to achieve product success. But what does strategy entail? And which tools are best suited for making strategic decisions? This article offers my answers and introduces a strategy map--a guide to the strategic decisions required to make and keep products successful. \n Maps are the Foundations on which Adventures are Built\nWhen I was a little boy, I truly loved all things pirate. Even as an adult, I very much enjoyed reading pirate books with my children. One of them even came with a separate little map that could be unfolded to discover a hidden treasure.\nComing up with a set of tools to capture important strategic decisions reminded me of treasure maps: It should guide you to product success, bearing in mind that not all treasure is silver and gold, as Captain Jack Sparrow put it. The map below shows the strategy tools I find helpful to make effective product strategy decisions. Please click on the image to enlarge it.\nAs the Strategy Map above shows, you should be aware of the overall business and product portfolio strategy in order to make the right strategic product decisions, as these provide the necessary context. To put it differently, if you don’t know the business strategy and portfolio strategy, or if these plans don’t exist, then it will be hard for you to get the product strategy right and choose, for example, the right market and target group.\nAdditionally, you should be able to correctly state the information captured by the product vision and strategy, product roadmap, KPIs, and business model on the map above. Please note that you should derive the KPIs from the value proposition and business goals so that they help you understand how much value the product is creating for the users and the business.\nThe Strategy Map can help you check if you have any strategy blind spots. I find that some product people forget about the business strategy and the business model; others aren’t aware of the portfolio strategy, for instance. If that’s the case for you, then explore what it would take to fill the gaps and acquire the relevant information. This might simply involve talking to the right people like the head of product or the CEO. But it might also mean carrying out the necessary strategizing work, for example, when you lack a validated product strategy or an effective business model.\nTools of the Trade\nNavigating the seas and reaching a treasure island was no easy feat for pirates who had to rely on tools like compass, sextants, and nautical charts. Once on the island, the treasure map, a compass, and digging tools would be crucial to find and unearth the treasure. Similarly, there are a number of specific tools and templates that can be helpful to capture the information shown on the Strategy Map above. Here are my favourites:\nRoger Martin’s business strategy approach for business strategy decisions;\nProduct Portfolio Matrix and Innovation-Ambition Matrix for managing product portfolios;\nPortfolio Vision Board to describe the product portfolio strategy;\nProduct Vision Board to capture product vision and strategy;\nGO Product Roadmap to describe the product roadmap;\nAlexander Osterwalder’s Business Model Canvas to state the business model as a stand-alone artefact to complement the product strategy or the Extended Product Vision Board to capture the relevant business model elements together with the product strategy and vision.\nBalanced KPIs (possibly using Dave McClure’s pirate metrics).\nPlease note, though, that product strategy is not about filling out templates and ticking boxes—but asking the right questions and being able to correctly answer them. Carrying out strategy work really is like going on an adventure: You have to be curious and receptive, cultivate a playful mindset, and be willing to discover and learn new things. Therefore choose the templates and tools that resonate most with you and that are helpful in your specific context.\nThe Map is Not the Territory\nWhile I hope that you find the Strategy Map above helpful, don’t blindly follow it. Instead, consider if you should adjust it or create your own map for your very own product adventure. For example, you don’t need a portfolio strategy if your business only has one product, which is typically the case for early-stage start-ups. Similarly, you may disagree with my product-centric take on the business model and want to link it to the business strategy, which is totally fine. And if you work for a portfolio company like GE or Siemens that is essentially a holding of several independent or loosely coupled businesses, you may find that you need to add a corporate-level strategy that sits above the business strategy, as the latter will be focused on your individual business or business group.\nAdditionally, consider reflecting on your notion of what a (digital) product is before applying the Strategy Map. I find it not uncommon that people confuse the concepts product, feature, component, and sometimes even portfolio, which can result in too many detailed product strategies and roadmaps. I like to define a product as an entity that creates a specific value to a group of people while at the same time, helps the business achieve one or more goals. A feature is a product part users can interact with like search and navigation on an online retailer’s website; a component is an architecture building block such as the data access layer; and a portfolio is a group of (related) products—think of Microsoft Office, for example. A product strategy should hence always describe your approach for making or keeping a product successful. Don’t create a strategy for a feature or component—unless you decide to unbundle it and release it as a separate product.\nAnd now to work: Adventure awaits. Aarrr!\n ","url":"https://www.romanpichler.com/blog/strategy-map/"},{"date_scraped_timestamp":1710925653814,"host":"www.romanpichler.com","page_title":"Agile Scenarios and Storyboards","text":"\n \n Published on 29th April 2013\n \n \n \n \n \n \n \n User stories are great at capturing product functionality. But they are less suited to describe complex user interactions. This is where scenarios and storyboards come into play: Both are great tools to describe the interaction steps. In this post, I explain what scenarios and storyboards are, how they can be used effectively in an agile context, and how they relate to user stories. \n Scenarios\nScenarios and storyboards are great to explore and describe how a user interacts with a product. When we started to work on the re-launch of our website, for instance, I wrote the following scenario:\nIt’s Tuesday morning, and Mary is working on her computer. She wants to book Roger Smith on a public Certified Scrum Product Owner course taught by Roman.\nMary visits romanpichler.com and chooses a public CSPO class.\nShe enters the participant information including first name, last name, email address, special dietary requirements.\nShe then chooses a payment option and enters the payment details.\nMary accepts the terms and conditions, and confirms the booking.\nMary sees that her booking has been successful. After a short while, Roger receives an email confirmation with the booking details.\nThe scenario above describes the steps Mary has to take to book a seat on one of our public training courses. Mary is a persona who represents a user of our website: an HR employee of a large company, and who’s main goal is to book one or more employees on a training course.\nNote that I have tried to make the scenario descriptive and engaging while focussing on the key aspects of the interaction.\nStoryboards\nStoryboards are similar to scenarios: They illustrate the interaction required to achieve a goal. But instead of using a list of steps, a storyboard visualises the interaction similar to a comic strip. Here is a sample board I created to explore another interaction for our new website:\nThe storyboard above describes how the persona Mary books several employees on the same training course. The board consists of a series of frames. Each frame shows sample data. Underneath it, I added a brief description of what Mary does at each step.\nNote that I have done my best to describe the functional aspects of the interaction, and not to design the user interface: When I was working on the board, we did not have any design sketches and mock-ups available. I generally find it good practice to capture the product functionality necessary to meet the main user needs before designing the user interface.\nWhat about User Stories?\nUser stories are another technique to describe the user interaction. A large story or epic allows us to summarise the interaction acting as placeholders for more detailed stories. I like to think of an epic is as a scenario rolled up into a brief narrative: it hides all the specifics of the user interaction. Detailed stories correspond to individual steps in a scenario, and describe a specific piece of product functionality.\nThe first thing I usually do when working on a new product is to write epics. To discover the right ones, I use the needs of the personas. Starting out with epics helps me quickly sketch the new product functionality, and it keeps the Product Canvas or product backlog concise and manageable.\nBut working exclusively with epics can be problematic, particularly when the epic carries risk: If we only have a coarse-grained description available, then it’s difficult to test our assumptions about how the users interact with the product. I therefore prefer to create a scenario or storyboard for risky epics, as the picture below shows:\nCreating scenarios or storyboards for selected epics allows me to explore the user interaction in more detail, to describe the necessary steps and their relationship. This helps me test my assumptions, for instance, by creating a paper prototype that implements the scenario in order to carry out an early user test.\nThis is, of course, not the only way to combine scenarios and user stories. You can also derive stories from a scenario, and you can use a scenario to illustrate the relationship between different stories. The following diagram illustrates the three options:\nChoose the options that are most helpful in your context, and combine them, as it makes sense. You can, for instance, start with the first option (as I did above), then derive new stories from your scenario or storyboard, and finally capture the relationship between the new stories in a new scenario.\n ","url":"https://www.romanpichler.com/blog/agile-scenarios-and-storyboards/"},{"date_scraped_timestamp":1710925655835,"host":"www.romanpichler.com","page_title":"Agile User Interface Design","text":"\n \n Published on 20th March 2012\n \n \n \n \n \n \n \n The role of design still puzzles many agile teams I work with. When should the design activities take place? Who should carry them out? How are design decisions best captured? This blog tries to answer the questions by discussing a user-centric, iterative, and collaborative design process for Scruma and Kanban teams. \n The Big Picture\nThe image below depicts the design process I like to employ. It’s user-centric, iterative, and collaborative. The process starts with capturing the design concept in form of a rough mock-up. Then the detailed design for one or more user stories is created and implemented as a throwaway prototype or as shippable software. The result is exposed to the users to understand if the design contributes to a great user experience. If it does, the design is refined, and the design for the next stories is created; if it does not, the design concept is reworked.\nHigh-level Design\nTo get started, develop your design concept. The concept should sketch your key design ideas and communicate the essence of what you believe the product should look like. This includes the shapes and the colours you intend to use. Keep the overall product vision in mind together with the desired user experience: the kind of product being developed and the reason why people might want to use it. Focus on the critical aspects and don’t worry about the details right now.\nFor instance, the high-level design below shows how the structure, shapes and colours of our new homepage together with a photo of a bald guy with a beard and sticky notes.\nCapture your design concept as a mock-up. Consider using a paper sketch similar to the one shown above. Paper sketches require less effort than wire-frames or other mock-ups; they are usually good enough to communicate the design idea. Make your sketch visible and put it on the product backlog board as shown below.\nYou may also want to explore the anticipated interaction of a user with the product, and to capture it as an interaction diagram or workflow. Put the resulting artefact on the board’s model area. (You can find out more about the backlog board in my blog post “The Product Backlog Board“.)\nDetailed Design\nWith your design concept in place, create the design for each user stories you want to implement. This is best done as part of the product backlog grooming work. Developing the detailed design should hence be a collaborative exercise that involves the developers and testers. This allows you to leverage the team’s collective creativity and to quickly discover which design options are difficult and expensive to implement.\nSketch the user story-specific design on a paper card and attach it to the story card, as the image below illustrates. The design depicts the details of one of the boxes on the homepage:\nThen implement the design either as a throwaway prototype or as shippable software, and expose the result to the users. Note that paper prototypes are often sufficient to test your initial design ideas. Resist the temptation to create a perfect design straight away: An unpolished implementation tends to generate more valuable user feedback than a super slick design.\nLearning\nLeveraging the user feedback to validate your design ideas does not mean that you don’t require a vision of what the product should look like. The opposite is true. You have to innovate for your users and cannot expect to be told what the product should look like.\nTake the redesign of our website for example: Our customers, the organisations that pay for our training or consulting services, are important users of our website. Most of our customers are mid-sized to large enterprises. Having worked for large companies myself, I know that bigger organisations often prefer a more conservative look. But we wanted to create a website that that looks cool and that we like, not a boring corporate design. The challenge is hence to synthesise the wants and needs of the users and your own vision and ideas into a great design.\nUse the feedback to experiment and discover which design ideas don’t work and which do. Don’t be a slave to the feedback, but don’t cling to your ideas either. Analyse the feedback with an open mind and decide what to do: take it on board or discard it. Then either rework your design concept or adjust it, and create the detailed design for the next story.\n ","url":"https://www.romanpichler.com/blog/agile-user-interface-design/"},{"date_scraped_timestamp":1710925622929,"host":"www.romanpichler.com","page_title":"Be a Balanced Product Leader, Not a Feature Broker or Product Dictator","text":"\n \n Published on 12th March 2018\n \n \n \n \n \n \n \n Being an effective product leader is not easy: It requires embracing people's ideas as well as saying no, being neither too accommodating, nor too assertive. This post helps you recognise and overcome two common, ineffective leadership styles, feature broker and product dictator, and develop a balanced, successful leadership approach. \n Feature Broker and Product Dictator\nHow do you best lead the stakeholders and development team as the person in charge of the product? One way to answer this question is to avoid unhelpful but common leadership styles. Two of these styles, feature broker and product dictator, are shown in the picture below. \nA feature broker is a product person who relies on others—the stakeholders, development team, management, users, or a customer—to come up with ideas and make product decisions. As its name suggests, this leadership style mediates between different parties and tries to broker a deal.\nA product dictator—also called a coercive leader—exhibits the opposite leadership style: the individual assumes that she or he knows best what needs to be done. Consequently, the person makes the product decisions and expects others to support them.\nWhile being a feature broker shows that the individual is able to connect with other people and appreciate their ideas, it carries the risk of trying to please everyone thereby creating a product that doesn’t do a good job for anybody. In the worst case, you end up with a feature soup, a loose collection of features requested by the users, customers, or stakeholders. Such a product typically has a weak value proposition, offers a poor user experience, and is therefore unlikely to become a success.\nBeing a product dictator is equally undesirable, unless your product is in crisis. Being decisive and having a clear vision of where you want to take the product is certainly helpful. But if you believe that you are always right, and you know best, then you probably end up making wrong decisions: It’s very unlikely that one person has all the knowledge and skills required and can counteract all cognitive biases.\nEven if this was the case, this leadership approach creates an unhealthy work environment: The development team members and stakeholders are told what to do and are expected to fall in line to support the decisions—no matter if they agree or not. This dampens their motivation, wastes their creativity and knowledge, and leads to weak buy-in. What’s more, people are likely to blame you if the product does not deliver the desired benefits. To make things worse, you may end up worn-out and overworked, as you want to be involved in all decisions.\nRecognise Your Leadership Bias\nFeature broker and product dictator are extreme leadership styles, of course. But it seems that most of us, including myself, gravitate towards one of the two extremes and are inclined to act as a feature broker or product dictator. If that’s the case for you, then don’t feel bad. Recognising your leadership bias is a key step towards becoming a better, more effective product leader, as I explain below.\nIf you are new in a product role or if you have just taken on a new product, and your knowledge about the users, needs, business goals, and competition is still weak, then you often end up asking the stakeholders and dev team for suggestions and are more likely to accept their requests. Similarly, if you work in an organisation where product management is not recognised as a function in its own right, or if you look after a bespoke product for a customer, you may get pulled towards the feature broker style. Additionally, if you find it generally difficult to say no to others and want to please people, or if you suffer from imposter syndrome and believe that others know much more about the product than you do, then this trait will draw you towards the feature broker style.\nIf, however, the dev team and stakeholders are less experienced than you, or if you hold a senior position in the company, then people may well expect you to decide and tell them what to do. Even if you involve them in the decision-making process, people may require encouragement to speak their mind and think out of the box. Moreover, if you find it hard to trust others, if you are critical of yourself and other people, if you are a bit of a perfectionist or control freak, then you are likely to lean towards the product dictator pattern.\nBe a Balanced Product Leader\nOnce you understand your leadership bias, you can take the next step and address its causes. This will help you become a more balanced and effective leader grounded in the middle of the leadership continuum shown in the picture below.\nIf you gravitate towards the feature broker style, then empower yourself. Acquire the relevant knowledge and learn as much as you can about the market; and consider improving your people skills and virtuous qualities. This will earn you trust and respect, and help you lead the decision-making process. Additionally, you might have to overcome people-pleasing or imposter habits. You may also have to practice saying no—even if it is difficult initially—and accept that having difficult conversations is part of your job. At the same time, take advantage of your strengths, such as connecting with people and appreciating their ideas.\nAdditionally, organisational impediments might have to be overcome to help you be a more effective product person. If you lack management support or if there is no established product management function in the organisation, then you may want to address the issue and lobby for more authority—together with your ScrumMaster or coach. Similarly, if you create bespoke products, a customer makes the key product decisions, and you end up being a proxy between the individual and the dev team, then you may require senior management support to change the situation. In some cases, you may have to accept the setup for now, and try to change your level of authority for the next project.\nHowever, if you are biased towards the product dictator style—if you are good at making decisions, but not so good at appreciating other people’s ideas—then empower the development team and stakeholders. Coach the individuals and help them acquire the relevant knowledge. Actively involve people in the decision-making process, and show them that you value their input. Invite the stakeholders and development team representatives to collaborative product strategy and roadmap workshops; involve the dev team in the product backlog work; and write user stories together, for instance. This might increase your workload in the short term, but it generates support and buy-in, and it allows you to delegate work in the future, for example, some of the story refinement work to the development team.\nIf you have some perfectionist or controlling tendencies, then bring to mind that none of us is perfect, cultivate compassion for yourself and others, be grateful for the work other people do, and decide to trust the development team and stakeholders, once you have agreed on shared goals. At the same token, don’t forget your strengths including being decisive and not shying away from difficult conversations.\nGreat leaders are made, not born. Therefore, develop yourself, leverage your strengths, and work on your weaknesses. Don’t forget that change seldom happens overnight. It takes effort, discipline, and self-compassion: Learning new skills can involve setbacks, and some habits die hard, as I know from my own experience.\n ","url":"https://www.romanpichler.com/blog/be-a-balanced-product-leader-not-a-feature-broker-or-product-dictator/"},{"date_scraped_timestamp":1710925566280,"host":"www.romanpichler.com","page_title":"Boost Your Empowerment","text":"\n \n Published on 19th April 2017\n \n Last Updated on: 23 Jun 2023\n \n \n \n \n \n \n As product people—product managers and product owners—we usually don’t hold any positional power. Unlike a line manager, we cannot reward people by offering a pay rise or bonus, for instance. We cannot tell people what to do either, as the development team members and stakeholders don’t report to us. This puts us in a challenging position: We must lead others to achieve product success but we cannot leverage traditional management instruments. Luckily, there are other power sources you can tap into to boost your leadership, as I explain in this article. \n Increase Your Referent Power\nYour first power source is your ability to influence others based on your personality and interpersonal skills. It’s the capability you can immediately boost simply by being a decent person. To do so, cultivate skilful qualities like empathy, compassion, courage, truthfulness, patience, humbleness. This will earn you the respect and trust of your followers and at the same time, it will make you a happier person. How cool is that?\nStating a list of wholesome qualities is easy, of course. But putting them into practice when faced with tight deadlines, ambitious goals, or difficult individuals is hard. It’s all too tempting to fall back onto less skilful habits and become impatient, tense and stressed, say something we regret afterwards, or pass on the pressure to the development team.\nTo boost your referent power, I recommend focussing on one virtue at a time and practicing it repeatedly—without expecting too much too quickly. For instance, if you find yourself getting impatient when talking to a development team member or if you dislike one of the stakeholders, then recognise this as an opportunity to practice patience or kindness—don’t view it as a weakness or deficiency. Next, consider how you can take a small but concrete step to change your behaviour and strengthen the virtue. For example, take three deep breaths before answering a question from a difficult team member, try to understand the other person’s needs, and communicate without any aversion or ill-will. (See my article “Dealing with Difficult Stakeholders and Team Members” for more guidance on this topic.)\nChallenging situations are great opportunities to grow as a human being and by doing so, you increase your leadership power. As Superman puts it, “You are much stronger than you think you are. Trust me.”\nStrengthen Your Expertise\nKnowledge is power, and your expertise is your second power source. The more you know, the more people will listen to you, trust and respect you, and follow your suggestions. To increase your expertise, strengthen your understanding of the market or domain and the product, as well as your product management savviness.\nGet to know your (target) users and customers, observe them using your product or competing offerings, talk to them about the problem the product should help them address or the benefit it should provide, and analyse any relevant analytics data you have to see how people currently interact with the product. As a rule of thumb, make sure you get out of the building at least once every three months. Nothing beats meeting real users.\nAdditionally, keep an eye on market developments, new trends and technologies, and the competition. Do regular research, attend trade shows and conferences, and consult journals, magazines, and user forums, for example. You may want to combine reviewing the market development together with the product performance in form of regular strategy and roadmap review meetings (as I discuss in more detail in my book Strategize).\nBut that’s not all. It’s great to know your product and market. But if you are not able to formulate a coherent product strategy, develop an actionable product roadmap, or prioritise the product backlog, then people are unlikely to regard you as a true expert. You should therefore also work on your product management skills and become a well-rounded product professional.\n“Intelligence is a privilege, and it needs to be used for the greater good of people,” says Doctor Octopus in the movie Spider-Man 2. Who could disagree with that?\nGet the Right Management Sponsor\nYour third power source as a product leader is the support offered by management. With the right management sponsor, you have a powerful ally at your side and a much better standing in the organisation. Consequently, you are more likely to be respected and followed. But unlike the other two power sources, you cannot control management sponsorship—it depends on the individuals involved and the degree to which product management is established in the organisation.\nIn companies that have not yet created a dedicated and effective product management function, management sponsorship is usually harder to obtain. It may require that you lobby for support and patiently explain to the decision makers why you need their backing to achieve product success. Ask your ScrumMaster or agile coach to help you with this.\nAdditionally, make sure that the sponsorship comes from the right level. The more important the product is, the more senior the management sponsor should be. A good test is to ask if the sponsor can act as an escalation partner and will be powerful enough to help align senior stakeholders. If the answer is yes, then that’s great; you’ve found the right person. But if the answer is no, then look for someone more senior.\nOnce you’ve found the right sponsor, remember that “with great power must also come great responsibility” (Spider-Man, Amazing Fantasy #15).\n ","url":"https://www.romanpichler.com/blog/how-to-increase-your-product-leadership-power/"},{"date_scraped_timestamp":1710925555877,"host":"www.romanpichler.com","page_title":"Building High-Performing Product Teams","text":"\n \n Published on 11th September 2023\n \n Last Updated on: 7 Feb 2024\n \n \n \n \n \n \n \"Great things in business are never done by one person. They're done by a team,\" Steve Jobs once said. This insight also applies to product management: As product people, we can't achieve product success on our own . We rely on the support of others including stakeholders and development teams. This article shares my advice on fostering collaboration and forming an effective maximise the chances of offering a great product. \n \nListen to the audio version of this article:\nOrganise the Team around a Product\nAs the name suggests, a product team is focused on a product. This sounds simple enough. But in practice, organising teams around products can be challenging, especially when a company lacks a clear understanding of what a (digital) product is and if it does not embrace a product-led way of working.\nA first step to form effective product teams is therefore to identify the products in your organisation. But what is a product? I view it as an entity that creates tangible value for users and possibly customers as well as the business. The former is achieved by solving a problem or by providing a specific benefit. Think of Google Search, which addresses the challenge of finding information online, and Flickr, which allows people to share photos.\nCreating value for the business can be accomplished in three ways: First, by directly generating revenue, like Adobe Premier Pro does, for example; second, by helping promote or sell other products or services, as an online store such as Amazon.com does; and third, by increasing productivity and reducing cost—something an internal software platform achieves, for instance.\nOnce you’ve identified and selected a specific product, you can take the next step and determine the people who are required to create or progress it and generate the desired user and business benefits.\nInvolve the Right People\nFor a team to succeed, it is crucial to have the right people on board. To effectively staff the product team, I recommend including the people shown in Figure 1.[1]\nFigure 1: The Product Team Members\nLet’s look at the product team members in Figure 1 in more detail starting with the person in charge of the product. This individual leads the product team, not by being the boss but by exercising emergent leadership. They achieve this by earning the trust of the team members and by embracing the right leadership styles: being a visionary, inclusive, and affiliative leader who empathises with the team members and practises active listening, as I discuss in more detail in my article Leading without Being the Boss.\nAdditionally, the person in charge of the product must have the necessary expertise. This includes a sound understanding of the market, the user and customer needs, and the competition as well as solid product management skills such as the ability to develop an effective product strategy and an actionable product roadmap (as I explain in more detail in the article The T-Shaped Product Professional).\nFinally, the individual must be empowered to decide if no agreement can be reached within the product team. If you are familiar with my work, you’ll know that I am a big fan of collaborative decision-making—finding decisions that everyone can support. However, if the product team members cannot agree, then the person in charge of the product has to have the authority to decide. This avoids that the team is trapped in endless arguments and product decisions are delayed.\nThe key stakeholders in Figure 1 are representatives from different business units who are required to make the right decisions and effectively implement them. For a commercial product, they might include a marketer, a sales rep, and a customer support team member, as I explain in more detail in the article Getting Stakeholder Engagement Right.\nTo do a great job, each key stakeholder requires the necessary expertise, authority, and availability to work on the product team. For example, the marketer must be able to create the right marketing strategy for the product. Additionally, the stakeholders must be willing to act as team players, no matter how senior they might be.\nNote that including stakeholders on the product team replaces a traditional stakeholder management approach with a much more collaborative one. Instead of sending status reports to stakeholders or having steering committee meetings, the individuals are now actively involved in progressing the product and they actively contribute to its success.\nThe development team representatives are members of one or more cross-functional development teams. It’s important that they have the right skills to spot and evaluate design and technology opportunities and to develop a rough understanding of the likely effort required to implement product decisions. The skills typically include architecture, programming, testing, and if the product is end-user facing, UX design capabilities.\nIf the product is too big to be managed by a single person, then the other product people who work with the person in charge of the product should also be on the product team. This ensures that their knowledge is leveraged and that their concerns are addressed. It also maximises the chances that everyone involved in managing the product has the same understanding.\nLast but not least, the product team should include a coach who might be an experienced Scrum Master, agile coach, or product coach. Having this individual on board is beneficial, as the product team, as I have described it, is cross-functional and self-managing. It contains people with different roles and skills, and it lacks a manager who tells people what to do. Instead, the team members jointly identify and organise the work required.\nAll self-managing teams I have worked with greatly benefited from an experienced coach. Conversely, when the role was not properly filled, the teams either took longer to become self-managing or failed to do so altogether. This shows how important the role is. The specific tasks the coach should carry out include helping the team members collaborate, for example, by using a Kanban board, facilitating meetings, and removing blockers and impediments.[2]\nUse the Right Goals\nA team is, by definition, a group of individuals who work together on the same goal. As Henry Ford once said, “If everyone is moving forward together, then success takes care of itself.” It’s therefore important that you align the product team members by setting the right goals. To help you with this, I’ve created the framework shown in Figure 2.\nFigure 2: Roman’s Goal-Setting Framework with Product Management Artefacts\nThe goal-setting framework shown in Figure 2 suggests that a product team needs four different objectives: a product vision, user and business goals, product goals, and sprint goals. Let’s take a look at them. The vision describes the ultimate purpose for creating the product and the positive change it should bring about. The user and business goals describe the value the product should create for the people using it and the company providing it.\nThe product goals communicate the specific outcomes a product should offer, such as acquiring more users, increasing engagement, and generating revenue. Each product goal should help you make progress towards a user or business goal. In a way, the product goal is the most important objective for a product team to achieve strong alignment and effectively progress the product. All product team members should work on the same product goal at a given point in time. This aligns everyone and ensures that the various deliverables and outputs—for instance, the source code, the end-user documentation, the marketing collateral, and the training materials—fit together.\nThe final goal in the framework in Figure 2 is the sprint goal, which directs the work of the development team members. It is derived from the product goal, and it describes the outcome of the next sprint. Meeting this goal should therefore be a step towards achieving the product goal. You can learn more about my goal-setting framework by reading the article Leading through Shared Goals.\nEmpower the Product Team\nWith the right people on board and the right goals in place, we’ve addressed two building blocks of effective product teams. But to become a high-performing team, the group must be properly empowered. Rather than being handed a vision and being assigned user, business, and product goals, I recommend that the product team has the authority to determine the goals—within the boundaries set by the business strategy and, if applicable, the product portfolio strategy. [3] Figure 3 illustrates the team’s ownership of the goals. Additionally, the team should have ownership of the plans that contain the goals: the product strategy and the product roadmap, as shown in Figure 2 above.[4]\nFigure 3: The Product Team Owns the Product-related Goals\nIf the product team has this level of empowerment, then there are three consequences: First, the team members will have to carry out the necessary work to determine the right goals and develop the right product strategy and roadmap as well as to regularly review and update the goals. This is best done by having regular, collaborative strategy workshops as well as attending sprint review meetings. The latter ensures that the team members have a shared understanding of the development progress and its potential impact on achieving the product, user, and business goals.\nSecond, the team members should determine the goals together. This is best achieved by using collaborative decision-making techniques including the selection of the right decision rule, for example, using unanimous agreement or consent, as I explain in more detail in my article Making Effective Product Decisions.\nThe final consequence is that the product team members are collectively responsible for meeting the goals—with great power also comes great responsibility, as all Spiderman fans will know. It’s the job of the product portfolio manager or the senior management sponsor to hold the product team accountable for meeting the goals with the person in charge of the product being the primary point of contact.\nBuild Trust and Create Psychological Safety\nAn effective team is not a loose collection of individuals who happen to share a work assignment. It’s a tightly-knit group whose members trust each other. To achieve this, give the product team members the opportunity to get to know each other, for example, by (partly) collocating the team and by carrying out team-building activities. This is especially helpful when the team is new or when its composition has changed. Additionally, as the person in charge of the product, you should lead by example and be willing to trust the other team members. This includes supporting and empowering the individuals, empathising with and actively listening to them.\nIn addition to trust, a high-performing product team requires psychological safety. People have to know that they won’t be penalised when they make a mistake. That’s particularly crucial when innovation is present, as this requires the ability to experiment, fail, and learn. As Albert Einstein said, “A person who’s never made a mistake has never tried anything new.”\nTo create psychological safety, be willing to admit mistakes and share stories of your own failures. Additionally, hold people accountable for meeting agreed goals. But don’t lay blame or accuse but empathise with the team members when a goal is not met. Then look into the causes and explore how you can correct the situation and avoid the same issue from recurring, for example, by using my feedback framework.\nIf you find it challenging to build trust and create psychological safety, consult the product team coach who should be able to advise and support you.\nForm the Team Early on and Keep it Stable\nThe only constant is change, and product teams do change over time. But if the team composition changes too frequently—for example, a new sales rep or marketer shows up every other month—then the team is likely to experience low productivity, handoffs, and loss of knowledge. As pointed out earlier, effective teams rely on trust, and building trust and becoming a closely-knit unit does take time.\nYou should therefore aim to keep the product team stable. Ensure that the team members understand that they’ll be working on the team for an extended period—months and years rather than days and weeks.\nAdditionally, form a product team early on in the product life cycle. The team should be assembled in time to carry out the initial discovery and strategizing work. It should continue to exist until the product is discontinued. This fosters long-term thinking and gives the team members the opportunity to develop a deep understanding of the market and user needs, the competitive landscape, and the underlying business model.\nNotes\n[1] The product team composition shown is influenced by Steven Haines‘ and Marty Cagan’s work as well as team concepts made popular by agile frameworks like Scrum including self-managing and cross-functional teams who are empowered and practise collective ownership. Additionally, it is based on my leadership work, especially my book How to Lead in Product Management.\n[2] If you are interested in how a product team as I have characterised it and a Scrum team relate, refer to my article Product Teams in Scrum.\n[3] Note that the following list does not contain the sprint goal, as it should be set by the person in charge of the product together with the development team(s), assuming that a Scrum-based process is used.\n[4] As you may have noticed I didn’t list the product backlog. Here is why: I find it most helpful to view the backlog as a tool that directs product delivery and that is jointly owned by the person in charge of the product—as well as the other product people on the team in the case of a large product—and the development teams. But I recommend that you connect your backlog to the roadmap by copying the next goal on the next product goal on the roadmap into the backlog, as I explain in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/building-high-performing-product-teams/"},{"date_scraped_timestamp":1710925518284,"host":"www.romanpichler.com","page_title":"Creating Effective Sprint Goals","text":"\n \n Published on 11th December 2012\n \n Last Updated on: 12 Dec 2022\n \n \n \n \n \n \n Working with a sprint goal is a powerful agile practice. This post helps you understand what sprint goals are, why they matter, hand you can write and track them. \n \nThe Sprint Goal Explained\nA sprint goal describes the purpose of a sprint. It provides a shared objective, and states why it’s worthwhile undertaking the sprint. Sample sprint goals are “Learn about the right user interaction for the registration feature” and “Make the reporting feature available to the users”. If you use a product goal, then each sprint goal should be a step towards this overarching objective.\nAs a rule of thumb, teams should work with one shared goal. This ensures that everyone moves in the same direction. Once the goal has been selected, the team implements it. Check at the end of the sprint if the goal has been met. Say you want to learn if users are willing to register as the first step in the user journey. Then use the product demo or a usability test at the end of the sprint to validate if you have met the goal and understand if it’s OK to ask people to register first or if this creates a barrier to adoption.\nSprint Goal Benefits\nI have found that working with a sprint goal has five main benefits, particularly for new products and new features: It facilitates prioritisation and effective teamwork; it makes it easier to obtain and analyse feedback; and it helps with stakeholder communication.\nSupports Prioritisation\nA shared sprint goal facilitates prioritisation: It makes it easier to determine which stories should be worked on in the next cycle. Here is how I do it: I first select the goal. Then I explore which epics have to contribute to it, and I break out small detailed stories from the epics. Finally, I order the new ready stories based on their contribution to the goal.\nCreates Focus, Facilitates Teamwork, and Guides the Development Team\nSprint goals create focus, facilitate teamwork, and provide the basis an effective sprint planning session. A shared objective guides the development work, encourages creativity, and enables commitment. Teams don’t commit to individual stories in Scrum; they commit to the sprint goal.\nHelps Obtain Relevant Feedback\nEmploying a sprint goal makes it easier to collect the right feedback. If the goal is to evaluate the user experience, for instance, then it is desirable to collect feedback from actual target users. User representatives should therefore attend the sprint review meeting. But if the goal is to reduce technical risk by evaluating different object-relational mapping tools, then it is probably more appropriate to invite an experienced developer or architect from another team to discuss the solution.\nMakes it Easier to Analyse the Feedback\nWorking with a sprint goal helps analyse the feedback obtained. If the team works on several unrelated stories in the same sprint then it can be tricky to relate the feedback to the right user story. This makes it harder to understand if the right product with the right features is being built.\nSupports Stakeholder Communication\nFinally, imagine meeting the big boss in the elevator and being asked what you are working on. Chances are that without a sprint goal, the boss will be bored to death, jump onto a specific story, or he will have left the elevator before you are finished listing all the things you do. Using a sprint goal helps you communicate the objective of the sprint to the stakeholders. This allows them to understand what the sprint is about and to decide if they should attend the next sprint review meeting.\nWriting Effective Sprint Goals\nLike any operational goal, a sprint goal should be SMART: specific, measurable, agreed upon, realtistic, and time-bound. As sprints are time-boxed iterations, every sprint goal is naturally time-bound: It has to be reached by the end of the sprint.\nA sample goal of an early sprint is to learn more about the desired user experience (a desirability aspect), the software architecture (feasibility), or the pricing model (viability). To pick the right goal, choose the risk that is likely to hurt you most if it is not addressed immediately.\nWhen selecting your sprint goal, remember that trying out new things requires failure. Failure creates the empirical data required to make informed assumptions about what should and can be done next. Failing early helps you succeed in the long term.\nAfter you have run a few sprints, the emphasis usually starts to shift from resolving uncertainty to completing features so that they can be released – at least to selected users. This allows you to gather quantitative data and to understand how users employ your product in its target environment. The shift should be reflected in your sprint goal, which now focuses on “getting stuff done” rather than testing ideas, as the picture below illustrates. (I explain this development in more detail in my post “Get Your Focus Right“.)\nEmploying a specific and measurable sprint goal allows you to determine success. For example, don’t just state “Create a prototype” as your sprint goal. Be explicit about the type and its purpose. Say instead: “Create a paper prototype of the user registration feature to test our user interaction ideas.”\nThe default mechanism in Scrum to determine success is to analyse the stakeholder feedback. Scrum suggests that the feedback should be obtained in the sprint review meeting by presenting the product increment. If this is not appropriate for you, then I suggest you make your approach explicit in your sprint goal. Write, for instance: “Test the user interaction design of the registration feature by conducting a user test in the sprint review meeting.”\nCarrying out sprint planning activities ensures that the sprint goal is realistic. Traditionally, this involves selecting user stories that are required to reach the goal until the team’s capacity has been consumed. Sprint planning hence allows the product owner and the team to understand if the goal chosen can be reached. This helps you to invite the right stakeholders and be confident that they can provide meaningful feedback. Unrealistic sprint goals waste the stakeholders’ time and undermine their willingness to participate in the process.\nLast but not least, make sure that all development team members agree to the sprint goal. As the product owner, you should never try to force a sprint goal onto the team or persuade the members to follow it. Otherwise, the development team will hardly be motivated to do their best to reach the goal. The minimal buy-in you should seek on the sprint goal is consent. This means that nobody objects to it; everybody is ok with it. \nVisualising and Tracking the Sprint Goal\nI find it helpful to visualise the spirn goal to keep it present and visible. One way to do this is to add it to the sprint backlog or task board, as the picture below illustrates\nThe picture above shows a simple, physical sprint backlog with four columns: The high-priority items to be implemented, the tasks that have to be carried out, the tasks that are in progress, and the tasks that are done. The sprint goal is attached to the first column thereby directing and focusing the entire sprint backlog.\n ","url":"https://www.romanpichler.com/blog/effective-sprint-goals/"},{"date_scraped_timestamp":1710925539056,"host":"www.romanpichler.com","page_title":"Dealing with Difficult Emotions in Product Management","text":"\n \n Published on 1st April 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we make tough decisions and sometimes, we have to work with challenging people. It is therefore no surprise that we experience difficult emotions at work. While feelings like irritation, tension, and anger are unpleasant, learning to constructively deal with them is an important skill: It increases our mental wellbeing, builds trust, strengthens connections, and improves our ability to make effective decisions. This article helps you deal with difficult emotions at work. \n \nListen to this article:\nWhy Difficult Emotions Matter Particularly for Product People\nWe may not like difficult emotions like confusion, frustration, anger, envy, sadness, and worry, but we all experience them. This is especially true in times like these, with the Coronavirus pandemic causing many people to be concerned about their health and jobs and the wellbeing of family members and friends. \nFor us product people, however, difficult emotions are particularily relevant. Here is why:\nWe routinely interact with individuals who have different perspectives, interest, and needs, such as users, customers, stakeholders, development team members. Users don’t always have the same wants and needs as customers, and the ideas of the stakeholders and dev team may diverge. This can lead to friction and conflict, which gives rise to difficult emotions.\nWe are responsible for their success of our products. While I really appreciate this entrepreneurial aspect of our work, it can bring up tension, stress, and frustration when we are trying to progress our products towards agreed goals but are in danger of missing them, be it a sprint goal, product goal on the roadmap, or a strategic user or business goal.\nWe have a rich and creative but equally challenging and multi-faceted job. It ranges from carrying out product strategizing work to managing the product backlog; from talking to users to meeting with marketing and answering questions from the support team—to name just a few examples. Having to attend to so many different tasks can be challenging: It can create difficult feelings like restless and irritation.\nNegative emotions, however, are not only unpleasant. They influence how we perceive reality and how we communicate. When you feel hurt or grumpy, for instance, your thoughts are likely to show a negative discolouration, and you might interpret what others say as criticism rather than take it as their observation. This can lead to misunderstandings and damaged connections, as well as wrong analysis of feedback and data and wrong product decisions. \nTo put it differently, learning to skilfully deal with difficult emotions increases our mental wellbeing, strengthens our connections with stakeholders and development team members, and improves our ability as product people to make effective decisions. \nA big shout out to Marc Abraham who, according to my knowledge, was the first person to bring attention to challenging feelings like frustration in product management.\nBecoming Aware of Difficult Emotions\nTo constructively deal with difficult feelings, we must become aware of them and learn to accept them. This might seem trivial, but it is a crucial step that is sometimes hard to take. There are three reasons why this can be the case:\nSelf-view: If you firmly think of yourself as a gentle, kind person, then you might find it difficult to accept that at times, you too can feel emotions like anger, ill-will, and envy.\nMental State: If you are very busy, rushing from one task to the next, then noticing difficult feelings will be harder. In fact, you might not become aware of them until they have grown so big that they can’t go unnoticed any longer.\nWork Environment: If you work in a male-dominated environment, then tuning into your feelings may not feature very high on your agenda, especially if you are male. The male-dominated workplaces I have experienced were largely characterised by ignoring difficult emotions, rather than acknowledging them.\nBut ignoring and suppressing unpleasant feelings won’t make them go away—trust me, I’ve tried this more than once. Instead, it will affect your mental well-being and impact your ability to make the right decisions. In the worst case, an emotion will eventually grow so big and powerful that it overwhelms you and that it causes you to act it out, thereby possibly saying or doing something you will later regret.\nTherefore, bring awareness to how you are feeling, and allow difficult emotions to be present. One way to do this is to spend a few minutes going through the following sets of questions, which are adapted from Jay Oren Sofer’s book Say What You Mean:\nHow are you? Are you feeling irritation, worry, or anger? \nIf that’s the case, where do you experience the feeling in your body, for example, in your belly, shoulders, hands, or face? \nWhat does it feel like? Is there pressure, tightness, aching, heaviness? \nDon’t rush through the questions above. Take your time to answer them. Be aware that sometimes several feelings are present that can be initially hard to discern. If that’s the case for you, start with the most dominant one. Afterwards, look at the more subtle emotions. If you find, however, that you don’t feel anything, then try to relax. You might be caught up in thoughts, or your awareness might be impacted by stress or tiredness.\nOvercoming Difficult Emotions\nOnce you have become aware of a negative feeling, try the following six tips to overcome the emotion:\nFirst, accept the feeling for what it is: a difficult, unpleasant emotion—no more, no less. Label the feeling and call it out as anger or worry, for example. But don’t be self-judgemental and don’t beat yourself up for having the feeling. Rather see it as something natural, a part of the human experience we all share.\nSecond, take responsibility for your the feeling. An emotion like anger may have been triggered by someone’s speech or action. But it belongs to you and you are responsible for dealing with it. Let’s say that Jon, a senior stakeholder, requested another feature, despite you having already explained to him that you would not be able to accommodate any new requests. Your emotional reaction to his request is worry and anger: worry about what might happen when you decline the request and anger at Jon’s apparent lack of respect for your role and the established product management processes. \nBut it would be wrong to blame Jon and make him responsible for the worry and anger you are feeling. After all, you didn’t have to react this way. You could have responded with empathy whilst kindly but firmly declining his request. Therefore, don’t blame others for difficult feelings and don’t hope that your mental state will change simply by others changing their behaviour. \nThird, don’t hold on to or identify with the feeling. Don’t label yourself as an angry or anxious person, for example. Simply recognise that anger or fear is present—just like it is in millions of other people right now. Don’t allow negative emotions to define you. What’s more, the most difficult feeling will dissolve over time. Emotions come and go. No feeling lasts forever.\nFourth, become aware of negative thoughts that feed a difficult emotion make an effort to let go of them. Let’s take the example above and let’s say that Jon’s request triggered anger in you. It will be hard for you to overcome the emotion if you keep thinking of what happened and how mean and selfish Jon is. Instead, put things into perspective and think of a positive quality that Jon has. This will help you stop having negative thoughts about Jon and allow your anger to dissolve. \nFifth, counteract difficult emotions with positive thoughts. When we are stressed or worried, everything can feel difficult and bad. To help yourself snap out of a negative mindset, put your emotions and thoughts into perspective and count your blessings. Consider all the positive things in your life and the goodness you have received. This helps you mitigate a strong negativity bias where you view everything from a negative perspective and where difficult emotions dominate, and it brings balance to your mental state. (But don’t use this technique to ignore or suppress negative emotions!) \nFinally, pay particular attention to recurring difficult emotions. We all occasionally experience tension, grumpiness, or worries. But if you are regularly tense and stressed, grumpy, irritated, or worried, then investigate the cause of the emotion. Explore why the feeling is present. Are there any thoughts or stories connected with the emotion? Do they point to an underlying need? For example, if you are routinely overworked, them you are likely to regularly experience irritation and tension. Overcoming these emotions will then require more than relaxing into them and letting them be. It will require you to change how you work and how much work you accept.\n ","url":"https://www.romanpichler.com/blog/dealing-with-difficult-emotions/"},{"date_scraped_timestamp":1710925541722,"host":"www.romanpichler.com","page_title":"Dealing with Difficult Stakeholders and Team Members","text":"\n \n Published on 3rd July 2017\n \n Last Updated on: 21 Dec 2021\n \n \n \n \n \n \n Experiencing disagreement and conflict is part of our job as product managers and product owners. We work with a broad range of people from different departments, and it's only natural that we don't always agree and sometimes clash. But constructively navigating conflict can be challenging. This article shares my recommendations for dealing with difficult people and successfully addressing conflict. \n It’s a Common Challenge\n“You just can’t make up your mind. I really wish that for once, you gave us clear priorities,” Jane said accusingly at the end of the workshop and walked out of the room. [1] It felt like a slap in the face, an unprovoked attack. How could she say something so wrong?\nDoes this story sound familiar? I certainly find that as product managers and product owners, we sometimes have to deal with pushy, stressed, or unhelpful stakeholders and team members—with people who are just being difficult.\nIf we reflect on the nature of our work, then this shouldn’t come as a surprise: Product management is as much about people as it is about products. Friction and conflict commonly appear when people from different departments work together. What’s more, innovation and effective teamwork are only possible if we can leverage conflict and disagreement. [2]\nDon’t Ignore the Conflict\nIt would be easy brush aside the issue and forget what Jane said. With so many things competing for your attention, should you really worry about Jane’s remark? But what would happen if you did ignore the conflict?\nChances are that you would feel aversion towards Jane, even if you are not fully aware of it. Next time when you meet, this might cause you to say something you later regret, which would make things only worse. What’s more, tolerating wrong behaviour sets a precedence and creates an unhealthy work atmosphere; disrespect invites disrespect.\nTherefore, do not ignore conflict. See it as an opportunity to improve your product management practice and leadership skills. This, of course, is sometimes easier said than done: Addressing the issue requires courage. Jane might a powerful or influential individual like senior management stakeholder. Additionally, you have to be willing to honestly reflect on your own intentions and actions, and be open to change your behaviour.\nRegain Your Composure\nWhen exposed to unkind behaviour, it can be hard for me not to lose my calm. But before responding to Jane and telling her what you think, stop and reflect. Become aware of how you are, how you are feeling. Are you disappointed, upset, or angry? If so, then that’s ok. But bear in mind that negative thoughts and emotions cloud your perception; they will make it difficult to have a constructive conversation with Jane.\nWhat’s more, negativity affects your own wellbeing; it makes you unhappy. Holding on to anger, a wise man once said, is like grasping a hot coal with the intent of harming someone else: The only thing certain is that you will get burned. [3] Even if anger, fear, or worries seem to have a tight grip on you, they will weaken and go away if you do not feed them. Acknowledge them, but do not engage and identify with them.\nAdditionally, bring to mind the positive qualities of the difficult person. Jane surely can’t be all mean and evil. Think of moments when you saw Jane help others, make a constructive contribution, or commit other acts of kindness. Remind yourself that anybody who acts in unskilful ways must be unhappy deep inside. This will help you empathise with the difficult person and develop compassion, rather than villainising the individual and holding a grudge against her. Finally, tell yourself that as human beings, we have all acted in inappropriate ways and said unkind things; I’m certainly not perfect by any means.\nPut Things into Perspective\nNext, ask yourself why you perceive the person as difficult. What makes the individual so hard to deal with? Why did you respond in the way you did? Why did Jane’s remark make you feel angry or hurt, for example? Was it purely because of what Jane said, or has it something to do with you?\nI notice that my own response to unskilful behaviour is particularly strong when deeply held opinions and beliefs are challenged. If I think of myself as someone who is decisive and knows what’s right for his product, then I am likely to be more affected by Jane’s remarks—independently of her intention. Similarly, I find that when I am stressed or tense, any wrongdoing I experience feels worse than when I am relaxed and content.\nFinally, look at the data and calmly consider what actually happened. Jane’s remark might have felt like a slap in the face. But did she mean to be nasty? And did you contribute to the conflict in any way? Was there anything unhelpful you might have said or done to Jane, intentionally or unintentionally? This doesn’t excuse Jane’s behaviour, of course. But it helps put things into perspective and move on from blaming Jane to resolving the conflict.\nRespond Skilfully\nWhen you meet Jane to address the issue, approach the meeting with the intent to understand and reconcile, not to win. Be willing to attentively listen to her and understand her perspective. Conflict resolution is not about getting the better of the other person; it’s about developing a shared perspective on what happened, agreeing on the changes required, and rebuilding trust.\nShare your perspective and experience in a constructive way, and be kind: Jane may not be (fully) aware of her actions or their impact on you. At the same time, be honest and firm. Use the I language; describe what you saw and heard, and how it affected you. For example, “I heard you challenge my ability to prioritise and make effective product decision; then I saw you leave without giving me time to respond. I consequently felt angry and disappointed.”\nSeparate the person from the issue. Don’t blame or attack the other person, don’t generalise (“that’s typical of you”), don’t talk about what other people may have said (“John says so too”), don’t speculate (“it’s probably because you didn’t get what you wanted in the previous meeting”). Listen with an open mind and try to suspend judgement. We all hold a piece of truth.\nOffer a helping hand and make constructive suggestions for resolving the issue. Suggest changes that you are prepared make, such as, “I will invite you from now on to the product roadmapping workshops so you better understand the overall constraints we have to take into account when prioritising the product backlog,” or “I will listen more carefully to your suggestions so you no longer feel ignored and side-lined.”\nState the positive changes that you wish for, for instance, “it would really help me if you tried to be more patient and understanding,” or “it would be great if you could let me know sooner if you feel your opinion is not heard.”\nRemember: While you want to be kind and caring, you are not responsible for the other person’s thoughts and feelings. You can encourage another person to change. But you cannot make someone change her attitude and behaviour.\nMove on\nIf everything works out well, you’ve made up with Jane and agreed on a way forward. What’s then left to do is strengthening the relationship and fully re-establishing the trust that might have been lost. This is achieved by working together as well as socialising, for example, having coffee or lunch together.\nIf the conversation didn’t go well, consider what the next steps are. Should you talk to Jane again? Should you involve someone who can mediate? Should you escalate the issue? Talking to your manager or Scrum Master / coach might help you choose the right action.\nNotes\n[1] Note that Jane is a fictitious character. I assume that the conflict can be resolved by the people involved unlike severe transgressions, such as violence or sexual harassment. If you are in doubt, talk to your line manager and involve human resources.\n[2] Tuckman’s team building model, for example, suggests that people have to learn to handle conflicts to work together productively.\n[3] This quote is often attributed to the Buddha, but it may actually be from Buddhaghosa.\n ","url":"https://www.romanpichler.com/blog/conflict-resolution-tips-product-managers-product-owners/"},{"date_scraped_timestamp":1710925528288,"host":"www.romanpichler.com","page_title":"Dealing with an Underperforming Development Team","text":"\n \n Published on 2nd November 2021\n \n \n \n \n \n \n \n As the person in charge of the product, you rely on the development team to do a good job. But some teams are held back by performance issues and fail to reliably deliver working software. This article shares my advice on how product people can deal with an underperforming development team and help the group improve. \n \nListen to this article:\nWhat is Bad Performance?\nBefore I discuss how you can help an underachieving team, let’s briefly explore what good performance looks like, assuming that an agile, Scrum-based process is used. A development team does a good job if the following three conditions are fulfilled:\nFirst, the group reliably meets the agreed sprint goals and delivers product increments that offer a great user experience and exhibit the desired software quality. Second, the team participates in continuous discovery and strategizing, and its members regularly help refine the product backlog. Third, the team observes sustainable pace. The workload and intensity do not affect the team members’ wellbeing.\nIf one of these requirements are not fulfilled, the team needs to improve their work. Here are three common symptoms of a development team struggling to do a good job: The team repeatedly over commits or delivers buggy software; the team members expect that you, the person in charge of the product, does the product backlog work and writes the user stories; and finally, the team members repeatedly have to work extra hours to finish the work in the sprint.\nAs the person in charge of the product, you depend on the work of the development team and you are, of course, affected by poor performance. This includes not being able to release working software to (selected) users and customers, finding it hard to reliably forecast the development progress, and possibly getting overworked as you don’t receive the necessary support from the development team. It is hence in your best interest to help the team get back on track. At the same time, you are not the boss, and you cannot tell the team members what to do. What’s more, an agile, self-managing team is collectively responsible for their performance. This can make it challenging to help a development team improve.\nShare Your Views but Don’t Tell People What to Do\nTo discuss how you might help a struggling team, let’s use an example. Say that you are working on a new brand-new product. The current sprint has an important goal: to release the product increment to selected users and validate if the functionality offered works for them. Additionally, you’ve invited the senior management sponsor to the upcoming sprint review meeting to secure the individual’s continued support.\nBut during today’s Daily Scrum meeting, you notice that the sprint progress has been worryingly slow: Plenty of tasks aren’t finished, and some stories haven’t even been started. It seems that the development team is behind schedule and will find it hard to reach the sprint goal. The team, however, does not seem to be concerned.\nIn this situation, it can be tempting to step in, tell the development team that they must get their act together and possibly even assign specific tasks to individual members. But this would be wrong. You would interfere with and damage the team’s self-management. An agile team is responsible for planning and tracking the work, reviewing the progress on a daily basis, and deciding how the work should be done to maximise the chances to meet the sprint goal. If you stepped in and took control, you would act as a project manager and essentially disempower the team.\nBut this does not mean that you should be a passive bystander and watch the team fail. If you believe that the development team needs your help, then talk directly to them, for example, after a Daily Scrum. However, ask the team members for their views before you share yours. You might say, for example, “How are things going? Do you think you are on track to meet the sprint goal?” Then attentively listen to what the individuals have to say.\nIf you are not satisfied with the answers and believe that the team members are not aware of the issue, share your view without judgement and criticism. You might say, for example, “It seems to me that the development progress has been slow. Several tasks aren’t finished, and some stories haven’t been started. Do you think that’s true?”\nBut leave it up to the team to decide what needs to be done, and do not force your perspective onto them. You might be wrong after all: The team might be doing a great job despite your concerns. If you are unsure if you should say something or not, talk to the Scrum Master who is responsible for helping the team practice self-management, as I discuss below.\nTake Stock at the End of the Sprint\nOnce the new product increment is available, you know for sure how much the development team has achieved. Based on a live demo of the increment, you determine which product backlog items have been completed by using the definition of done, the quality criteria every product increment must fulfil. This allows you to understand if the sprint goal was met and if the team did a good job.\nIf it turns out that the development team failed to meet the sprint goal, then offer your honest feedback. Clearly state what was achieved and what was not. For instance, if the team only managed to complete half of the product backlog items they pulled into the sprint and missed the sprint goal by a mile, then don’t make out that the team’s performance was OK. It was not. The team simply underperformed. I’ve seen Scrum product owners who put up with an underachieving team partly because they hoped things would improve on their own and partly because they shied away from a difficult conversation. But chances are that nothing will change for the better if you don’t openly address the issue.\nAt the same token, empathise with the development team and speak with kindness. Don’t have a go at the members, and refrain from blaming and judging people. Treat the team as a valued partner and recognise the effort the group made. Additionally, put the performance issue into context: A newly formed team and a significantly changed one are likely to require a few sprints before the members can reliably meet the sprint goals. Similarly, a team dealing with significant technical challenges may struggle to get sprint planning right due to the uncertainty present.\nTo give helpful feedback and maximise the chances that your message is heard, you might say: “It’s great that you managed to deliver some of the product backlog items. Thank you for that. But I am disappointed that only half of the work is complete and that the sprint goal was clearly missed. I’d like to understand what went wrong, and how we can avoid a similar situation in the future.” If you are upset or angry, then take a few deep breaths and count to ten before you give feedback. If that’s not enough, take a short break and continue once you have calmed down. While it’s perfectly fine to have difficult emotions, acting them out is not OK. I once witnessed a sprint review meeting degenerate into a shouting match. This did not solve anything, of course. Instead, it made things worse, destroyed trust, and damaged relationships.\nUse the Retrospective to Determine Improvements\nWhenever you experience performance issues, use the sprint retrospective to identify and address their underlying causes. For example, you might find that some of the user stories that went into the sprint were too big or lacked acceptance criteria, that the team did not use the definition of done to identify the necessary tasks during sprint planning, that the software development environment was unstable, or that unresolved conflicts resurfaced and slowed down the team.\nDo take part in the sprint retrospective. But don’t dominate the meeting and refrain from blaming and judging others. Instead, embrace a contribution mindset: Ask how you can help to avoid that the same problem will arise again. Don’t assume that a performance issue is necessarily the development team’s fault. Instead, cultivate an open mind and actively listen to the suggestions of the development team members. You might find, for example, that you did not involve the individuals enough in refining the product backlog. This might have led to big and unclear user stories, which made it hard for the team to meet the sprint goal. Or you might have put pressure on the team and asked them to pull more work into the sprint than they could realistically handle. These two causes can only be fully resolved if you are prepared to change the way you behave.\nIf a performance issue persists despite determining its causes and implementing improvement measures, then you might have to consider adjusting the team composition. For example, it may be beneficial to break up a team whose members are working on different, unrelated areas within the same product. It might also be necessary to ask a team member who continuously shows disruptive behaviour to leave the team. However, none of these changes should be forced onto the team. Instead, have an open, honest conversation in the retrospective and look for a solution that works for everyone. This creates transparency, gives people the opportunity to contribute, and reduces the risk that individuals end up frustrated and feeling treated unfairly.\nFinally, let the Scrum Master facilitate the meeting and suggest helpful ways to unearth underlying causes and derive actionable improvement measures. If you don’t have a Scrum Master or agile coach, find an experienced, neutral facilitator who ensures that everyone is heard, and nobody dominates.\nLet the Scrum Master Coach the Team\nAs much as you may want to help the development team, be mindful that you are responsible for managing the product, not for coaching the team. That’s the job of the Scrum Master or agile coach. If you don’t have a Scrum Master, or if the person is not adequately available or qualified, then don’t make the mistake to cover the individual’s work, certainly not on a continued basis. This would cause you to neglect some of your product management responsibilities—like reviewing and updating the product strategy and product roadmap—or sacrificing your health, neither of which is desirable.\nInstead, recognise that the lack of a qualified, available Scrum Master needs to be addressed and engage with the decision-makers in the organisation to find a solution. I personally regard it as unfair to ask product people to act as the product owner if the Scrum Master role is not properly filled.\n ","url":"https://www.romanpichler.com/blog/dealing-with-performance-issues-on-the-development-team/"},{"date_scraped_timestamp":1710925462566,"host":"www.romanpichler.com","page_title":"Decoding Product Leadership","text":"\n \n Published on 6th November 2023\n \n Last Updated on: 21 Nov 2023\n \n \n \n \n \n \n Strong product leadership is crucial to offering successful products and enabling product-led growth. Unfortunately, there is disagreement and confusion about what exactly product leadership is and who should exercise it. Is product leadership limited to someone working as a head of product? Or can—and should—others lead in product management too? In this article, I share my advice to help you effectively practise product leadership and become great at leading others. \n \nListen to the audio version of this article:\nLeading as the Person in Charge of the Product\nWhen you hear the term leadership, you might first and foremost think of a senior manager like the head of product, Director of Product Management, VP of Product, or Chief Product Officer.[1] In fact, some people argue that product leadership can only be exercised by a management role. But in my mind, that’s a misunderstanding of what it means to lead. Leadership is present when an individual guides a group of people to achieve a desired outcome.\nLeadership can therefore be exercised without being a boss. You don’t have to be a line manager to lead others. Consequently, a product manager and a Scrum product owner are leaders, too. They guide the stakeholders, development teams, and in the case of large products, other product people, to meet the agreed product goals, create the desired outcomes, and achieve product success, as Figure 1 shows.\nFigure 1: Exercising Emergent Leadership as the Person in Charge of the Product\nThe best product managers and product owners I have seen were great at aligning and guiding people. The opposite is also true: I’ve seen product people who were excellent at product management, had amazing market insights and great product ideas, but underachieved, as they lacked the right leadership skills.\nLeading as the person in charge of the product, however, is far from being easy. As the individual is a peer and not the boss, they cannot tell people what to do and they are usually not in a position to offer rewards like a promotion. The leadership they exercise is called emergent or lateral leadership.[2] It does not derive from a position on the org chart. Instead, it must be earned. The followers—the product team members in Figure 1—must support the person in charge of the product and be willing to follow their lead. This is achieved by gaining the trust of the individuals: exhibiting the right expertise, showing empathy, speaking and acting with integrity, and being reliable and accountable, as I explain in more detail in the article Leading without Being the Boss and the video shown below.\nDespite the necessity to practise emergent leadership, the person in charge of the product must be sufficiently empowered. This means that the individual has the final say on tactical and strategic product decisions if no agreement can be reached within the product team. If that’s not the case, leading the stakeholders and dev teams can feel like a Sisyphus job—you work very hard but achieve very little.\nLeading as the Head of Product\nA head of product is someone who manages a group of product people, individuals who look after a product or a product part—like an end-user-facing feature—and who might be called product managers or product owners. A head of product is responsible for developing the individuals and growing the product management team. This usually includes hiring people, coaching and supporting them, conducting performance reviews, offering promotions, and in some cases, terminating the employment contract, as I explain in more detail in the article What Should a Head of Product Do?. To put it differently, the head of product is the boss of the people on the product management team, and the team members report to the head.\nThe individual’s power consequently originates from their position. The leadership they exercise has been assigned or granted by the CEO or another executive. It is therefore called assigned leadership.[3]\nFigure 2: Assigned Leadership and the Head of Product Role\nBut great heads of product do not rely on the power that comes with their role. They don’t exclusively practise assigned leadership, and they certainly don’t act as “product dictators.” Instead, they also take advantage of emergent leadership, as Figure 3 shows.\nFigure 3: Head of Product Exercising Assigned and Emergent Leadership\nThere are two reasons why effective heads practise emergent leadership. First, it helps them build strong, trustful connections with the product team members and create an environment of trust and support. This increases motivation, creativity, and productivity. To put it differently, it’s hard to innovate and have the courage to make and learn from mistakes if you don’t believe that your boss is supportive and understanding.\nSecond, succeeding as the head of product does not only require the ability to lead the people on the product management team. The individual also has to be able to influence the CEO and the other heads, like the heads of development, sales, and marketing, as Figure 3 shows. This is necessary, for example, to establish an effective product management function and to secure the necessary level of empowerment for the product people as well as to resolve cross-departmental issues—think of sales reps who routinely promise features to customers without first consulting the appropriate product managers.\nCultivating the Right Leadership Skills\nAs emergent leadership plays a key role in product management, it’s important to develop the skills that allow you to effectively exercise it. These include the following seven capabilities, which I teach in my Product Leadership Training and describe in my book How to Lead in Product Management:\nTrust-building: Be able to earn the trust of others, including senior stakeholders and managers, and use it to influence and guide people.\nEmpathising: Understand other people’s feelings and needs and take the perspective of another person even if you dislike or disagree with them.\nCommunication: Be able to effectively practise active listening and offer honest but constructive feedback to help people meet agreed goals.\nGoal setting: Determine the right outcomes and capture them in the right way. For example, to set product-related goals you might choose to use my goal-setting framework and my strategy and roadmap templates. Hold people accountable for meeting agreed goals.\nCollaborative decision-making: Leverage people’s collective expertise and secure their buy-in. Know when to delegate.\nConflict resolution: Successfully address disagreements, resolve conflicts, and repair relationships.\nSelf-leadership: Develop a growth mindset, effectively manage your time and energy levels, and look after yourself.\nIf you want to succeed at leading others, I strongly recommend that you develop these skills. To do so, attend my Product Leadership Training and read or listen to my book How to Lead in Product Management.\n1. I follow Rich Mironov in viewing the four terms as synonyms.\n2. See Peter G. Northouse, Leadership: Theory and Practice for more information on the term emergent leadership and see, for example, Tim Herbig, Lateral Leadership: A Practical Guide for Agile Product Managers for the use of the term lateral.\n3. See Peter G. Northouse, Leadership: Theory and Practice. Assigned leadership is also called hierarchical leadership.\n ","url":"https://www.romanpichler.com/blog/decoding-product-leadership/"},{"date_scraped_timestamp":1710925645011,"host":"www.romanpichler.com","page_title":"Digital Transformation and Product Management","text":"\n \n Published on 4th June 2018\n \n \n \n \n \n \n \n Digital transformations often focus on new technologies, agile practices, and new business models. While these are undoubtedly important, a further success factor is sometimes overlooked: product management. In this article, I share my tips for establishing an effective product management function to achieve a successful digital transformation, offer the right customer experience, and help unlock the organisation’s innovation potential. \n Recognise the Importance of Product Management\nA digital transformation is a major change program that helps a company succeed in the digital age. Embracing new technologies like machine learning, micro services, big data, and Internet of Things (IoT) is part of that change, as is the introduction of agile practices including cross-functional and self-organising teams, DevOps, Scrum, and Kanban. Business models also tend to change when companies digitalise their business—customer relationships, pricing models, partner and supplier relationships, cost factors, and other aspects are likely to be affected.\nBut to take advantage of new and existing digital assets, align them with physical products and services and create a seamless user experience, and increase the overall value created, companies require product professionals—dedicated, qualified product people who look after the digital assets.\nFor some companies, this means introducing a new department or group, creating new roles, and career plans. That’s often the case in my experience for businesses in finance, media, travel, insurance, and other verticals that traditionally don’t have product management groups, and where product management is not represented at the executive level.\nNote that employing people who are called product owners or product managers does not necessarily mean that a product management function exists. I have seen more than one business that called their project managers and team leads “product owners”, but failed to give the individuals true ownership of the products and equip them with the necessary skills to manage them. The changes required to establish a product management group are far from trivial, and they require executive management support, as I discuss in more detail below.\nCompanies with an existing product management group usually require up-skilling and retraining their product people, as well as adjusting roles and responsibilities and career plans. This helps the individuals embrace an agile mindset, take advantage of new techniques and tools—think of hypotheses-driven strategy validation, goal-oriented product roadmaps, and user stories—and effectively collaborate with the agile development teams. Additionally, companies need to consider how the individuals in charge of digital products collaborate with those responsible for the revenue-generating goods and services. While these changes are not as deep as introducing a new product management group, they still need to be carefully managed.\nDefine Clear Product Roles and Responsibilities\nOne of my clients called everyone in charge of a feature, product, and portfolio a “product owner” at the start of their digital transformation. Consequently, people were confused and unsure what it meant to play the role, and the organisation’s learning and development program wasn’t effective. This example is representative for many companies in my experience: product roles are often applied ineffectively.\nAs I have argued before, a product owner or product manager should be in charge of a product—an asset that creates value for a group of users and the business. The individual should manage the product for an extended period of time, usually for several life cycle stages, not just a few weeks or months. This creates continuity of purpose, facilitates learning, and reduces wasteful handoffs.\nIndividuals who own part of a product are not product but feature or component owners in my mind. They have an important job too, but their responsibilities differ: they are focused on their specific feature or architecture building block rather than trying to increase the value the entire product creates. People who look after a group of products are not product owners either, they are portfolio owners or managers.\nTo get the roles definition right, start by identifying the company’s products. Consider the revenue generating assets as well as the supporting ones. Take, for example, an insurance policy that helps people protect their home, and the digital products that help customers select and buy the right policy. Then align the physical and digital assets to create a consistent user experience, no matter if the policy is bought online or in a branch, for instance.\nFinally, ask yourself who should own each product, and how many teams are required to develop the product. You may consequently have to identify additional people with more specialised roles like feature and component owner who support the overall product owner or manager of the larger offerings.\nDetermine the Right Learning and Development Measures\nOnce you have the right roles in place, take the next step and determine the necessary skills for each role. While there is likely to be some overlap, different roles have different skills profiles. A component owner, for example, typically requires strong technical skills, as the person will have to help specify interfaces and APIs. Strategy and leadership skills are nice-to-have but not mandatory. A portfolio owner, however, requires strong strategy and leadership capabilities including the ability to develop a portfolio strategy and align powerful individuals.\nWith the desirable skills in place, assess the actual capabilities of the people who will play the different product roles, for example, by using my product management test. Identify gaps and weaknesses that prevent the individuals from doing a great job. Then determine the right learning and development measures. These may include instructor-led in-class and online training, self-study using books, videos, and articles, and coaching sessions provided by senior product people or product coaches.\nTake into account people’s learning preferences and constraints to find the most effective measures for each individual. Avoid generic, cookie-cutter approaches. Don’t expect that a single two-day training course will equip people with everything they need to know; it won’t.\nBeing an effective product person is a demanding job that requires a broad range of skills. It therefore takes time for people to grow into a new product role, particularly when they are new to product management. While you can support people’s learning journey, you cannot speed it up at will. Your best bet might therefore be to hire external talent in addition to developing current employees.\nMake the Necessary Organisational Changes\nIntroducing a new product management group or adapting an existing one people requires organisational changes. These range from establishing a product culture to empowering the product people, giving them the necessary decision-making authority.\nSeveral years ago, I was working with a large insurance company. At the beginning of my first workshop, I asked the attendees to tell me which products they were managing. “What do mean?” was the answer I received, “We don’t manage products. We do software, not insurance policies.” There was no common understanding that software assets can be regarded as products in their own right and should be managed accordingly. Instead, the organisation employed projects that usually changed a number of different digital products. A project lasted typically just three months, and after working on it, the so-called product owner and the dev team members would be assigned to new projects. If this story sounds familiar, then your company should consider changing the way it operates and organise around products—rather than projects.\nAt another client, the newly created product management group looked after the tactical aspects of the company’s offerings. But senior management continued to make the portfolio and product strategy decisions. Needless to say, this work spilt was ineffective and frustrated the product managers who ended up looking after their backlogs rather than being allowed to take charge of their products, innovate, and create more value. Management lacked the understanding that product people must own the strategic product decisions in addition to the tactical ones, and that senior and executive management should guide product people using a business strategy.\nIf you want to succeed with digital products, you must not only find the right people and help the acquire the right skills. You must also give them the necessary authority. Product owners that are not empowered do not own their products; they are product administrators or project managers in disguise. Additionally, product management must be represented at the executive level, and not hidden inside IT/development or another business unit. This may require hiring an experienced product leader who acts as the head of product and leads the development of an effective product management group.\nTo make the necessary changes, you usually require executive management support. The executive leading the digital transformation may also sponsor the introduction or strengthening of product management, and explicitly state it as one of the major transformation objectives. Alternatively, the CEO or managing director makes a great sponsor.\nEstablish a Product Community of Practice\nBuilding an effective product management function is never done; it’s an ongoing process. New people join the organisation, experienced people leave or move into new job roles; tools and techniques change; new trends emerge. To make things worse, product management is a comparatively young profession, certainly when it comes to digital products, and we lack standards other professions take for granted.\nTake the product roadmap, for example. Different people have different ideas what a roadmap is, and how it should be represented and communicated. We even call the same product roadmap type different names: goal-oriented, theme-,  benefit-, and outcome-based roadmap. It is therefore important that you develop and advance product management norms and standards at your company, and agree for instance, if and when you will use a roadmap that works with goals/benefits/outcomes, which template you will employ, and which term you will use. These standards should define how product management is practiced at the company and serve as a blue print for new product people.\nCreating a community of practice or guild is a great way to help product people develop and advance shared practices and to facilitate learning and networking. Nobody can be an expert in all aspects of product management, as it is such a diverse and evolving discipline.\nBrown bag lunches, open-space sessions, failure swap-shops, and internal product management conferences are sample measures that help create and sustain a product community. The key is to give people the time and space to interact and learn from each other. The head of product is usually the right person to sponsor and shepherd the community of practice, and help the group evolve their practices.\nAdditionally, consider developing in-house product coaches and mentors who can teach junior product people and help with community building. These may be some of the senior product people including the head of product, or dedicated coaches who used to be practicing product owners or managers. While you may find that you require external product coaches and trainers to up-skill people when creating a new product management group or when new trends and techniques emerge, you should not depend on them for an extended period of time. Product management is a crucial business function. You therefore want to have the right capabilities inside your organisation.\n ","url":"https://www.romanpichler.com/blog/digital-transformation-and-product-management/"},{"date_scraped_timestamp":1710925631883,"host":"www.romanpichler.com","page_title":"Do Product Owners Need Technical Skills?","text":"\n \n Published on 9th August 2017\n \n \n \n \n \n \n \n As a product owner, you look after a digital product and work with a development team. Does this mean that you require technical skills? Should you be able to program and write code? Or is it sufficient that you take an interest in software technology and leave the rest to the team? This post shares my answers and recommendations. \n How can you tell if you would benefit from having technical skills as a product owner? To answer this question, I find it helpful to look at how the role is applied. If you manage a digital product that end users employ, such as a web or mobile app, then you usually do not require in-depth technical skills, such as, being able to program in Java, write SQL code, or know which machine learning framework there are and if, say, TensorFlow is the right choice for your product.\nBut if you look after a technical product—a product that is integrated into a larger offering like a physics engine, which forms part of a computer game—then you will require the appropriate technical skills in order to formulate technical requirements and define software interfaces (APIs). For instance, if you were responsible for a physics engine, then you would probably have to be able to program in C++, use UML, and apply the right software architecture and design patterns.\nThe same applies if you are a component owner, someone who looks after an architecture building block like a service, component, or layer that forms part of a digital product: You will benefit from having hands-on experience in the appropriate technologies.\nIndependent of your specific product job, you should take an interest in software technology and be aware of major trends like artificial intelligence (AI) and Internet of Things (IoT). I would argue that every product owner should have at least a basic understanding of core concepts, such as, object orientation, design patterns and architecture principles, as well as agile development practices, such as, test-first, refactoring, and continuous integration.\nThis knowledge helps you make the right product decisions, for example, investigate how AI and machine learning can improve your product or allocate time for architecture refactoring work. It also helps you empathise with the development team and understand some of the challenges the team members experience whilst designing, programming, and testing the product.\nLearning to program can help you acquire the relevant knowledge—I am certainly grateful that I had the opportunity to learn to write code and architect software systems. But do make sure that you focus on your actual job—to ensure that your product creates as much value as possible for the users and your company. It’s more important that you understand the value your product creates for its users, who the product serves, what makes it stand out, and what business benefits it should deliver than being able to know if a layered or service-based architecture is more appropriate, for example.\nAdditionally, don’t interfere with the development team’s autonomy by making technical decisions, which can be tempting for product owners with strong technical skills in my experience. It’s the team’s job to decide how the product is built, not yours. If you feel that people lack the necessary skills to make the right technical decisions, then discuss this observation with the team in the next sprint retrospective and agree on the right improvement measures, rather than you taking over and telling people what to do.\nFinally, recognise that playing the product owner role and working in product management is as exciting as it is demanding. Don’t feel bad if you lack technical understanding. See it as an opportunity to learn and grow, and expand your product management practice.\n ","url":"https://www.romanpichler.com/blog/product-owners-and-technical-skills/"},{"date_scraped_timestamp":1710925671453,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=149351"},{"date_scraped_timestamp":1710925678294,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2609"},{"date_scraped_timestamp":1710925675733,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2613"},{"date_scraped_timestamp":1710925670063,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=149350"},{"date_scraped_timestamp":1710925680683,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2607"},{"date_scraped_timestamp":1710925672063,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=20211"},{"date_scraped_timestamp":1710925682837,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2606"},{"date_scraped_timestamp":1710925676500,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2615"},{"date_scraped_timestamp":1710925680341,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2608"},{"date_scraped_timestamp":1710925672154,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=20212"},{"date_scraped_timestamp":1710925679483,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2610"},{"date_scraped_timestamp":1710925676617,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2614"},{"date_scraped_timestamp":1710925682793,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2605"},{"date_scraped_timestamp":1710925472127,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/"},{"date_scraped_timestamp":1710925678927,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2611"},{"date_scraped_timestamp":1710925658568,"host":"www.romanpichler.com","page_title":"Epics and Ready Stories","text":"\n \n Published on 7th November 2012\n \n \n \n \n \n \n \n This post explains how to write user stories at the right level of detail, and how to derive small, ready stories from big, coarse-grained epics. \n One of the things I love about user stories is their flexibility. A user story can be big, medium-sized, or small. This allows us to sketch a product with big stories, and then progressively add more detail and refine them into smaller user stories, as we learn more about how to meet the user needs.\nBut this flexibility comes at a price: I often see user stories that are too small or too big, that contain too much or not enough information. Deriving the right stories, and getting the level of detail right can be challenging.\nThis post suggests a simple, yet effective solution: distinguishing between two types of user stories, epics and ready stories, and deriving the ready stories with the help of a shared sprint goal or hypothesis.\nEpics\nEpics are big, coarse-grained user stories. An epic sketches a feature or bigger piece of functionality. It acts as a placeholder for more detailed stories. Think of the epos Odyssey. It’s a collection of stories about the adventures of Ulysses including meeting the Sirens, and defeating a Cyclops.\nEpics allow you to sketch the product functionality without committing to the details. This is particularly helpful for new products or major product updates, as it buys you time to learn more about the users and how to best meet their needs. It also reduces the time and effort required to integrate new insights: If you have lots of detailed stories, then it’s often tricky to relate the feedback you receive to the right stories, and it can be a big effort to change them without introducing inconsistencies. Let’s have a look at a sample epic:\nThe epic above tells us that the persona John wants to register for an event. The details of the event and the registration are left open for now. Similarly, the acceptance criteria – captured on the right card – are sketchy too. The details will emerge, as we learn more about the event registration by developing software and exposing it to the right people.\nReady Stories\nReady stories are small, detailed stories that can be implemented. These stories have to be clear, feasible, and testable: Everyone should have a shared understanding of the story’s meaning; the story should not too big or complex; and there has to be an effective way to determine if the functionality works as expected.\nA ready story should also take into account additional aspects: the user interface design and the operational qualities that are specific to the story. Examples of the latter are performance or interoperability. I prefer to work with a paper-based design sketch to capture the user interface, and constraint story cards to describe the qualities, as the following picture shows.\nThe ready story above is much more specific and detailed than the sample epic discussed earlier: The details enable the development team to implement and test the story successfully.\nFrom Epics to Ready Stories\nSo far we’ve simplified things by distinguishing between epics and ready stories. But we haven’t discussed yet how ready stories are derived from epics. My solution is to identify a sprint goal or hypothesis for the next iteration before the ready stories are written, as the following picture illustrates:\nStep 1: Write the Epics\nLet me show you how this process can be applied using my Product Canvas tool. The canvas is essentially a multi-dimensional backlog that allows you to describe your product holistically.\nThe Product Canvas supports working with epics and ready stories by providing dictated sections. It also offers the context for finding the right epics: The user journeys – scenarios, workflows, or storyboards – are a great hunting ground for epics. The epics are placed on the “Epics” section, as the following picture illustrates.\nStep 2: Select the Goal of the Next Sprint\nOnce the epics sketching the product’s main functionality have been written, I populate the design and constraints sections on the canvas. Then I select the goal of the next sprint – either to address the most critical risk and/or to deliver functionality to the stakeholders including the users. Examples of a sprint goal are: “Validate our central user interface design ideas”, or “Be able to release epic B”. The sprint goal is placed at the top of the Ready Stories section, as the following picture shows.\nI find it very beneficial to involve the entire team, the product owner and the development team, in selecting and formulating the sprint goal. This leverages the team’s collective knowledge, and ensures that the goal is shared. The latter ensures that the entire team is moving towards one goal. This encourages teamwork, and it makes it easier to analyse the feedback.\nStep 3: Derive the Ready Stories\nAfter selecting the sprint goal, I determine which epics contribute to the sprint goal, for instance, epic A and C on the canvas above. I then derive small stories from the appropriate epics, and I order the new stories depending on their importance to reach the sprint goal, as the picture below illustrates.\nFinally, I ensure that each story is ready and has the necessary sketches and constraints attached. The entire teams should carry out this step to ensure that the stories are clear, feasible, and testable. The right amount of ready stories are then pulled into the sprint and implemented.\nStep 4: Update the Canvas and Repeat the Process\nAfter exposing the outcome of the iteration to the right people, the insights gained from analysing the feedback are worked into the canvas: Existing epics are adjusted or removed, new epics may be added. Then the next cycle starts. A new goal is selected, and new ready stories are written.\n ","url":"https://www.romanpichler.com/blog/epics-and-ready-stories/"},{"date_scraped_timestamp":1710925563291,"host":"www.romanpichler.com","page_title":"Everything You Need to Know about Product Portfolio Strategy","text":"\n \n Published on 22nd January 2024\n \n Last Updated on: 26 Jan 2024\n \n \n \n \n \n \n Products often don’t exist in isolation. Instead, they are part of a product portfolio. Think of Word, Excel, and PowerPoint, which belong to Microsoft Office. Such a portfolio benefits from having a dedicated strategy—a product portfolio strategy. But what information should it contain? Which template can you use to describe it? How does it relate to the overall product portfolio management work? And who should create and update the strategy? Read on to find out my answers. \n \nListen to the audio version of this article:\nWhat Is a Product Portfolio Strategy and Why Does It Matter?\nA product portfolio strategy is a high-level plan that helps you maximise the value a group of products creates. It achieves this by setting overarching goals for the entire portfolio. These guide and align the strategies of the portfolio members, as Figure 1 illustrates.\nFigure 1: The Product Portfolio and Product Strategy Using Microsoft Office as an Example\nIn Figure 1, the strategies of the individual products—Word, PowerPoint, and Excel—implement the Office strategy. Their visions, target groups, needs, standout features, and business goals must comply with the overall portfolio strategy.[1]\nProduct Portfolio, Product Family, and Product Line—What’s the Difference?\nA product portfolio is a group of products. These might be end-user-facing or internal ones like a software platform, for instance; they might directly generate revenue or support commercial offerings. Larger companies often have several portfolios; early-stage startups, in contrast, usually have a singleton one—it consists of just one offering.\nA product family is commonly defined as a group of related products. You can therefore view it as a cohesive product portfolio—a portfolio whose members have related value propositions and/or business goals, for example, Adobe Creative Cloud and Microsoft Office.\nA product line is a set of product variants. You can think of Microsoft Visio as a product line, as it is offered in three versions at the time of writing—basic, standard, and advanced. Another example is YouTube, which is available in three variants—standard, premium, and kids.\nWhich Specific Information Should the Portfolio Strategy Contain?\nAn effective product portfolio strategy should contain five elements—an overarching vision that describes its purpose, the positive change it should bring about; the markets and market segments the portfolio serves; the overall value it creates for the users and customers; the business benefits it helps achieve; and the type of products it contains with the capabilities that set them apart from competitors.\nTo make this more concrete, let’s explore how the Microsoft Office strategy might be captured.[2]\nFigure 2: A Sample Product Portfolio Strategy\nIf you are familiar with my work on product strategy, you’ll recognise the structure I’ve used in Figure 2: It is based on the Product Vision Board—the tool I’ve developed to capture a product vision and a product strategy. This means that you can apply my strategy approach not only to individual products but also to your product portfolio.\nTo get started, create your own Portfolio Vision Board by downloading and adapting the Product Vision Board or by recreating it in your favourite tool. Please make sure, though, that you state the author and source of the Product Vision Board as well as the CreativeCommons BY-SA license on your derived portfolio board—like I did in Figure 2. If you haven’t worked with the Vision Board, then read the article The Product Vision Board and watch the video Product Vision Board Introduction.\nBut despite the structural similarity between a portfolio and a product strategy, there is an important difference: Due to its nature, a portfolio strategy has to be bigger and less specific than a product strategy—it covers several products and not just a single one. This means that its target group, needs, standout features, and business goals are significantly less specific than those in a product strategy.[3]\nHow Does the Product Portfolio Strategy Direct the Product Strategies?\nNow that we understand which information a portfolio strategy should contain, we can take a closer look at how it guides the strategies of the products it contains using Office as an example. The Word, PowerPoint, and Excel visions have to either support the Office vision or, which is my preference, they inherit it. This way, they share the same purpose—“to enable individuals and organisations to get things done.”\nAdditionally, the target groups of Word, PowerPoint, and Excel have to be subsets of the portfolio target group. Similarly, the needs captured in the individual strategies have to help meet the needs in the portfolio; the standout features of Word, PowerPoint, and Excel have to address the needs stated in the Office strategy; and their business goals have to help achieve the portfolio ones. Figure 3 illustrates this relationship.[4]\nFigure 3: The Product Strategy Implements the Portfolio Strategy\nFollowing this approach ensures that the portfolio and product strategies are closely aligned. To put it differently, the portfolio strategy sets the stage for the product strategies; it guides and constrains the strategic decisions of the portfolio members.\nHow do Product Portfolio Strategy and Product Portfolio Management Relate?\nAs its name suggests, product portfolio management is the process of managing a group of products. This includes analysing a product portfolio using a tool like the Product Portfolio Matrix, creating and updating a product portfolio strategy, and adjusting the portfolio. The latter includes harmonising the strategies and roadmaps of the portfolio members, resolving dependencies, coordinating major releases (if required), as well as adding and removing products.\nAs this description shows, simply creating a product portfolio strategy is not enough. You also have to establish an effective portfolio management approach. Part of this process should be regular portfolio strategy reviews. I recommend holding them every three months and considering the portfolio performance, changes in the competitive landscape and business strategy, new trends, and modifications of the strategies of the portfolio members.\nThe product portfolio strategy is therefore far from being a fixed plan. Just like a product strategy, it is best understood as being malleable and changeable. As Dwight D. Eisenhower famously said, “Plans are nothing; planning is everything.”\nWho Creates and Manages the Product Portfolio Strategy?\nCarrying out portfolio management and creating and evolving a portfolio strategy requires expertise and time. To ensure that the work gets done, you have two options:\nFirst, use a dedicated product manager. The individual should have a track record of successfully managing products similar to the ones contained in the portfolio. Additionally, they‘ll benefit from having the right leadership skills, be able to guide a group of product people, collaborate with senior stakeholders, and engage with senior management.\nSecond, ask the head of product to carry out the portfolio management work in addition to their other duties—as long as the individual has the necessary expertise and does not become overworked.\nNo matter, which option you choose, it would be a bad idea if a single person made all portfolio decisions on their own. This would waste the knowledge and creativity of the people working on the individual products. What’s more, it might cause poor alignment and weak buy-in. I therefore recommend a collaborative approach that involves the following individuals:\nThe product portfolio manager (who might be the head of product);\nThe individuals managing the products contained in the portfolio;\nDevelopment team reps which might include a UX designer (for end-user-facing products), an architect/programmer, and a tester/QA engineer.\nKey stakeholders, for example, a sales rep, marketer, and customer support team member.\nThese individuals form a product portfolio team like the one shown in Figure 4.\nFigure 4: The Product Portfolio Team\nThe team in Figure 4 is similar to a product team but it operates at a higher level. What’s more, the portfolio team should not only create a portfolio strategy but also collaboratively review and adjust it on a regular basis.\nTo staff the team, I recommend asking the dev teams and various key stakeholders involved in progressing the individual products to nominate representatives. This ensures that the team members are motivated to help with the portfolio management work. Additionally, keep the team stable to facilitate trust-building and collaboration and avoid handoffs and loss of knowledge.\nHow Can You Get Started with a Product Portfolio Strategy?\nMy experience suggests that it’s usually best to first able to create and evolve a strategy for a single offering before you move up a level and employ a product portfolio strategy. Once you have established an effective product strategizing approach—which often is challenging enough—you’ll be in a great position to transfer your learnings onto the portfolio level.\nTo remind yourself of the advice shared, download the infographic below by clicking on the image.\nNotes\n[1] The article is based on my work with different clients in different industries using different product portfolios. I use Microsoft Office, officially called Microsoft 365 at the time of writing, as a well-known example of a product portfolio, which you hopefully can relate to—even if you use an alternative like Google Workspace or Apple iWork. Note that it’s unknown to me how Microsoft manages the Office suite, and I don’t claim that the company uses an approach like the one described in this article.\n[2] Note that the sample strategy shown in Figure 2 is based on my research; it is not an official description of the Office strategy employed at Microsoft.\n[3] You therefore cannot apply the checklist I have developed for the Product Vision Board to the Portfolio Vision Board.\n[4] Figure 3 uses a single product strategy for simplicity’s sake.\n ","url":"https://www.romanpichler.com/blog/product-portfolio-strategy/?replytocom=175984"},{"date_scraped_timestamp":1710925421881,"host":"www.romanpichler.com","page_title":"Expert Training and Consulting in Product Management","text":"\n Learn from a Leading Expert\n \nRoman Pichler is an internationally renowned product management expert specialising in product strategy, leadership, and agility. Roman has coached and trained product managers and product owners and advised product leaders for nearly 20 years. He is the author of four books; he has developed a range of product management frameworks, methods, and tools; and he has written more than 190 articles on product management.\nPlease take a look at his training courses and coaching services or contact him to discuss how he can help you.\n Training\n Coaching\n ","url":"https://www.romanpichler.com"},{"date_scraped_timestamp":1710925636170,"host":"www.romanpichler.com","page_title":"Five Tips for Introducing Product Management to Your Company","text":"\n \n Published on 11th April 2016\n \n \n \n \n \n \n \n Product management plays a vital role in the digital age: it enables innovation and growth. It’s therefore not surprising that more and more companies establish product management groups—including retailers, publishers, and banks that traditionally don’t employ product managers. But successfully introducing product management is not easy: I have seen a number of businesses struggle with this challenge. This post provides five tips to help you succeed with introducing product management to your company. \n 1 Establish a Clear Vision\nEstablish a clear vision for introducing a product management group and explore why your company would benefit from it. There are a number of advantages such a group can offer, including being able to launch more products, serving the right markets and segments, providing the right features, making better product decisions faster, aligning the stakeholders more effectively, and establishing clear roles and responsibilities. But the core value proposition of product management is enabling growth:\nA product manager is responsible for making and keeping a product successful. This includes taking an idea for a new product or feature and working with development, marketing, and sales (and other business groups) to make it available to the customers and users, as well as killing a product if product success cannot be achieved. Without qualified product managers and a dedicated product management function, product decisions are not made effectively in my experience; time, energy, and money are wasted. In other words, product managers are key to achieving sustained organic growth.\n2 Secure Management Buy-in\nIntroducing a new product management group is not trivial. Instead, it requires organisational changes that have to be supported by executive management. To put it differently, if the executives don’t buy into creating a product function and if they don’t sponsor—and to some extent—lead the effort, then the chances of establishing the new group are slim.\nTo get executive management on your side, help them understand how a product management group would benefit the company. But don’t stop there: address how the managers would benefit from the change and how it would impact their jobs. The personal benefits can include higher salaries (assuming that these are linked to the company performance and that the new group will increase growth) and reduced workload by allowing the executives to focus on the business strategy.\nThis requires, however, that the executives are willing to grant decision-making authority to the product managers and trust them to manage the company’s products. Management still retains some control, though, by sponsoring new and existing products; product roadmaps and key performance indicators help the managers understand how the products are performing and decide how much funding they should receive.\nFinally, help the executive team decide where product management should sit within the organisation. I have seen product management groups embedded in marketing and in development, for example. But I prefer product management as a separate, major business function that is equal to marketing, sales, and development. This recognises the importance of the group and helps the product managers do a great job. The head of product should therefore be a member of the executive team.\n3 Involve the People Whose Jobs Change\nIntroducing product management will impact a number of individuals and departments. For example, if the sales group currently decides which features a release provides, then the group will be significantly affected: The product managers will now make feature and release decisions.\nPeople are likely to resist the necessary changes if they don’t understand why they are necessary, or feel that they are forced on them and that their concerns and needs are not taken into account. I therefore recommend that you involve the key people affected by introducing a product function and collaborate with them.\nIf the sales group loses decision-making power, for example, then talk to them and listen to their concerns. Show the salespeople how they can take advantage from the changes and how they can continue to influence the product and ensure that their needs are taken into account. For instance, the sales group is better able to focus on their actual job, and they can shape the product by attending product strategy and roadmap workshops and sprint review meetings.\n4 Get the Right People on Board\nA while back I worked with a company that had just established a new product management group. While the newly appointed product managers were very enthusiastic, most of them lacked important product management skills. As a consequence, they struggled to fill their roles effectively and failed to earn the respect and trust from their colleagues in marketing, sales, and development.\nTo help your newly formed group get off to a good start, make sure that the right people are on board. This often requires hiring a new head of product who has the right product management experience and leadership skills. If that’s difficult, then you may want to consider employing a temporary head of product to kick start the group.\nSimilarly, you may want to hire experienced product managers to inject the necessary product management know-how into the organisation. But don’t exclusively rely on new people. Ask current employees to join the new group. Marketers, salespeople, developers, project managers, and business analysts can make great product managers if they receive the right support and training. Staffing the group with new and existing employees ensures that product management has the right skills and knows enough about the product portfolio and the company.\nDon’t forget to identify the right training and development measures for the new product managers. For example, pairing newly hired product managers and existing employees so that they manage a product jointly is a great way to help the individuals learn from each other.\n5 Sustain the Change\nWith the right people on board and the product management group ready to start working, you have achieved a major milestone. But fully establishing product management usually requires more work: The initial introduction does not always fully succeed and people often fall back into their old habits and roles. I find it not uncommon, for instance, that executive management still wants to make strategic product decisions and that sales wants to determine the features of a release.\nYou should implement the necessary measures to permanently establish product management. This includes working with executive management and human resources to determine the right qualifications for the roles, create a training and development program including an on-boarding procedure for new product managers, and establish a career path for product managers. As Winston Churchill said, “to improve is to change; to be perfect is to change often.”\n ","url":"https://www.romanpichler.com/blog/five-tips-for-introducing-product-management-to-your-company/"},{"date_scraped_timestamp":1710925544312,"host":"www.romanpichler.com","page_title":"Getting Stakeholder Engagement Right","text":"\n \n Published on 17th November 2015\n \n \n \n \n \n \n \n Being a successful product manager or product owner requires more than building a product with the right user experience (UX) and features. If the stakeholders don’t support your product, then it will be difficult to achieve success. It is therefore important to engage the right stakeholders and to work with them in the right way. This post discusses a proven technique to analyse stakeholders, the power-interest grid, and it shares my recommendations for engaging with different stakeholder groups in the right way. \n Identify the Stakeholders\nA stakeholder is anyone who has a stake in the product, who is affected by it, or who shows an interest in it. While this definition includes customers and users, it is commonly used to refer to the internal stakeholders. Note that some frameworks, such as Scrum, have their own stakeholder definition. In Scrum, the stakeholders are all interested parties apart from the product owner, the development team, and the ScrumMaster.\nTo identify the stakeholders, ask yourself whose help you need to develop, release, and provide the product. The answer to this question will be specific to your product and company. For a commercial product, the group is likely to include representatives from marketing, sales, support, and management. But it might also comprise legal, finance, and human resources. For an in-house product, your stakeholders may be operations, the affected business units, and management.\nAnalyse the Stakeholders\nOnce you have identified the stakeholders, take the next step and analyse them to understand how you should engage with them. This focuses your efforts, generates the desired buy-in,  and allows you to spend your time wisely.\nA common stakeholder analysis technique is the power-interest grid, which was originally published by Colin Eden and Fran Ackermann in their book Making Strategy. As its name suggests, the grid assesses the stakeholders by taking into account their power and their interest. The grid assumes that stakeholders take a low or high interest in your product and that they have low or high power. A stakeholder is typically interested in the product if it noticeably affects the individual. Someone has a high power if the person can influence the product decisions, for instance, if or when a feature is implemented.\nTaking into account low and high power and interest results in four quadrants and stakeholder groups, players, subjects, context setters, and crowd, as the following picture shows.\nEach stakeholder group on the grid above requires a different engagement form, as I explain below.\nCollaborate with the Players\nStakeholders with high interest and high power are called players. These individuals are important partners for you as the product manager or product owner. You should therefore collaborate with them closely, for instance, by inviting them to product strategy and roadmapping workshops and sprint review meetings. Aim to secure their buy-in, leverage their ideas and knowledge, and establish a close and trustful relationship with them.\nAdditionally, ensure that the individuals are involved with the product on a continued basis to avoid loss of knowledge and hand-offs. It is undesirable, for instance, that the marketing group sends a new representative every time a strategy workshop or review meeting takes place. Instead, one marketer should represent the group on a continued basis.\nBear in mind that collaboration requires leadership. You should be open and collaborative but decisive at the same time. Aim to build consensus with the players but don’t shy away from difficult conversations. Don’t settle for the smallest common denominator and have the courage to make a decision if no agreement can be achieved.\nInvolve the Subjects\nSubjects are individuals with high interest but low power. They feel affected by the product and are keen to influence it but they can’t veto or change decisions. Subjects can make great allies who can help you secure understanding and buy-in for your product. Keep them engaged and involve them on a regular basis, for instance, by inviting them to sprint review meetings and encouraging them to share their feedback.\nBut don’t make the mistake to say yes to every idea and request subjects raise. Use the product strategy and roadmap to assess if an idea is helpful or not. If in doubt, consider running a brief and cheap experiment to find out if adding a feature would be beneficial, for example.\nConsult the Context Setters\nPeople with low interest but high power are called context setters or referees. They affect the product’s context but they take little interest in the product itself. An example is the person in charge of the development group: If the individual does not help staff the development team properly, then the success of the product may be at risk.\nMake sure that the context setters feel that their opinions, concerns, and ideas are heard and understood. Regularly consult them, for instance, by having one-on-one meetings. This ensures that their ideas and concerns are heard and it helps avoid nasty surprises. Don’t let the context setters intimidate you and don’t allow them to dictate decisions. Be strong and have the courage to say no even if faced with a powerful and pushy stakeholder.\nInform the Crowd\nThe crowd are stakeholders with low interest and low power. As they are not very interested in your product and don’t have the power to influence product decisions, it’s usually sufficient to keep the individuals informed, for instance, by giving them access to the product’s wiki web or update them on important developments in form of a newsletter.\nSummary\nThe following table summarises my recommendations on how to engage with the four different stakeholder groups.\nStakeholder Group\nEngagement\nFrequency\nSample Techniques\nPlayers\nCollaborate\nOnce per sprint\nCollaborative workshops including strategy and roadmap workshops, sprint review meetings\nSubjects\nInvolve\nMonthly\nSprint review meetings\nContext Setters\nConsult\nQuarterly\nOne-on-one meetings\nCrowd\nInform\nQuarterly\nNewsletter\n ","url":"https://www.romanpichler.com/blog/stakeholder-engagement-analysis-power-interest-grid/"},{"date_scraped_timestamp":1710925485465,"host":"www.romanpichler.com","page_title":"How Agile Has Changed Product Management","text":"\n \n Published on 2nd February 2021\n \n \n \n \n \n \n \n As the Manifesto for Agile Software Development celebrates its 20th anniversary, I take a look at how agile practices have influenced and changed product management. I discuss the benefits that have been achieved and the challenges that still remain. \n \nListen to this article:\nOnce Upon a Time in Waterfall Land\nBefore the advent of agile frameworks like Scrum, a product person—the product manager—would typically carry out the market research, compile a market requirements specification, create a business case, put together product roadmap, write a requirements specification, and then hand it off to a project manager. The latter would work with one or more development teams to get the specification implemented.\nDuring the development phase, the product manager would be only loosely involved, typically attending a project steering meeting and possibly issuing change requests. Otherwise, the individual would hope that the requirements were implemented as specified. Only once the product was close to being finished would the product manager return to the project and prepare the release of the product.\nThis sequential, waterfall-based approach used to work when there was little change and innovation, when product managers could correctly predict what the users needed and describe the detailed product functionality upfront. But it is less suited to create complex digital products.\nYou can also access the content of this article on my YouTube channel.\nThe Brave New Agile World\nAs agile practices have become more widely adopted, the processes used to develop products have significantly changed: Product people and development teams now tend to collaborate much more closely. Dev teams have become cross-functional consisting of UX designers, architects, programmers, testers, and other roles. Products are developed using iterative-incremental processes like Scrum. Requirements are no longer detailed and frozen before development starts but they emerge. An increasing number of organisations have moved away from organising around projects and have started to embrace a product-led approach.\nEarly user feedback, frequent solution validation: We now have the ability to collect early and frequent user and customer feedback, which helps us validate our ideas and update our plans accordingly. This has increased the chances of creating a product with the right UX and the right features.\nReduced time-to-market: We can now release new products and features more quickly. This is enabled by a closer, ongoing collaboration with cross-functional development teams, shifting from written documentation to face-to-face conversations, and using techniques such as user stories that reduce overhead—when applied correctly.\nBetter product quality and improved adaptability: The quality of our products has improved through the application of agile development practices like emergent design, test-driven development, and continuous integration. This has allowed us to adapt the product more quickly and to respond to user feedback more easily.\nBetter requirements: As product people, we are no longer solely responsible for coming up with the correct requirements. Instead, the dev team members actively participate in the product backlog refinement work and help us identify the necessary changes and capture new product backlog items. This leverages the team members’ creativity and expertise, creates a shared understanding, fosters collective ownership, improves the quality of the requirements, and ultimately results in better products.\nTransparent development progress: We can see the development progress more clearly and make corrections early if required: The progress is now based on working software rather than a detailed, Gantt chart-based project plan. This mitigates the risk of discovering late that the product cannot be shipped on time or that some features were implemented incorrectly.\nImproved alignment: Stakeholders and development teams are now better aligned through the use of regular collaborative workshops like sprint reviews. This creates a shared understanding and leads to greater commitment: Asking people about their perspectives and involving them in the process of making product decisions increases the likelihood that the individuals will support the decisions.\nMotivated productive teams: Last but not least, self-organising development teams tend to be more motivated and productive compared to traditional ones, as they are able to determine themselves how much work can be done in a given period, decide who carries out a specific piece of work, and agree on how the team members collaborate.\nOld and New Product Management Challenges\nWhile agile methods have given us plenty of benefits, a number of product management challenges still persist. These were not caused by agile practices, as far as I can tell. Agile has made them more visible, though, and it has exacerbated some of them. Let’s look at the key challenges that remain.\nLack of empowerment: When coining the Scrum terms, Ken Schwaber and Jeff Sutherland chose the term product owner instead of product manager in order to emphasise the level of authority and empowerment a product person requires—especially in an agile context where collaboration is valued, and stakeholders and dev teams regularly contribute to product decisions.\nUnfortunately, a lack of empowerment is still a common issue: Product people often don’t have the necessary authority to make strategic product decision, shape the strategy, and own the roadmap. Consequently, they are in danger of playing a tactical product role and being product backlog managers and user story writers rather than owning the product in its entirety and being able to maximise the value it creates.\nConfusion about roles and responsibilities: Even 20 years after the Manifesto for Agile Software Development was conceived, agile roles like product owner and Scrum Master are not always clearly understood, let alone effectively applied. As indicated above, product owners are sometimes mistaken for product backlog managers and stakeholder pleasers instead of the individuals who are in charge of a product and whose decisions the entire organisation must respect, as the Scrum Guide puts it.\nLack of direct interaction with users and customers: Customer collaboration is one of the four values in the agile manifesto. Nevertheless, it’s not uncommon for me to meet product people who don’t have direct access to users and customers. Instead, they solely rely on quantitative data and feedback from sales, which makes it hard to empathise with the users and customers and to fully understand their needs. This, in turn, reduces the chances of offering a product that does a great job for its target audience and generates the desired business benefits.\nProduct strategy is poorly practiced: The most beautiful user stories are useless if it’s not clear who the users are and why they would want to use the product. Acquiring this information requires focused product strategy work. Unfortunately, product strategy aren’t always effectively practiced. This is not helped by the fact that agile approaches like Scrum do not offer any tools and techniques to help product owners understand if a product should be developed. Fortunately, a number of tools and techniques have emerged in recent years that help product people with their product strategy work including my product vision board and GO product roadmap.\nLack of sustainable pace: “The sponsors, developers, and users should be able to maintain a constant pace indefinitely,” states the Manifesto for Agile Software Development. Ironically, working at a healthy, sustainable pace can be particularly challenging in an agile context: Product people have to regularly interact with development teams in order to update the product backlog, agree on sprint goals, answer questions, and provide feedback on product increments in addition to all the other product management duties. Being overworked, however, has a negative impact on our productivity and mental health. Luckily, there are a number of practical measures you can take to achieve sustainable pace. These include not covering other people jobs on a continued basis—like acting as a stand-in Scrum Master—and having the courage to decline stakeholder requests. Please see my article “Sustainable Pace in Product Management” for more guidance.\nLooking into the Crystal Ball\nSo where do we go from here? How will product management change over the next 20 years, and which role will agile methods play—if any?\nWithout having a crystal ball at my disposal, I believe that the future of product management will be shaped by our ability to address the product management challenges mentioned above. I sincerely hope that in 20 years from now, empowerment will no longer be a significant issue, product roles will be better understood and more effectively applied, and product strategy will always be practiced by anybody who manages or owns a product. I also believe that agile methods will continue to enrich product management, alongside other influences that have emerged in the last few years including Lean Startup and business modelling. \nWhile there is still plenty of work to be done, I am optimistic about the future of product management and agile.\n ","url":"https://www.romanpichler.com/blog/how-agile-has-changed-product-management/"},{"date_scraped_timestamp":1710925480329,"host":"www.romanpichler.com","page_title":"How to Choose the Right KPIs for Your Product","text":"\n \n Published on 13th April 2021\n \n Last Updated on: 19 Jun 2023\n \n \n \n \n \n \n A key challenge of working with KPIs is to select the right indicators: There are so many different metrics to choose from including daily active users, net promoter score, and profit, to name just a few. What’s more, senior managers and stakeholders can have strong views on which indicators should be used. This article helps you select the metrics that really matter and are truly helpful for your product. \n \nListen to this article:\nWhat are KPIs?\nKey performance indicators (KPIs) are metrics that measure how your product is doing. Effective KPIs help you understand if your product is creating the desired value for the users, the customers, and the business. Without KPIs, you end up guessing how well your product is performing. It’s like driving a car with your vision blurred: You can’t see if you are heading in the right direction or getting closer to your destination. You might have a hunch, but you don’t know if it is correct. Using KPIs and collecting the relevant data helps you balance intuition with empirical evidence. This increases the chances of making the right decisions and achieving product success.\nA Goal-directed Approach to Choosing KPIs\nTo select the right KPIs, I recommend taking the following three steps: First, use the user and business goals in the product strategy to select an initial set of indicators. Then take into account the product goals on the product roadmap to discover additional KPIs. Finally, choose further indicators to assess the health of your product and team. This, of course, assumes that you have a validated product strategy and a realistic product roadmap in place. If that’s not the case, then I recommend creating those two plans first.\nAs you may have noticed, I suggest using a goal-directed approach to identify the right indicators. I am not a big fan of “standard” KPIs, for example, customer acquisition cost (CAC), churn, and number of active users for SaaS products. While it’s helpful to be aware of the indicators that may be commonly used for the type of product you manage, it would be a mistake to blindly adopt them. Employing user, business, and product goals to guide the selection of KPIs avoids this mistake and it ensures that your indicators are relevant and helpful, as the following image shows. You can download the infographic by clicking on the picture.\nStep 1: Take Advantage of the Product’s User and Business Goals\nTo select the right KPIs, start with the needs and the business goals in the product strategy. Then consider how you can tell if they have been met. \nSay I want to offer a product that reduces the blood sugar levels of individuals who have type-2 diabetes and that generates £50k of revenue within the first 12 months of launching the app. I would then ask myself how I can measure that the product creates the desired user and business value. To determine the former, I might choose user feedback, customer satisfaction, and referral rate as the key performance indicators. To understand the latter, I might select monthly recurring revenue (MRR).\nNote that this approach assumes that valid user and business goals are available. In other words, the goals should be part of a validated product strategy—a strategy whose key assumptions and risks have been successfully addressed. This might have involved observing target users, interviewing them, carrying out competitor research, and using throw-away prototypes, to name just a few strategy validation techniques.\nStep 2: Use Product Goals to Discover Additional KPIs\nIn addition to deriving KPIs from the user and business goals, I like to use the product goals I have captured on the product roadmap in order to discover additional indicators. A product goal is a specific and measurable benefit or outcome your product should achieve, typically in the next two to three months. What’s more, every product goal should be aligned with the user and business goals in the product strategy, as I explain in more detail in my article “Product Goals in Scrum.”\nSay the goal of my initial product (MVP) is to allow the users to better understand their eating habits and acquire an initial user base. I would then look at the first part of this goal and ask myself if I need to introduce a new indicator. As I’ve already chosen user feedback, customer satisfaction score, and referral rate, I would not add another metric at this stage. But the second part, acquire an initial user base, would require the introduction of a new KPI in order to understand if the acquisition goal has been met. To do so, I might measure market share, for instance, by tracking the product’s position in the appropriate app store.\nStep 3: Add Health Indicators\nMeasuring how well your product is doing at meeting its user, business, and product goals is great. But it is not enough. Let’s say that my new product is meeting its revenue targets, that the user feedback is excellent, and that customer satisfaction and referral rates are high. This suggests that it is performing well, and there seems to be no reason to worry. \nBut if the team motivation is declining—as people are being overworked or stressed—or if the code quality is deteriorating—as bugs are accumulating and the code complexity is increasing, alarm bells should go off. These indicators suggest that achieving product success will be much harder in the future, due to an increase in technical debt, higher absenteeism or turnover rate. \nIt is therefore helpful to add metrics that measure how healthy your product and team are and that allow you to spot important warning signs early on so you can be proactive and respond to them in a timely manner—instead of reacting to them with the back against the wall. These indicators include product quality, schedule variances, which is the ability to meet product goals on time and budget, team motivation, team knowledge and skills, and stakeholder engagement.\nLess is More\nHaving been involved in product management for 20 years, I sometimes marvel at how much our profession has changed for the better. This includes the analytics tools we have available today. These powerful tools usually generate more data for us than we can handle. And herein lies the issue: There is no point in measuring everything that can be measured.\nUsing more KPIs than necessary and analysing data that provides no value is a waste of time. In the worst case, you act on irrelevant data and make wrong decisions. Think of driving a car. A small number of indicators are helpful for safely getting to your destination, including how fast you are travelling and how much battery/fuel is left. If the car dashboard continuously showed a range of other data, such as tyre pressure or ABS status, it would be harder to take in the relevant information and make the right decisions while driving. \nTherefore, limit the number of KPIs you use. Carefully select them by using the factors discussed above, and regularly review and adjust them. Don’t make the mistake of allowing powerful stakeholders to dictate KPIs to you. Instead, explain to them how effective product KPIs are derived, and consider inviting them to the next product strategy workshop in order to collaboratively determine the right KPIs.\n ","url":"https://www.romanpichler.com/blog/how-to-choose-the-right-kpis-for-your-product/?replytocom=115799"},{"date_scraped_timestamp":1710925627113,"host":"www.romanpichler.com","page_title":"How to Choose the Right Product Management Leadership Styles","text":"\n \n Published on 12th January 2016\n \n Last Updated on: 18 Dec 2023\n \n \n \n \n \n \n Succeeding in product management requires more than having the right product expertise. While creating a valid product strategy, developing an actionable product roadmap, and effectively prioritising features are undoubtedly important, these skills are not enough. You also have to successfully lead others and apply the right leadership styles, as I explain in this article. \n \nThere is No One Right Way to Lead \nWhen you hear the term leadership, you might first and foremost think of a senior manager like the head of product, Director of Product Management, VP of Product, or Chief Product Officer. But leadership is present when an individual guides a group of people to achieve a desired outcome. Product managers and Scrum product owners can therefore also act as leaders: They guide the stakeholders and development teams to create the desired outcomes and achieve product success. See my article Decoding Product Leadership for a more detailed explanation.\nHow you best lead others depends on the context. While many people, including myself, favour a visionary leadership style in product management—someone who leads through a shared vision—this approach style is not always helpful. Take a product in crisis that is about to miss a critical release date or has stopped working due to a major bug. This is hardly the right time to shine as a visionary leader and guide people by establishing a long-term, aspirational goal.\nAs leadership is context-dependent, it is helpful to be aware of different leadership behaviours and understand they are appropriate. Goleman’s classification of six leadership styles helps us with this. It distinguishes visionary, affiliative, democratic, coaching, pacesetting, and coercive styles. Every leadership style has its place—none is always right. Instead, they complement each other. If you want to excel as a product professional, then you should be able to apply all of them. Think of the styles as leadership tools that have their unique strengths and weaknesses.\nVisionary Leadership Style\nA visionary leader leads through shared goals including an inspiring product vision. Such a vision describes the purpose for creating the product and acts as the product’s true north that pulls people in the right direction. A visionary leader says, “come with me”, and lets people work out the details of how to get there.\nBeing a visionary leader is particularly helpful when you create a new product or a major product update. It encourages shared ownership and responsibility. It provides motivation and direction. But as mentioned before, this leadership style requires that people have the time, expertise, and willingness to figure out how to achieve an overarching goal. This is not always the case, for instance, when the product is in crisis or when people don’t buy into the vision.\nAffiliative Leadership Style\nAn affiliative leader puts people first, creates harmony, and builds strong relationships. This makes people feel appreciated and improves collaboration. What’s more, applying this leadership style helps you establish trustful relationships, and it facilitates building new teams. It is not dissimilar to servant leadership, an approach that suggests that leaders should first and foremost care for the people they lead.\nAs helpful as it can be to be an affiliative leader, recognise that caring for individuals and teams should facilitate delivering successful products and achieving the desired outcomes. Don’t make the mistake of ignoring issues and avoiding difficult conversations. Instead, tackle them in a candid and empathic way.\nAdditionally, be aware that helping the development team members bond is the job of the Scrum Master. You should therefore be careful not to take on responsibilities that belong to others and that may overwhelm you.\nDemocratic Leadership Style\nA democratic leader involves people in making decisions and builds agreement through participation. This leadership style increases responsibility and shared ownership, and it leverages the knowledge and ideas of the people you lead. It is ideal for making important product decisions that require strong buy-in and for generating and evaluating new ideas, for example, creating a new product strategy and building a product roadmap.\nBear in mind, though, that if applied incorrectly, democratic leadership can result in long-winded decision-making processes and delayed decisions. In the worst case, decisions are made by committee, and weak compromises are brokered. You should therefore make sure that people involved in the decisions share a common goal or vision. What’s more, carefully decide who to involve and which decision-making rule and process you want to employ, as I explain in more detail in the article Making Effective Product Decisions.\nCoaching Leadership Style\nWhile coaching isn’t always seen as the job of product people, it should still be part of your leadership toolkit: It helps you transfer product and domain knowledge to the development team and the stakeholders, and it is very helpful for developing junior product people.\nWhen coaching someone, make sure that the individual is open to being coached and that you provide regular feedback and guidance. Be aware that coaching is a process that requires time and commitment, as people work towards longer-term goals, for example, getting better at making strategic product decisions. If you require immediate improvements or if people aren’t happy to be coached, then the leadership style is not appropriate.\nPacesetting Leadership Style\nPacesetting means leading by example. You essentially ask others to do as you do. This leadership style establishes clear expectations and high standards. It is useful to show people how a job is done, for instance, how to create a product roadmap, write user stories, or prioritise the product backlog. And it delivers results quickly. But there is a dark side to it.\nPeople may feel overwhelmed, and they may worry that they can’t meet your expectations. They may be afraid of making mistakes and not show the necessary ownership of their actions. After all, you determine how things are done. If it doesn’t work out, then people may blame you.\nUnfortunately, that’s not all. Pacesetting means that you expect high standards of yourself and that you are never quite satisfied with your work. In the worst case, this can exhaust you and lead to burnout. As pacesetting is a double-edged sword, you should apply the leadership style with great care.\nCoercive Leadership Style\nA coercive leader acts in an authoritarian way and demands compliance. If you employ this style, then you ask people to do what you tell them. Just like the other leadership styles, it has its benefits and drawbacks. Acing in a commanding way is helpful when swift and decisive action is required, for instance, to address an emergency like the imminent danger of missing a critical release date.\nBut the leadership style requires that you can correctly identify what has to be done. What’s more, it can lead to a loss of motivation and ownership; making mistakes is not tolerated and learning is limited. As the leadership style can hurt morale, you should only use it in emergencies. Limit the time you use this leadership style to a minimum, though, and revert to a healthier approach as soon as possible.\nA big thank you to Geoff Watts for introducing me to Goleman’s leadership styles.\n ","url":"https://www.romanpichler.com/blog/product-management-leadership-styles/"},{"date_scraped_timestamp":1710925508852,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=20245"},{"date_scraped_timestamp":1710925511301,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=20246"},{"date_scraped_timestamp":1710925449813,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/"},{"date_scraped_timestamp":1710925507066,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=23569"},{"date_scraped_timestamp":1710925502267,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=140729"},{"date_scraped_timestamp":1710925519463,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=11313"},{"date_scraped_timestamp":1710925510507,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=11079"},{"date_scraped_timestamp":1710925507220,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=23408"},{"date_scraped_timestamp":1710925709628,"host":"www.romanpichler.com","page_title":"Leveraging Software Platforms","text":"\n \n Published on 11th February 2020\n \n \n \n \n \n \n \n Software platforms can be powerful tools to grow a product portfolio and create new revenue streams. But successfully using them can be tricky. This article shares my tips to help you take advantage of your platform. \n \nListen to this article:\nBe Clear on What a Software Platform Is\nDifferent people have suggested different definitions for the term software platform. Let me briefly share mine: I view such a platform as a collection of software assets that are used by several products, as the following picture illustrates. \nIn the picture above, product A, B, and C are built on the platform and use its assets. To put it differently, the platform serves three different products.\nLet’s look at two examples of successful software platforms, syngo and Amazon Web Services (AWS). The former is a platform that standardises how medical images are read, stored, and shared across MRI and CT scanners and other Siemens Healthcare products; the latter offers cloud-based services on which other products can be built, for instance, Netflix’s video streaming. In both cases, a range of products take advantage of the services the platform offers.\nUnderstand the Benefits and Drawbacks of a Software Platform\nPlatforms offer several benefits: They can help grow a product portfolio faster and cheaper and they can help increase revenue. Take a portfolio like Microsoft Office, for example. If the teams developing the different apps all created their own user-interface layers, there would be considerable code duplication, added development costs, and increased development time. \nA software platform that standardises the user interaction\nand offers additional shared services, like saving and opening files, avoids\nthese issues and allows the app development teams to focus on creating the\napp-specific functionality, rather than having to develop infrastructure code. \nWhat’s more, opening up a platform to other companies, as, for instance, Amazon did with Amazon Marketplace, can create a new revenue source and help diversify the business. In Amazon’s case, the platform enables other vendors to sell products alongside Amazon’s offerings and Amazon collects a fee for each third-party sale.\nBut platforms also have potential drawbacks. I have seen software platforms grow so big over time that they became bottlenecks and slowed down the rate at which the end-user-facing products could offer new and enhanced features. I have also witnessed a brand-new platform being retired, as it did not meet the needs of the users—the development teams who should have used it to build their products.\nAs these examples show, it is worthwhile to carefully consider if a platform can benefit your business and to choose the right approach to build and manage it and to choose the right approach in order to build and manage it.\nTreat the Platform as a Product\nWhile a software platform is a piece of technology, it creates value for the product development teams by making it easier and faster to build their products and it generates value for the business by reducing cost, accelerating development, and possibly increasing revenue. Consequently, a platform should be managed as a While a software platform is a piece of technology, it is still beneficial in my experience to treat it as a product. Consequently, a platform should have its own product strategy and roadmap, KPIs, product backlog, and well-designed software architecture that leverages the right technologies. \nMake sure, though, that the platform decisions are guided by the needs of the products it serves. After all, a platform exists to help teams build better products faster and cheaper. In other words, the platform strategy and roadmap should be derived from the strategies and roadmaps of the products that are built on it, and its architecture should be designed to make it as easy as possible to use its services.\nA software platform, therefore, is more than a set of APIs. It typically requires documentation that shows how the platform assets can be used. It may also require tools that allow teams to code against its APIs. AWS, for instance, comes with a cloud development kit that supports .NET and Java, integrates with different IDEs, and hence supports developers to develop AWS-based applications at the time of writing. \nAssign a Platform Owner\nIf we regard the platform as a product in its own right, then there should be clear ownership and an individual who manages the platform and ensures that it creates the desired value, as the following picture illustrates.\nAs a software platform is a technical, supporting product, I recommend looking for a senior developer or software architect with a strong technical background who can talk to the members of the product development teams and understand their needs as well as empathise with the end users, depending on the nature of the software platform. (This is certainly true for platforms that offer end-user-facing services.)\nAt the same time, the person should have the necessary product management skills to professionally manage the platform and ensure that it does a great job for the users—the product development teams who use its APIs—and the business. One of my clients, a games development company, successfully applied this approach to manage one of its key platform products. \nLast but not least, a platform owner also has to work with the individuals who manage the products built on top of the platform—the person in charge of products A, B, and C in the picture above—to understand their strategies and roadmaps and discuss whose needs take priority in case of conflict. \nStart Small\nCreating a software platform is a new product development (NPD)\neffort and should be managed accordingly. This is also true if you take existing\ncode and encapsulate it in the platform, as this typically requires changing or\nrewriting the software and finding an effective platform architecture. \nI therefore recommend building a Minimum Viable Platform, ideally for a small number of products. This allows you to get a first version out comparatively quickly and adapt it to the feedback of the users—the product development teams. Like other NPD initiatives, you should, of course, validate the platform as you develop it, for example, by exposing early versions of new or changed APIs to the product development teams and asking them to code against them. But like other new products, you’re likely to find out how well the platform works only once it is being used in earnest and the products have started to employ its assets.\nOnce you have shown that the platform does a great job for a small number of products, you can expand its services and serve additional products. This avoids one of the potential drawbacks mentioned earlier: launching an ambitious software platform that is too difficult to use, something I have sadly seen happening more than once.\nEnsure that the Platform is User-Led, Not Technology-Driven\nTechnical products, like software platforms, have a dark side: As they are developed by specialised teams, they can end up being over-engineered and over-complicated. In the worst case, a platform works beautifully on its own, but coding against it is painful and the overall performance of the product and platform is poor.\nThere are two techniques that can help you mitigate these risks: \n Start developing a new platform by staffing the platform development team with members from the product development teams.\n Use the solution validation techniques you would employ for an end-user-facing product, for example, sprint review meetings in which members of the product development teams participate and early releases of new or enhanced platform services which the dev team members test.\nI have successfully employed the two techniques to develop a new telco software platform, where we assembled the initial platform development team from the various product dev teams who were destined to use the platform. This ensured that the platform did a great job for the products it served, and it increased its acceptance amongst the product dev teams.\nDon’t Let the Platform Become a Bottleneck\nI once worked with an organisation that employed a software platform that became so successful that it grew bigger and bigger: It served more and more products over time and it offered more and more services. What initially looked like an amazing success story, developed into a difficult experience: The platform started to slow down the rate at which the revenue-generating products could release new and enhanced features, as an increasing number of products were competing for the platform resources. The platform had become a bottleneck.\nI hence recommend that you carefully manage the growth of your platform. In some cases, it might be better to accept some code duplication if this helps a product development team get a new feature out faster and create the desired value for the users and business. Alternatively, consider breaking up the software platform and offering platform variants that each serve a set of clients, for example, a storage platform and a media services platform.\nLike with other products, regularly review the performance of the platform and make the necessary changes to its strategy and roadmap.\n ","url":"https://www.romanpichler.com/blog/leveraging-software-platforms/"},{"date_scraped_timestamp":1710925556058,"host":"www.romanpichler.com","page_title":"Making Effective Product Decisions: Tips for Deciding with Stakeholders and Dev Teams","text":"\n \n Published on 7th June 2021\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n I am a big fan of involving the stakeholders and dev teams in important product decisions. But deciding together can be challenging: The most senior stakeholder might try to dictate the decision, the group might shy away from difficult conversations, or people might get stuck in endless debates. This article shares eight practical tips to help you avoid these pitfalls and harness the full power of collaborative decision-making. \n \nListen to this article:\nBe Clear on When to Involve the Stakeholders and Development Teams\nYou can—and should—make many business-as-usual decisions on your own. Complex and high-impact decisions, however, are best made together with the stakeholders and development teams. There are two reasons for this: First, you usually require people’s expertise to help you tackle complex issues, for instance, to understand technical risks or the impact on the ability to market and sell the product. Second, you need strong support from the stakeholders and dev team members for high-impact decisions in order to ensure that they are effectively followed through. Involving the individuals in the decision-making process show them that you value their input, and it provides them with the opportunity to influence the decision. This, in turn, makes it more likely that they will support and implement the decision.\nIn practical terms, involve stakeholders and dev teams in decisions that affect the product strategy and the product roadmap—be it that you create the plans or that you make bigger changes to them. Examples of the latter include deciding if you should pivot, address a new market or market segment, retire a product, and if you should replace the product goals or change the dates on a product roadmap. Additionally, include the development team members in product backlog decisions, and always choose sprint goals together.\nBring the Right People Together\nOnce you’ve established that a decision should be made collaboratively, carefully consider who needs to be involved in the decision-making process to ensure that the right decision is made and that it receives the necessary support. Then invite the right people to a collaborative workshop, no matter if it takes place online or onsite. A joint workshop creates transparency; it allows the individuals to understand each other’s perspectives and interests; and it frees you from having to go forth and back between the individual stakeholders and dev teams until an agreeable proposal has finally been found. \nIf you are unsure which stakeholders you should involve, then carry out a stakeholder analysis using, for example, Ackermann and Eden’s power-interest grid shown below.\nThe grid encourages you to divide the stakeholders into four groups, as I explain in more detail in my article Getting Stakeholder Engagement Right. Once you have done this, focus on the players. These are the individuals whose input you need to make the right decision, who help you progress and offer the product, and who are affected by the product and its ability to create value. For a revenue-generating product, this might be someone from marketing, sales, support, and finance.\nIf you work with several development teams, ask each team to send one or two representatives to the workshop. I find it useful to have UX design, architecture, programming, and testing skills present to make the right decision. And in a scaled environment where you share product ownership, involve the product people who work with you, for example, feature owners.\nUse a Dedicated Facilitator\nWhen you bring people together to make a decision, getting the individuals to engage in a constructive conversation can be challenging, as you might have experienced yourself. Some individuals might enjoy sharing their ideas so much that they won’t stop talking. Others might be shy and reluctant to contribute, and senior members might expect that their suggestions are followed by everyone. What’s more, you are usually required to actively contribute to the decision and share your expertise, as the person in charge of the product.\nI therefore recommend using a dedicated, skilled facilitator who runs the meeting and facilitates the decision-making process. This might be your Scrum Master, assuming that the role is filled, and that the individual has the skills required. The facilitator should establish ground rules, help people embrace a collaborative mindset, create an environment where people feel safe to speak their minds, encourage everyone to fully participate and prevent individuals from dominating, ensure that an appropriate decision rule has been chosen, and guide everyone through the decision-making process. Having a dedicated facilitator can be especially useful in an online workshop where people may need more encouragement to fully participate and stay engaged.\nLead by Example\nDeciding together becomes difficult when people act in self-centered ways and aim to maximise their personal gain, seek to dominate the discussion, or believe that they know best and that their idea must win. What’s needed to develop an inclusive solution and reach a sustainable agreement is a collaborative mindset.\nI therefore recommend that you lead by example, embrace a collaborative attitude, and show that you value the ideas and perspectives of the stakeholders and team members. The following three practices will help you with this: First, show a genuine interest in the perspectives and needs of all attendees—no matter how senior or junior they might be. Second, actively listen to the individuals, give everyone your full attention, and appreciate their contributions even if you disagree. Finally, keep an open mind. While it is important that you have your own perspective and ideas, hold them lightly. Cultivate a receptive and curious attitude and be open to what the stakeholders and development team members have to say. \nNote that attentive listening and open-mindedness do not imply approval. But they make the other person feel understood and appreciated. What’s more, they are likely to free you from being biased towards your own preconceived ideas and help you take full advantage of the collective wisdom of the group in order to make the best possible decision. \nDecide How to Decide\nImagine that you are asking the stakeholders and development team members at the end of a collaborative strategy workshop, “Is everyone OK with changing the needs statement in the product strategy?” Because nobody says anything, you assume that everyone agrees with you. But in reality, people are still thinking about the suggestion. To make things worse, it’s not clear who has the final say on product strategy changes. Is it you, the people present, or possibly the management sponsor?\nChoosing a decision rule avoids these issues. Such a rule clearly states who decides and how you can tell that the decision has been made. There are four common decision rules that facilitate group decisions: \nUnanimity: Everyone agrees with the proposed solution and is happy to endorse it.\nConsent: Nobody disapproves and has any meaningful objections.\nMajority and supermajority: More than half of the people are required to agree with a proposed solution. In the case of supermajority, more support is required, such as two-thirds or 75 per cent.\nProduct person decides after discussion: Once everybody has been heard and a shared understanding of the different ideas has been established, the person in charge of the product makes the decision.\nNote that each rule has its strengths and weaknesses; none is always appropriate. For example, unanimous agreement generates strong support for important product decisions. Achieving it, however, can take a comparatively long time. Contrast this with the rule, product person decides after discussion, which is much quicker to apply. But it may not generate particularly strong buy-in if your decision does not consider the suggestions of the stakeholders and dev team members.\nDon’t Rush Important Decisions\nWhile it can be tempting trying to quickly solve an issue and make a decision, it takes time to leverage the collective wisdom of a group and solve a complex or high-impact issue. The steps described below will help you guide a group through the decision-making process and arrive at a decision that everyone can understand and support. \nStep 1: Gather Diverse Perspectives\nMake sure that everybody clearly understands the issue to be addressed. Then ask people to share their perspectives, come up with ideas, and voice any concerns they might have, for example, by using structured brainstorming. It is essential that everyone can contribute and is being listened to. This makes people feel valued and involved, and it allows you to collect different ideas and perspectives. Resist the temptation to shortcut the process and to prematurely reach agreement at this step. Otherwise, you are likely to end up with a mediocre solution based on familiar options. \nStep 2: Build Shared Understanding\nHelp people understand each other’s views and encourage them to explore the underlying needs and interests. For example, ask the individuals to explain why an idea is important to them or why they feel strongly about a suggestion. What are their motives or concerns? Give the group the time required to develop a shared understanding, and don’t rush this step. If people don’t understand each other sufficiently, then it will be very difficult, if not impossible, to come up with a solution that everybody can accept.\nStep 3: Develop an Inclusive Solution\nOnce the group has established a shared understanding and people know the reasoning and motivation behind the different suggestions, you are ready to develop an inclusive solution. But this does not mean that you should try to please everyone by cobbling together different ideas, nor does it entail brokering a compromise or agreeing on the smallest common denominator. That’s the opposite of what a collaborative decision-making process should achieve. A truly inclusive solution addresses the needs of everyone present, move the product in the right direction, and results in a sustainable agreement—a decision that people will follow through.\nUse Data to Make Decisions\nWhile it is very helpful to have relevant experience and a solid understanding of the market, don’t make the mistake to blindly trust your gut feeling or to follow the opinion of the most senior stakeholder. Use data instead to make the decision. If you lack the relevant empirical evidence, consider pausing the decision-making process and collecting the data required. \nSay that you are thinking of addressing a new market segment and you are discussing the idea in a collaborative strategy workshop. Some of the attendees, including yourself, have experience in offering products to this segment and are in favour of developing a new product variant for this target group. But if you haven’t done any specific product strategy work and lack data to support this view, I recommend pausing the decision-making process and carrying out the necessary discovery work, for example, interviewing prospective users, and building a throw-away prototype to test your idea. Otherwise, you’ll risk deciding based on experience and beliefs—which may or may not result in the right course of action.\nSecure As Much Buy-in As Possible but Do Not Allow Stakeholders to Dictate Decisions\nWhen involving stakeholders and development teams in a decision, it’s natural to try to generate as much buy-in as possible. While I can’t emphasise enough how important it is to attentively listen to the individuals and appreciate their perspectives, ideas, and concerns, you should not make the mistake of trying to please people or allowing individuals to dominate the decision-making process. \nInstead, search for a decision that maximises the value your product creates and at the same time, is inclusive and attracts as much support as possible. But do not agree to a weak compromise. Deciding together does not mean that everybody gets their way or is necessarily super happy with every decision. It means leveraging people’s expertise, ideas, and concerns, creating a shared understanding, and finding an appropriate solution that attracts as much support as possible.\n ","url":"https://www.romanpichler.com/blog/tips-for-deciding-with-stakeholders-and-dev-teams/"},{"date_scraped_timestamp":1710925654864,"host":"www.romanpichler.com","page_title":"Nonfunctional Requirements","text":"\n \n Published on 13th March 2013\n \n \n \n \n \n \n \n This post discusses nonfunctional requirements such as performance, robustness, and interoperability, and the Ford Shelby Mustang GT500. \n I don’t know about you, but every time I read the word “nonfunctional”, I feel a yawn coming on, and I start to look for something else to do. While nonfunctional requirements or quality attributes, as they are also called, may not be sexy, they are still important: They impact the user experience, and they influence architecture and design decisions.\nSay you are looking for a new car, and you’ve found one that looks great. The car also has a powerful engine, lots of safety features, and a sat nav. But during a test drive, you discover that it’s noisy inside the cabin, the seats aren’t comfy, and the actual fuel consumption is surprisingly high. While the car has all the right features, the driving experience is not great – and that’s due to its poor nonfunctional properties.\nAnother example is the training part of my website. If the response time is sluggish, and it takes too long to receive a confirmation once a seat has been booked, then users are unlikely to have an enjoyable experience. Other common nonfunctional requirements include robustness, interoperability, usability, and compliance with a regulation or a standard.\nDiscovering Nonfunctionals\nAs important as they are, nonfunctional properties are sometimes overlooked, particularly in an agile context where we spend less time with upfront research and analysis. This can be particularly painful for those attributes that apply to the entire product. If, for instance, you forget to capture that your mobile app should be available on iOS and on Android, then this may require correcting fundamental architecture and technology choices, which is likely to delay the project or make it more expensive.\nIf you are unsure which nonfunctional requirements are important for your product, then I suggest you engage with the users and the development team. Try observing users, conducting problem interviews, and carrying out user tests using early product increments / prototypes. The tests allow you to discover new attributes and to understand if, for instance, the performance is acceptable.\nThe development team is a great partner for finding relevant nonfunctional requirements, particularly if the team members have worked on a similar product before or deal with support and production issues. If that’s not the case, then you should consider inviting members of the operations and customer services group to listen to their views on qualities such as robustness and availability.\nDescribing Nonfunctionals\nI like to capture nonfunctional requirements as constraint stories. Here is an example:\nI call the story above a constraint, as it constraints other user stories. Just like a regular story, the constraint has two parts: a narrative and a list of acceptance criteria. The narrative describes the nonfunctional requirement from the perspective of the persona Mary. The criteria clarify the interaction and describe the environment. Both are required to validate the constraint. (Tom Gilb’s Planguage, which is an alternative approach to describing nonfunctional requirements, would call the first condition “scale” by the way. The narrative contains the “target” and the “gist”.)\nWhatever format you choose to capture your nonfunctionals, ensure that the description precise and testable. If I say, for instance, that booking a training course on our website should be quick, then that’s a first step towards describing the attribute. But it would be too vague to characterise the desired user experience, to help the development team make the right architecture choices, and to validate the constraint. I will hence have to iterate over it, which is best done together with the development team.\nExplore nonfunctional requirements that apply to the entire product or to important features early on. This helps you create a great user experience, and make the right architecture and technology decisions. Capture the requirements precisely to ensure testability. And don’t rush to test-drive a Ford Shelby Mustang GT500 depicted at the top of this post. It’s not the greatest sports car on the planet – at least according to Top Gear’s Jeremy Clarkson.\nLearn More\nYou can find out more about working with nonfunctional requirements by attending my Certified Scrum Product Owner training course. Unfortunately, I won’t be able to tell you more about Mustang cars: I’ve only driven one many years ago and only for a few miles. All I remember is: It was fast.\n ","url":"https://www.romanpichler.com/blog/agile-nonfunctional-requirements/"},{"date_scraped_timestamp":1710925515068,"host":"www.romanpichler.com","page_title":"OKRs in Product Management","text":"\n \n Published on 1st December 2020\n \n \n \n \n \n \n \n OKRs—objectives and key results—have experienced a renewed popularity in recent years. Consequently, I am regularly asked if and how OKRs can be applied in product management. This article shares my thoughts. \n \nListen to this article:\nOKRs in a Nutshell\nOKRs are a method for setting and tracking goals. An objective describes what is to be achieved. The key results state how we accomplish the objective. Let’s say, for example, that the objective is to “increase engagement.” The key results might then be “daily active users are up by 20%,” “session length is increased by 10% on average,” and “the objective is achieved by 30 June 2021.”\nOKRs can be used to create cascading goals—goals that are systematically linked. This is done by using higher-level key results as lower-level objectives, as the following example shows.\nFigure 1: Sample, cascading OKRs\nIn figure 1, the key result “daily active users are up by 20%” becomes an objective with two new key results, “add feature alpha” and “implement auto login” thereby connecting the two OKRs.\nIt’s worthwhile to note that OKRs were originally invented by Andy Grove at Intel in the 1970ies to facilitate “excellent execution,” that is, to help people set hard, measurable goals and to be able to clearly determine if these have been met. And that’s exactly how I experienced OKRs when I worked at Intel in the late 1990ies.\nGoals in Product Management\nAs I explain in my book How to Lead in Product Management, setting the right goals is crucial to align stakeholders and development teams and to achieve product success. Does this mean that there is a natural fit between goals in product management and OKRs? In order to answer this question, let’s look at a set of product management goals. Figure 2 below shows the goals I recommend.\nFigure 2: A Chain of Product-related Goals\nFigure 2 contains a set of cascading goals: vision, user and business goals, product goals, and sprint goals. The vision guides the user and business goals, which are contained in the product strategy. The user and business goals help select the right product goals, which I capture on the product roadmap. A product goal, finally, helps determine the right sprint goals.\nAt the same token, a sprint goal is a step towards a product goal; achieving a product goal helps you make progress towards the user and business goals; and the latter two finally help you move closer towards your vision. (For a more detailed explanation of the goals above, please see my article “Leading through Shared Goals,” and if you would like to learn more about goal setting in product management, then check out my book How to Lead in Product Management.) \nLet’s now explore how the goals in figure 2 can be captured as OKRs.\nCapturing Product-related Goals as OKRs\nSay that I’d like to offer a product that helps people eat more healthily. I could then capture the goals shown in figure 2 as OKRs in the following way:\nFigure 3: Sample Product-related OKRs\nThere are three things in figure 3 above that I’d like to bring to your attention: First, the top-level OKRs describe vision and product strategy. The vision is the objective, and the product strategy is expressed by the key results.\nSecond, I have derived the product goal objective from the first and third key result of the top-level objective (as illustrated by the grey arrows). I have also used the first key result of the second objective to determine the third objective. This creates a set of cascading OKRs. I wasn’t able, however, to reuse higher-level key results as lower-level objectives, as shown in figure 1.\nThird, the second OKRs are the equivalent of the first entry on a goal-oriented product roadmap. If you want to work with a roadmap that looks further ahead, you will have to add additional OKRs to the ones in figure 3.\nShould You Use OKRs for Your Product?\nTo answer this question, let’s consider some major benefits and drawbacks of applying OKRs in product management, starting with the positives:\nConsistency: Using OKRs means that all goals adhere to the same format. This can be particularly helpful when OKRs are widely used in the organisation and the stakeholders and development team members are familiar with the method.Validation: Coupling objectives with key results can help you tell if and when a goal has been met.Links: Being able to use key results as new objectives is very useful, even though I was not able to take advantage of it in the sample OKRs in figure 3.\nBut I also see the following drawbacks:\nLack of visualisation: Using OKRs to capture goals leads to a rather text-heavy approach. This feels like turning back the clock and not taking advantage of the visual product management tools developed in recent years like my product vision board and GO product roadmap or Alexander Osterwalder’s business model canvas. These tools make it easier, though, to understand, validate, and evolve a product strategy, product roadmap, and business model respectively.Overuse: Objectives should be significant, concrete, and action-oriented, writes John Doerr in his book Measure What Matters. And Andy Grove pointed out that key results should be “so specific that a person knows without question whether he has completed them and done it on time or not.” While you can use OKRs to capture a vision and strategy—as I did in figure 3—it seems to me like shoehorning them into a format they don’t naturally fit into. I personally find that OKRs are best used for what they were invented for: to facilitate execution.\nShould you now use OKRs? I recommend applying them if they help you set and track the relevant goals and if the they can be easily understood by the stakeholders and development teams. If you are in doubt, experiment with the goal-setting approach and see how it works for you. Make sure, though, that you stay in charge of the product and don’t allow powerful stakeholders to dictate product OKRs to you.\n ","url":"https://www.romanpichler.com/blog/okrs-in-product-management/"},{"date_scraped_timestamp":1710925684255,"host":"www.romanpichler.com","page_title":"Prioritising the Product Backlog","text":"\n \n Published on 18th June 2010\n \n \n \n \n \n \n \n This blog posts explores four useful factors to prioritise the product backlog: value; risk and uncertainty; releasability; and dependencies. \n Why Product Backlog Prioritisation Matters\nPrioritisation requires us to decide how important an item is. If everything is high priority, then everything is equally important. This means in effect that nothing is a priority, so there is only a slim chance of delivering what the customer really needs.\nPrioritisation is part of product backlog grooming, and it directs the team’s work by focusing the team on the most important items. It also freezes the product backlog contents progressively. As items are detailed according to their priority, flexibility is built into the process and allows delaying decisions about the lower priority items, buying you more time to evaluate options, gather feedback from customers, and acquire more knowledge. This ultimately results in better decisions and a better product.\nThe reminder of this posts explores four useful factors to prioritise the product backlog: value; risk and uncertainty; releasability; and dependencies.\nValue\nValue is a common prioritisation factor. We certainly want to deliver the most valuable items first. But what makes a product backlog item valuable? My answer is simple. An item is valuable if it is necessary for bringing the product to life. If that’s not the case, the item is irrelevant; it is excluded from the current release or product version. You either de-prioritises the item and places it right at the bottom of the product backlog or better, discards it altogether. The latter keeps the product backlog concise and the development team focused. If the item is important for a future version, it will re-emerge.\nRisk and Uncertainty\nRisk is an intrinsic part of software development; no product can come to life risk-free. Correlated with risk is uncertainty. The more uncertainty there is the riskier the project is. Because risk and uncertainty influence product success, uncertain and risky items should be high priority. This accelerates the generation of relevant knowledge, drives out uncertainty, and reduces risk. For instance, if you are unsure about some aspects of the user interface design, then the relevant design options should be explored and tested by gathering feedback from users. Tackling uncertain, risky items early creates a risk-driven approach that may enforce early failure. Failing early allows you to change course while there is still the opportunity, for example, to modify the user interaction or the architecture and technology selection.\nReleasability\nReleasing early and frequently is a great way to let the software evolve into a product that customers love. It’s also an effective way to mitigate risks. If you are uncertain about if and how a feature should be implemented, then early releases can answer this question. Being able to release product increments early and frequently should therefore influence the product backlog prioritisation. Each release should provide functionality that is useful to customers and users and that generates the desired feedback. Note that it’s usually not necessary to fully implement a theme; a partial implementation is often sufficient for early releases.\nDependencies\nWether we like it or not, dependencies in the product backlog are a fact. Functional requirements, for instance, often depend on other functional and even non-functional requirements. And if several teams work together, dependencies between them can influence the prioritisation. Dependencies restrict the freedom to prioritise the product backlog and influence the effort estimates; the item others depend on has to be implemented first. You should therefore try to resolve dependencies whenever possible. If that’s not an option then the dependencies are likely to influence the product backlog prioritisation. Two dependent items may have to be implemented in the same sprint, for example.\n ","url":"https://www.romanpichler.com/blog/prioritising-the-product-backlog/"},{"date_scraped_timestamp":1710925659030,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2328"},{"date_scraped_timestamp":1710925658124,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2332"},{"date_scraped_timestamp":1710925661495,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2326"},{"date_scraped_timestamp":1710925665220,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2321"},{"date_scraped_timestamp":1710925694370,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=73410"},{"date_scraped_timestamp":1710925690785,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=108298"},{"date_scraped_timestamp":1710925479196,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/"},{"date_scraped_timestamp":1710925690105,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=102483"},{"date_scraped_timestamp":1710925448525,"host":"www.romanpichler.com","page_title":"Product Management Process Archives","text":"\n \n Everything You Need to Know about Product Portfolio Strategy\n \n Published: 22 Jan 2024\n Last Updated on: 26 Jan 2024\n \n Products often don’t exist in isolation. Instead, they are part of a product portfolio. Think of Word, Excel, and PowerPoint, which belong to Microsoft Office. Such a portfolio benefits from having a dedicated strategy—a product portfolio strategy. But what information should it contain? Which template can you use to describe it? How does it relate to the overall product portfolio management work? And who should create and update the strategy? Read on to find out my answers.\n Read more\n \n \n Leveraging New Technologies: 3 Tips for Product People\n \n Published: 3 May 2023\n Last Updated on: 10 Oct 2023\n \n Change seems to be the only constant when it comes to software technology. Over the last ten years, microservices, cloud-based computing, augmented reality, blockchain, the Internet of Things, machine learning, and artificial intelligence have emerged—to name just a few new technologies. But as product people, we are often so busy with getting new and enhanced features delivered that we risk overlooking new tech trends and being overtaken by competitors. In this article, I share three tips that help you spot new and potentially disruptive technologies early on so you can take full advantage of those that will benefit your product.\n Read more\n \n \n Succeeding with Scrum: 10 Tips for Product People\n \n Published: 14 Feb 2023\n Last Updated on: 7 Nov 2023\n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum.\n Read more\n \n \n Product Goals in Scrum\n \n Published: 9 Mar 2021\n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals.\n Read more\n \n \n How Agile Has Changed Product Management\n \n Published: 2 Feb 2021\n \n As the Manifesto for Agile Software Development celebrates its 20th anniversary, I take a look at how agile practices have influenced and changed product management. I discuss the benefits that have been achieved and the challenges that still remain. \n Read more\n ","url":"https://www.romanpichler.com/blog/category/process/"},{"date_scraped_timestamp":1710925564764,"host":"www.romanpichler.com","page_title":"Product Manager vs. Product Owner","text":"\n \n Published on 14th March 2017\n \n Last Updated on: 13 Jan 2023\n \n \n \n \n \n \n For years, people have debated what the difference between the product manager and the product owner role is, if the roles can coexist or not, and which one should be used. This article shares my thoughts on the topic and reflects on the origin of the product owner role. \n \nWhat?\nAs you might know, the product owner role originated in Scrum, where it is responsible for “maximising the value of the product …” [1] This sounds like a text-book product management responsibility to me. Nevertheless, the product owner is often regarded as a tactical role tasked with managing the product backlog, detailing requirements, and interacting with the development team. How come? \nThere are two major reasons for this misunderstanding: The nature of Scrum and the use of the role in SAFe, which is a popular agile scaling framework. Scrum as a simple framework focused on helping teams develop complex products. It is not a product management framework. Consequently, it does not cover common product management practices, such as, product strategy development, product roadmapping, business modelling and financial forecasting; and the only product management tool it offers is the product backlog.\nAdditionally, SAFe uses a product owner role which is different from the Scrum product owner. The latter has full-stack product ownership: The individual owns all aspects of a product, the vision, strategy, and tactics. But the SAFe product owner owns only the tactical product decisions and hence has partial ownership. Consequently, the role is complemented by a SAFe product manager who is outward-facing and makes the strategic product decisions, as shown in the picture below. Splitting product ownership in this way is a common scaling technique. But calling the tactical role “product owner,” as SAFe does, is an unfortunate mistake: Having two product owner roles with different levels of authority and responsibility creates confusion and gives rise to misunderstandings.\nScrum vs. SAFe Product Owner\nNote that I have always viewed the Scrum product owner as an agile product manager. I would hence not agree with the notion that the product manager role is only outward-facing and strategic in nature. Traditionally, product managers were responsible for strategic and tactical decisions, for example, creating a product roadmap and a requirements specification.\nSo What?\nSo why did Scrum introduce the product owner role in the first place? Why didn’t the framework use the term product manager? An early version of Scrum did, in fact, use the product manager role. In a paper presented at the OOPSLA conference in 1995, Ken Schwaber who is one of the creators of Scrum and the individual who mainly coined the Scrum terms, used the term product manager. [2] Subsequently, the name was changed to product owner, though. Here are three reasons for this change:\nFirst, when Scrum was developed in the 1990ies, product management was different from what it is today. Product managers used to do the upfront market research, product planning, and requirements definition work. They would then hand off a requirements specification to a project manager who would work with development and test to deliver the product. The product manager would return only to issue change requests or help with the product launch. This is in stark contrast to how things are done in an agile context, where product people are required to collaborate with development teams on an ongoing basis—without neglecting the users and the internal stakeholders.\nSecondly, Scrum is applied outside the realm of product development and commercial software products. Many organisations that have adopted Scrum like banks, retailers, and media companies traditionally don’t have a product management group and hence don’t employ any product managers. But they do use digital products that either help market and sell their revenue-generating offerings, such as an online banking app, or they develop internal software assets that are used to automate business processes, increase productivity, and reduce cost.\nBy offering the product owner role, these organisations can start working in an agile way without first having to establish a product management group and initiate an organisational change process. Instead, employees from the appropriate business units can—with some training and coaching—act as product owners. (In the long run, however, establishing a product management function may well be beneficial, as I discuss in my post Five Tips for Introducing Product Management to Your Company.)\nLast but not least, the term product owner strengthens the idea that the person in charge of the product must be empowered and respected. [3] This is particularly important in an agile context where collaboration is valued, and development team members and stakeholders frequently contribute to product decisions, for example, by discussing the latest product increment in the sprint review meeting. If no agreement can be reached, the product owner makes the necessary decision thereby avoiding a deadlock where people potentially argue for hours and days instead of running an experiment to test an idea.\nNow What?\nSo where does this leave us? My hope is that we will move past the divisive product manager-product owner debate and stop labelling people. I have worked with organisations where the product managers were desperate to be become hip agile product owners, and I’ve experienced the opposite where product owners could not wait to become product managers to finally take charge of the strategic product decisions. I, for one, have decided to follow Rich Mirnov’s lead and prefer to use the term product people. [4]\nIn the short run, we should acknowledge that the product owner is a product management role. People playing the role should therefore acquire the relevant product management skills. This includes the necessary strategic and tactical skills and the appropriate leadership capabilities. As product management is a complex, multi-faceted discipline, it takes time and effort to become a well-rounded product professional—usually months and years rather than days and weeks.\nAdditionally, I recommend using either the term product manager or product owner in your company and qualifying it, for instance, by employing the terms senior and junior product manager or junior and senior product owner. This reduces confusion and helps unite people. (See my article Six Types of ‘Product’ Owners for additional product roles.)\nAt the end of the day, it’s the good we do for our users and businesses that truly matters, not our job roles and titles.\nNotes\n[1] The quote is from the Scrum Guide 2020. Scrum was first used at Easel Corporation in 1993 to create a “design and analysis tool” according to Jeff Sutherland, see “Inventing and Reinventing SCRUM in Five Companies.” The first Scrum product owner, Don Roedner, had full-stack ownership of the product as he “had to own the vision for the product, the business plan and the revenue, the road map [sic] and the release plan, and (…) a carefully groomed and precisely prioritized product backlog for the team,” Agile Product Management with Scrum, pp. xv.↩\n[2] Thanks to Peter Stevens for making me aware of use of the product manager term in Scrum.↩\n[3] Personal conversation with Dave West, CEO of scrum.org, on 11 July 2019.↩\n[4] Thanks to Rich Mirnov for introducing the term to me.↩\n ","url":"https://www.romanpichler.com/blog/product-manager-vs-product-owner/"},{"date_scraped_timestamp":1710925520028,"host":"www.romanpichler.com","page_title":"Refining the Product Backlog","text":"\n \n Published on 15th February 2010\n \n Last Updated on: 9 May 2023\n \n \n \n \n \n \n Product backlog refinement, or grooming, plays an important part in delivering a product. Done correctly, it increases the chances of offering a successful product. This article shares my tips to help you effectively refine your product backlog. \n \nWhy does Product Backlog Refinement Matter?\nProduct backlog refinement, also called product backlog grooming, is the set of activities necessary to make detailed product decisions based on the feedback you have received, update the backlog accordingly, and get it ready for the next sprint. It’s an ongoing process, as your product backlog is likely to change based on the learning obtained from developing software and exposing it to customers, users, and other stakeholders, as the image below illustrates.\nRefining the product backlog helps you capture the latest insights and it ensures that you develop a product with the right user experience and features. It also makes sure that the product backlog is workable, that it is prioritised, and that there are enough ready items to start the next sprint.\nWhat does Refinement Entail?\nGrooming the product backlog consists of the following steps, which are described in more detail in my article “The Product Backlog Refinement Steps“:\nAnalyse feedback / data from users, customers, and internal stakeholders.\nIntegrate the learning.\nDecide what to do next.\nRefine the items.\nGet the high-priority items ready for the next sprint.\nCarrying out the grooming steps should result in a product backlog that is DEEP: detailed appropriately, emergent, estimated, and prioritised. You should also ensure that your backlog is concise and visible for everyone involved in the development effort. A concise product backlog allows to effectively integrate the insights gained. A visible backlog encourages creative conversations.\nWho should Carry out the Refinement Work?\nRefining the product backlog should be a collaborative effort that involves the product owner and the cross-functional development team. This allows you to leverage the team’s knowledge and creativity, including taking into account technical feasibility and risks; it increases the team’s understanding of the product backlog items and generates buy-in for the backlog changes; it reduces your workload as the product owner, and helps ensure that the high-priority items are ready.\nWhen should Refinement Take Place?\nRefinement activities can take place before new development work starts or while it is being carried out, for instance, during the next sprint. If you require user and customer feedback to ensure that you are taking your product in the right direction, then you should first obtain the relevant data, analyse it, and integrate the new insights into the product backlog before you continue coding. You can find out more about the right time to groom you backlog in my post “When should Product Backlog Refinement Take Place?“.\nWhere is the Initial Product Backlog Derived from?\nYou may have noticed that the refinement steps above start with “Analyse the customer and user feedback”. This implies that we have already built a first product increment. But how can we bootstrap the process and create the initial product backlog?\nI like to derive the inaugural backlog from a product roadmap, as the picture below illustrates. The product roadmap describes the journey you want your product to take including major releases, goals, key features, and dates.\nI discuss the relationship between the product backlog and the product roadmap in more detail in the article “The Product Roadmap and the Product Backlog“.\nHow much Time does Refinement Require?\nTo answer this question, it is helpful to take into account the life cycle stage of your product and the sprint duration. The more stable and mature your product is, the lower the refinement effort tends to be in the sprints. The reason for this is that there are less unknowns and risks and you rely less on feedback and experimentation to discover the right requirements. The following picture illustrates this correlation. (I discuss choosing the right level of detail in the product backlog in my article “How Detailed should the Product Backlog be?“.\nThe second factor is the duration of your sprints. I find that a two-week sprint usually requires 2-4 hours of focussed refinement work that involves the Scrum product owner and the development team.\nWhich Tools and Techniques are Helpful?\nI like to work with my Product Canvas, a structured, multi-dimensional product backlog. The canvas allows me to capture all relevant aspects of a product, which is particularly helpful for new products and for product updates aimed at new markets.\nA great way to do the refinement work is to organise a product backlog workshop. The workshop involves the Scrum product owner and the development team, and carries out the five steps listed above.\n ","url":"https://www.romanpichler.com/blog/grooming-the-product-backlog/"},{"date_scraped_timestamp":1710925542213,"host":"www.romanpichler.com","page_title":"Refining the Product Backlog","text":"\n \n Published on 15th February 2010\n \n Last Updated on: 9 May 2023\n \n \n \n \n \n \n Product backlog refinement, or grooming, plays an important part in delivering a product. Done correctly, it increases the chances of offering a successful product. This article shares my tips to help you effectively refine your product backlog. \n \nWhy does Product Backlog Refinement Matter?\nProduct backlog refinement, also called product backlog grooming, is the set of activities necessary to make detailed product decisions based on the feedback you have received, update the backlog accordingly, and get it ready for the next sprint. It’s an ongoing process, as your product backlog is likely to change based on the learning obtained from developing software and exposing it to customers, users, and other stakeholders, as the image below illustrates.\nRefining the product backlog helps you capture the latest insights and it ensures that you develop a product with the right user experience and features. It also makes sure that the product backlog is workable, that it is prioritised, and that there are enough ready items to start the next sprint.\nWhat does Refinement Entail?\nGrooming the product backlog consists of the following steps, which are described in more detail in my article “The Product Backlog Refinement Steps“:\nAnalyse feedback / data from users, customers, and internal stakeholders.\nIntegrate the learning.\nDecide what to do next.\nRefine the items.\nGet the high-priority items ready for the next sprint.\nCarrying out the grooming steps should result in a product backlog that is DEEP: detailed appropriately, emergent, estimated, and prioritised. You should also ensure that your backlog is concise and visible for everyone involved in the development effort. A concise product backlog allows to effectively integrate the insights gained. A visible backlog encourages creative conversations.\nWho should Carry out the Refinement Work?\nRefining the product backlog should be a collaborative effort that involves the product owner and the cross-functional development team. This allows you to leverage the team’s knowledge and creativity, including taking into account technical feasibility and risks; it increases the team’s understanding of the product backlog items and generates buy-in for the backlog changes; it reduces your workload as the product owner, and helps ensure that the high-priority items are ready.\nWhen should Refinement Take Place?\nRefinement activities can take place before new development work starts or while it is being carried out, for instance, during the next sprint. If you require user and customer feedback to ensure that you are taking your product in the right direction, then you should first obtain the relevant data, analyse it, and integrate the new insights into the product backlog before you continue coding. You can find out more about the right time to groom you backlog in my post “When should Product Backlog Refinement Take Place?“.\nWhere is the Initial Product Backlog Derived from?\nYou may have noticed that the refinement steps above start with “Analyse the customer and user feedback”. This implies that we have already built a first product increment. But how can we bootstrap the process and create the initial product backlog?\nI like to derive the inaugural backlog from a product roadmap, as the picture below illustrates. The product roadmap describes the journey you want your product to take including major releases, goals, key features, and dates.\nI discuss the relationship between the product backlog and the product roadmap in more detail in the article “The Product Roadmap and the Product Backlog“.\nHow much Time does Refinement Require?\nTo answer this question, it is helpful to take into account the life cycle stage of your product and the sprint duration. The more stable and mature your product is, the lower the refinement effort tends to be in the sprints. The reason for this is that there are less unknowns and risks and you rely less on feedback and experimentation to discover the right requirements. The following picture illustrates this correlation. (I discuss choosing the right level of detail in the product backlog in my article “How Detailed should the Product Backlog be?“.\nThe second factor is the duration of your sprints. I find that a two-week sprint usually requires 2-4 hours of focussed refinement work that involves the Scrum product owner and the development team.\nWhich Tools and Techniques are Helpful?\nI like to work with my Product Canvas, a structured, multi-dimensional product backlog. The canvas allows me to capture all relevant aspects of a product, which is particularly helpful for new products and for product updates aimed at new markets.\nA great way to do the refinement work is to organise a product backlog workshop. The workshop involves the Scrum product owner and the development team, and carries out the five steps listed above.\n ","url":"https://www.romanpichler.com/blog/refining-the-product-backlog/"},{"date_scraped_timestamp":1710925444402,"host":"www.romanpichler.com","page_title":"Roman Pichler's Product Management Blog","text":"\n \n The Strategy Stack: Connecting Business, Product, and Technology Strategy\n \n Published: 12 Mar 2024\n \n For any business to succeed, it is crucial to make the right strategic choices. To achieve this, you’ll benefit from using four different types of strategies: business, portfolio, product, and technology strategy. But that’s not enough. You’ll also have to successfully align the plans. To help you address these challenges, I have developed a new framework, the Strategy Stack, which I introduce in this article.\n Read more\n\t\n \n 3 Empowerment Levels in Product Management\n \n Published: 19 Feb 2024\n \n Being empowered can make all the difference in doing a great job. Sadly, not all product people have the authority they need. This observation is hardly new, though, and just wishing for more empowerment isn’t enough. In this article, I explain what empowerment in product management really means. I help you determine how empowered you are, and I share specific tips to increase your empowerment.\n Read more\n\t\n \n Everything You Need to Know about Product Portfolio Strategy\n \n Published: 22 Jan 2024\n Last Updated on: 26 Jan 2024\n \n Products often don’t exist in isolation. Instead, they are part of a product portfolio. Think of Word, Excel, and PowerPoint, which belong to Microsoft Office. Such a portfolio benefits from having a dedicated strategy—a product portfolio strategy. But what information should it contain? Which template can you use to describe it? How does it relate to the overall product portfolio management work? And who should create and update the strategy? Read on to find out my answers.\n Read more\n\t\n \n Product Strategy and Product Discovery\n \n Published: 4 Dec 2023\n Last Updated on: 1 Mar 2024\n \n Product discovery has become increasingly popular in recent years as a way to determine the right solution. In this article, I explain why you need a product strategy to succeed with product discovery, how the strategy helps you determine the right outcomes and opportunities, and how you can use the Product Vision Board to build an Opportunity Solution Tree. \n Read more\n\t\n \n Decoding Product Leadership\n \n Published: 6 Nov 2023\n Last Updated on: 21 Nov 2023\n \n Strong product leadership is crucial to offering successful products and enabling product-led growth. Unfortunately, there is disagreement and confusion about what exactly product leadership is and who should exercise it. Is product leadership limited to someone working as a head of product? Or can—and should—others lead in product management too? In this article, I share my advice to help you effectively practise product leadership and become great at leading others.\n Read more\n\t","url":"https://www.romanpichler.com/blog/"},{"date_scraped_timestamp":1710925534595,"host":"www.romanpichler.com","page_title":"Scaling the Product Owner Role","text":"\n \n Published on 28th June 2016\n \n \n \n \n \n \n \n In theory, the product owner is one person. But in practice, managing a larger, complex product is usually a shared effort. But how can product ownership be split without resulting in decisions by committee and creating a weak or even inconsistent product? In this post, I discuss different techniques to help you scale the product owner role successfully and I explain when each technique should be applied. \n Scaling and the Product Life Cycle\nTo understand if and when the product owner role should be scaled, I find it helpful to consider the product’s life cycle stage. As long as a product is young and hasn’t reached product-market fit—or is close to achieving it—I recommend having a single person in charge of the product. Here is why: Young products tend to require a significant amount of experimentation and rework in order to get the product launched, adapt it to the feedback of the early market, and get it ready for product-market fit. At this stage, effective decision-making is paramount. Having a single product owner in place supports this: if no consensus can be achieved about what to do next, the product owner decides. Having one person in charge of the product is viable, as it is usually comparatively small and only a small number of development teams—one or two—are likely to develop it at this stage.\nBut once the product is becoming more successful and start growing, once it attracts more features and becomes richer and requires more teams to develop it, a single person can usually no longer manage the product—without being overworked or neglecting some responsibilities. What’s more, the product now changes less frequently and radically, which makes it easier to share responsibilities amongst a group of product people, as the picture below shows.\nScaling Option 1: Feature and Component Owners\nOnce you’ve achieved product-market fit and entered the growth stage, you should consider sharing the product work by asking other people to own product features and / or components. I view a feature as a product capability, such as, the ability to search for a product on a website, and a component as an architecture building block, for instance, the data access layer. (I discuss the difference between products, features, and components in more detail in my post What is a Digital Product?)\nThe initial product owner should be in charge of the overall product, take care of the product strategy and roadmap, and manage the stakeholders, but still be involved in managing the product backlog and making prioritisation decisions. The feature and component owners manage their assets: they capture new ideas and requirements, test them using feedback and data, and collaborate with the teams developing the features and components. The following picture illustrates this approach.\nScaling Option 2: Unbundling and Product Variants\nThe alternative to sharing the responsibility of managing a product is to break up the latter. A common technique to do this is unbundling a feature and releasing it as a separate product—like Facebook did with the Messenger app in 2004. This reduces the scope of the original product and it creates a brand-new one, managed by a new product owner and developed by its own team(s).\nAnother technique is creating product variants—think of iPod shuffle and iPod Touch, for example. Applying this technique avoids feature bloat of the original product; and similarly, to unbundling, it introduces new offerings that are looked after by their own product owners and built by their own teams, as the picture below illustrates.\nYou can, of course, combine option one and two, and first introduce feature owners in addition to an overall product owner and then spin-off features or create variants.\nScaling Option 3: Strategic and Tactical Product Roles\nThe third option to scale product ownership is to introduce a strategic and a tactical product role. The strategic role is sometimes called product manager and the tactical one is referred to as product owner, even though in Scrum, the product owner role comprises both, strategic and other responsibilities. Otherwise, a Scrum product owner cannot maximise the value her or his product creates.\nFrameworks like SAFe use this option as a default, but I recommend you apply it carefully: Splitting product responsibilities along the strategic-tactical dimension works well if a tight integration of strategic and tactical decisions is not required. This is typically the case when the product has entered maturity: it is now incrementally enhanced to defend market share and maximise its business benefits; bigger changes are unlikely to occur—unless you decide to extend its life cycle, for instance, by taking to a new market or segment.\nIf you use this scaling option at an earlier life cycle stage, then you face the risk of strategic decisions not effectively guiding tactical ones, as well as tactical insights, such as user feedback on specific features or a slower than anticipated development progress, not informing the strategic decisions, particularly when several people take on tactical duties and / or the individuals responsible for strategic and tactical decisions don’t work together very closely.\nComparing the Options\nHow do the three scaling options compare? The following table summarises my recommendations about when they should be used.\nOption\nWhen to Use it\nSingle product owner\nBefore product-market fit\nProduct and feature owners\nFrom close to product-market fit to reaching maturity\nProduct variants and unbundling\nStrategic and tactical product roles\nWhen the product is stable/mature\nAs the table above shows, you should not rely on one scaling technique. Instead, consider the life cycle stage of your product and select the technique that’s most likely to help you achieve or sustain product success.\n ","url":"https://www.romanpichler.com/blog/scaling-the-product-owner/"},{"date_scraped_timestamp":1710925575552,"host":"www.romanpichler.com","page_title":"Should Product Roadmaps Have Dates?","text":"\n \n Published on 4th June 2019\n \n Last Updated on: 20 Dec 2023\n \n \n \n \n \n \n Whether product roadmaps should show dates is a controversial topic in product management. Some people passionately argue that dates should be banned from roadmaps. Others claim that they are useful. This article discusses the pros and cons of using dates on product roadmaps to help you decide which option is right for you. \n \nProduct Roadmaps in a Nutshell\nTo start with, let’s briefly recap what a product roadmap is. A roadmap is a high-level plan that states how a product is likely to evolve over the next six to 12 months. An effective, modern product roadmap focuses on the outcomes and benefits a product should provide. In other words, it is outcome-based and goal-oriented. This differs from a traditional approach, which maps features onto a timeline.\nFor more advice on working with outcome-based product roadmaps, watch the following video.\nWhy Dates on Roadmaps Are Beneficial\nStating dates and specific time frames on a product roadmap can be helpful for two main reasons: They allow you to state deadlines and check if your plan is realistic and actionable.\nCapture Deadlines\nSome products must obey deadlines or a specific window of opportunity to achieve success. Take, for example, seasonal products like games and smartphones, whose main sales tend to take place before Christmas. Having the products ready on time is essential, as a delay would have a significant revenue impact. But even non-seasonal products can be subject to deadlines. For instance, in the case of imaging healthcare devices, a working prototype usually has to be available at the RSNA’s annual meeting to announce and then be able to launch the product, as far as I know.\nSimilarly, I’ve experienced hard deadlines for internal, supporting products like a supply line management application that had to be released at a specific date to achieve the desired benefits. Sometimes it even makes sense to employ a release train and timebox major product releases, for example, to coordinate different products or regularly offer improvements to the users.\nEnsure the Roadmap is Realistic\nEven if your product is not affected by any deadline, it may be helpful to consider dates or time frames when developing a product roadmap, as this allows you to understand if the plan is realistic. A handy tool for this job is the Iron Triangle shown below.\nThe version of the triangle depicted above takes into account goal attainment, date or time frame, and budget. Quality as the fourth factor that influences product success is placed in the middle to indicate that it should be fixed. Please note that one of the triangle’s vertices must always stay flexible and act as a release valve to account for unforeseen events, also known as Sod’s Law. To decide which vertices can be flexed, perform an informal impact analysis. Ask yourself if it would it be better to:\nStick to the goal but take more time to reach it or increase the budget by adding more people (if that’s helpful and possible)?\nOr should you adjust the goal to make it less ambitious but adhere to the date or time frame and the budget?\nConsidering these questions makes it more likely to create a product roadmap that can be actioned and it sets the expectations of the stakeholders. (For more information on the Iron Triangle and how you can determine dates and budget, please refer to my book Strategize.)\nWhy Dates on Roadmaps Are Not Helpful\nUsing dates on product roadmaps can create unrealistic expectations and expect teams to commit for unacceptably long timeframes: Users, customers, and sales people may regard target dates as a firm promise or commitment and insist that these are adhered to—no matter how fast the development progress is.\nThis can create a significant amount of pressure for the person in charge of the product and the development team; it can result in an unhealthy work environment and unsustainable pace where teams work long hours or product quality is compromised. In the worst case, a severely compromised product is shipped, a product that doesn’t properly address the user needs and is full of bugs making it expensive and difficult to enhance and adapt it.\nNow What?\nDates on a product roadmap are neither good nor bad per se. As with many other things, it depends on how you use them and the context you are in.\nWhenever you work with an external, customer-facing product roadmap, I recommend not showing any specific dates. Instead, use timeframes that are big enough, so you don’t experience a death-march situation as described above. For example, you might want to choose six-months timeframes, or even more coarse-grained, annual ones like “this year” and “next year”.\nBut when you work with an internal product roadmap that aligns development team and stakeholders, I would encourage you to consider stating dates or narrow timeframes, as this helps you ensure that the plan is realistic and clearly express deadlines (if applicable).\nIn either case, make sure that creating a product roadmap is a collaborative exercise that involves the development team and stakeholders, preferably in form of a joint roadmap workshop. This ensures that everyone has the opportunity to contribute to the plan and that people are aware of their mutual concerns and interests. What’s more, it creates stronger support for the product roadmap and better alignment of the dev team and stakeholders.\nLast but not least, don’t forget to regularly review and adjust your roadmap together with the development team and stakeholders—at least once every quarter, as a rule of thumb. A product roadmap is a living document; it has to be regularly updated to account for the development progress, user data and feedback, and changes in the overall product strategy.\n ","url":"https://www.romanpichler.com/blog/should-product-roadmaps-have-dates/"},{"date_scraped_timestamp":1710925742408,"host":"www.romanpichler.com","page_title":"Sprint Planning Tips for Product Owners","text":"\n \n Published on 4th September 2018\n \n \n \n \n \n \n \n As its name suggests, the sprint planning meeting sets up the sprint and establishes what can be done. While it’s an important meeting, I find that some product owners struggle with it. The following tips help you reflect on how you use the meeting and discover how you can get the most out of it. \n Come Prepared\nMake sure you carry out the necessary prep work prior to the sprint planning meeting. Be clear on what you want the sprint to achieve, ensure that the product backlog is appropriately refined (or groomed), and have its high-priority items ready. This is necessary for the following two reasons:\nFirst, if you start sprint planning without a properly prepared product backlog, you are likely to perform backlog and planning work in a comparatively short, time-boxed meeting. This makes the sprint planning work challenging, and it can leave the development team feeling exhausted and stressed rather than motivated to start the new sprint.\nSecond, once the planning is done and a sprint goal has been agreed, you cannot, or at least should not, change the sprint contents: Sprints are protected from changes in order to allow the team to work in a focused manner and do a good job.\nBear in mind that product backlog grooming should be a team effort and that you should involve the development team members in the backlog work. For advise on when to carry out product backlog grooming, please see my article “When should Product Backlog Grooming Take Place?”.\nFocus on the Sprint Goal\nWhile there are numerous planning techniques available to determine how much work can be done in a sprint—from using net hours to velocity-based planning, you should not have to worry about how the team plans. It’s up to the team to choose the right planning techniques and determine the right tasks, and it’s up to the Scrum Master to support the team members and suggest appropriate techniques when necessary. As the product owner, you should focus on establishing a shared, meaningful sprint goal that guides the work of the team and explains why the work is carried out. If you don’t have a Scrum Master, then that’s an issue that needs to be addressed: Taking on Scrum Master duties is likely to either overwhelm you and / or cause you to neglect some of your product management responsibilities, as I explain in “Every Great Product Owner Needs a Great Scrum Master“.\nA sprint goal might address a specific risk and help you acquire the relevant knowledge, or it might be about completing or optimising a piece of functionality. An example of the former would be “Find out if users are willing to share personal data as part of the initial registration process” to address a user-interaction risk. An example for the latter might be “Finish the dashboard so it can be released to the test users”. If you work with release goals, which is something I usually encourage, then every sprint goal should be a step towards the next release goal.\nWhile my experience suggests that many product owners don’t use sprint goals, I find them tremendously helpful. They provide purpose and alignment; they facilitate stakeholder communication; and they make it easier to analyse and action the data obtained from exposing a product increment to the users. But to fully leverage sprint goals, you must ensure that they are meaningful to the development team so that people support them.\nIf you believe, for example, that addressing a user interaction or pricing-related risk should be the goal of the sprint, but the dev team insists on first addressing a crucial technical risk, then it may not be a good idea to force your goal onto the team. Instead, search for an inclusive and shared goal that everyone agrees with. Alternatively, use two separate goals, as long as this is the exception and not the norm: Working with one shared sprint goal is the default in Scrum, as this fosters close teamwork and collaboration. Additionally, it tends to make it easier to collect and analyse the relevant user feedback.\nI like to identify a candidate sprint goal as part of the grooming work. This avoids the risk of starting sprint planning without a firm idea why the sprint should be carried out. Once a shared goal has been agreed, the development team performs the planning work and validates if the goal is realistic. If that’s not the case, then you will have to adjust the goal and make it less ambitious until it fits into the sprint. You can download my sprint goal template, which helps you formulate clear and testable sprint goals.\nBe Present\nAs the product owner, you may have many duties competing for your time and attention; attending yet another sprint planning meeting might not be your highest priority. While that’s understandable, I recommend that you make an effort to be present during the entire meeting. Be in the same room as the development team if you can. Alternatively, attend via a videoconference.\nThere are three reasons for this: First, the sprint planning meeting is where the rubber hits the road. It determines what actually gets done, what is implemented in the coming days and weeks. By being present you can guide the development team and answer questions. This helps the team do a great job and reduces the need for you to answer questions during the sprint, which in turn, frees up your time to take care of other duties like competitor analysis and other strategic work. And having attended plenty of sprint planning meetings over the years, I find that new questions often arise when the development team members analyse the product backlog items and break them into tasks.\nSecond, as mentioned before, it may turn out that the initial sprint goal is not realistic and therefore has to be adjusted. If you are not present, then you won’t be able to influence and contribute to reshaping the goal. Additionally, you may want to understand why the goal cannot be reached so you can learn from it.\nLast but not least, by being present you show the team that you care and that the sprint is important to you. This increases people’s motivation to gave a successful planning meeting and a successful sprint.\nRespect the Team’s Right to Say No, but Hold People Accountable\nSoftware development is an exciting but demanding profession. While I don’t want to overdramatise, I have met several people who have suffered from heart attacks and lasting food intolerances due to the high stress levels they experienced. Consequently, agile methods promote sustainable pace: The work load and intensity have to be sustainable over an extended period of time resulting a healthy work environment that fosters creativity and innovation. Scrum ensures sustainable pace by empowering the development team members to determine the right work load for a sprint. Consequently, if it turns out that not all of the high-priority items related to the sprint goal can get done, the team has the right to push back and decline taking on the appropriate items.\nWhile you might feel that fully meeting the sprint goal is a must—you might face some challenging stakeholder expectations or you might have promised certain features, for example—you should refrain from trying to force more work onto the team. This will damage the team’s ownership and responsibility; the team will no longer feel fully accountable for reaching the sprint goal, as you essentially dictate it. In the worst case, people lose interest and motivation, and no longer care about the product.\nAt the same token, hold the development team accountable for meeting an agreed sprint goal at the end of the sprint in the sprint review meeting. If the team has the right to determine how much work they can take on, then people also have the obligation to meet the goal. But don’t mistake a commitment for a guarantee. Unforeseen things can happen in software development including people falling ill and a server going down. Additionally, newly formed teams often require some time to be able to realistically plan and reliably reach the sprint goals. But if your team has not learnt to make realistic commitments after three or four sprints, or if your team regularly fails to get all the product backlog items done that were pulled into the sprint, then use the next sprint retrospective to investigate and eliminate the causes.\n ","url":"https://www.romanpichler.com/blog/sprint-planning-tips-for-product-owners/?replytocom=3180"},{"date_scraped_timestamp":1710925729685,"host":"www.romanpichler.com","page_title":"Sprint Planning Tips for Product Owners","text":"\n \n Published on 4th September 2018\n \n \n \n \n \n \n \n As its name suggests, the sprint planning meeting sets up the sprint and establishes what can be done. While it’s an important meeting, I find that some product owners struggle with it. The following tips help you reflect on how you use the meeting and discover how you can get the most out of it. \n Come Prepared\nMake sure you carry out the necessary prep work prior to the sprint planning meeting. Be clear on what you want the sprint to achieve, ensure that the product backlog is appropriately refined (or groomed), and have its high-priority items ready. This is necessary for the following two reasons:\nFirst, if you start sprint planning without a properly prepared product backlog, you are likely to perform backlog and planning work in a comparatively short, time-boxed meeting. This makes the sprint planning work challenging, and it can leave the development team feeling exhausted and stressed rather than motivated to start the new sprint.\nSecond, once the planning is done and a sprint goal has been agreed, you cannot, or at least should not, change the sprint contents: Sprints are protected from changes in order to allow the team to work in a focused manner and do a good job.\nBear in mind that product backlog grooming should be a team effort and that you should involve the development team members in the backlog work. For advise on when to carry out product backlog grooming, please see my article “When should Product Backlog Grooming Take Place?”.\nFocus on the Sprint Goal\nWhile there are numerous planning techniques available to determine how much work can be done in a sprint—from using net hours to velocity-based planning, you should not have to worry about how the team plans. It’s up to the team to choose the right planning techniques and determine the right tasks, and it’s up to the Scrum Master to support the team members and suggest appropriate techniques when necessary. As the product owner, you should focus on establishing a shared, meaningful sprint goal that guides the work of the team and explains why the work is carried out. If you don’t have a Scrum Master, then that’s an issue that needs to be addressed: Taking on Scrum Master duties is likely to either overwhelm you and / or cause you to neglect some of your product management responsibilities, as I explain in “Every Great Product Owner Needs a Great Scrum Master“.\nA sprint goal might address a specific risk and help you acquire the relevant knowledge, or it might be about completing or optimising a piece of functionality. An example of the former would be “Find out if users are willing to share personal data as part of the initial registration process” to address a user-interaction risk. An example for the latter might be “Finish the dashboard so it can be released to the test users”. If you work with release goals, which is something I usually encourage, then every sprint goal should be a step towards the next release goal.\nWhile my experience suggests that many product owners don’t use sprint goals, I find them tremendously helpful. They provide purpose and alignment; they facilitate stakeholder communication; and they make it easier to analyse and action the data obtained from exposing a product increment to the users. But to fully leverage sprint goals, you must ensure that they are meaningful to the development team so that people support them.\nIf you believe, for example, that addressing a user interaction or pricing-related risk should be the goal of the sprint, but the dev team insists on first addressing a crucial technical risk, then it may not be a good idea to force your goal onto the team. Instead, search for an inclusive and shared goal that everyone agrees with. Alternatively, use two separate goals, as long as this is the exception and not the norm: Working with one shared sprint goal is the default in Scrum, as this fosters close teamwork and collaboration. Additionally, it tends to make it easier to collect and analyse the relevant user feedback.\nI like to identify a candidate sprint goal as part of the grooming work. This avoids the risk of starting sprint planning without a firm idea why the sprint should be carried out. Once a shared goal has been agreed, the development team performs the planning work and validates if the goal is realistic. If that’s not the case, then you will have to adjust the goal and make it less ambitious until it fits into the sprint. You can download my sprint goal template, which helps you formulate clear and testable sprint goals.\nBe Present\nAs the product owner, you may have many duties competing for your time and attention; attending yet another sprint planning meeting might not be your highest priority. While that’s understandable, I recommend that you make an effort to be present during the entire meeting. Be in the same room as the development team if you can. Alternatively, attend via a videoconference.\nThere are three reasons for this: First, the sprint planning meeting is where the rubber hits the road. It determines what actually gets done, what is implemented in the coming days and weeks. By being present you can guide the development team and answer questions. This helps the team do a great job and reduces the need for you to answer questions during the sprint, which in turn, frees up your time to take care of other duties like competitor analysis and other strategic work. And having attended plenty of sprint planning meetings over the years, I find that new questions often arise when the development team members analyse the product backlog items and break them into tasks.\nSecond, as mentioned before, it may turn out that the initial sprint goal is not realistic and therefore has to be adjusted. If you are not present, then you won’t be able to influence and contribute to reshaping the goal. Additionally, you may want to understand why the goal cannot be reached so you can learn from it.\nLast but not least, by being present you show the team that you care and that the sprint is important to you. This increases people’s motivation to gave a successful planning meeting and a successful sprint.\nRespect the Team’s Right to Say No, but Hold People Accountable\nSoftware development is an exciting but demanding profession. While I don’t want to overdramatise, I have met several people who have suffered from heart attacks and lasting food intolerances due to the high stress levels they experienced. Consequently, agile methods promote sustainable pace: The work load and intensity have to be sustainable over an extended period of time resulting a healthy work environment that fosters creativity and innovation. Scrum ensures sustainable pace by empowering the development team members to determine the right work load for a sprint. Consequently, if it turns out that not all of the high-priority items related to the sprint goal can get done, the team has the right to push back and decline taking on the appropriate items.\nWhile you might feel that fully meeting the sprint goal is a must—you might face some challenging stakeholder expectations or you might have promised certain features, for example—you should refrain from trying to force more work onto the team. This will damage the team’s ownership and responsibility; the team will no longer feel fully accountable for reaching the sprint goal, as you essentially dictate it. In the worst case, people lose interest and motivation, and no longer care about the product.\nAt the same token, hold the development team accountable for meeting an agreed sprint goal at the end of the sprint in the sprint review meeting. If the team has the right to determine how much work they can take on, then people also have the obligation to meet the goal. But don’t mistake a commitment for a guarantee. Unforeseen things can happen in software development including people falling ill and a server going down. Additionally, newly formed teams often require some time to be able to realistically plan and reliably reach the sprint goals. But if your team has not learnt to make realistic commitments after three or four sprints, or if your team regularly fails to get all the product backlog items done that were pulled into the sprint, then use the next sprint retrospective to investigate and eliminate the causes.\n ","url":"https://www.romanpichler.com/blog/sprint-planning-tips-for-product-owners/?replytocom=3178"},{"date_scraped_timestamp":1710925737047,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/?replytocom=22931"},{"date_scraped_timestamp":1710925744100,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/?replytocom=127985"},{"date_scraped_timestamp":1710925713073,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/?replytocom=150355"},{"date_scraped_timestamp":1710925710662,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/?replytocom=152841"},{"date_scraped_timestamp":1710925707263,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/?replytocom=152824"},{"date_scraped_timestamp":1710925482762,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/"},{"date_scraped_timestamp":1710925632983,"host":"www.romanpichler.com","page_title":"Technical Debt and Product Success","text":"\n \n Published on 4th December 2018\n \n Last Updated on: 2 May 2023\n \n \n \n \n \n \n Similar to a company experiencing financial debt, products can incur “technical debt”: This happens when wrong or suboptimal architecture, technology, and coding decisions are taken. Consequently, the architecture may not be as loosely coupled as it should be, and the code may be messy rather than clean. This article explains why product people should care about technical debt and it offers strategies for addressing it. \n \nWhy Technical Debt Matters for Product People\nAs the person in charge of the product, you may not be terribly concerned about how clean and well-structured the code is. But the quality of your product matters: It directly impacts your ability to achieve strategic product goals and make your products successful: Technical debt makes it hard to experiment with new ideas, release new features, and quickly respond to user feedback. [1]\nThe messier the code and the less modular the architecture is, the longer it takes and the more expensive it is to change your product. In the worst case, you have to go through a rewriting exercise where some parts or even the entire product are being redeveloped. This is similar to financial debt: When the debt is not paid back, the interest payments can multiply and eventually cripple the business.\nTechnical Debt and Your Product\nTo understand if and to what extent your product is affected by technical debt, talk to the development team, for example, in the next sprint retrospective. I find that development team members usually have a good understanding where issues in the architecture and code are.\nAdditionally, consider asking the team to collect data that shows how much technical debt there is, where it is located, and how bad it is, for example, by using code complexity, dependencies, duplication, and test coverage as indicators. There are a number of code analysis tools available that collect the appropriate data and show how adaptable the architecture and how clean the code is. [2]\nOnce you understand the amount and severity of tech debt in your product, analyse its impact on meeting the product goals and achieving product success together with the development team. Take into account the cost of delay, the cost of not addressing the technical debt now but delaying it to a future point in time. Should you, for example, continue adding new features to the product for the next six months and plan in bigger technical improvement work afterwards? Or would it be better to address the worst debt now?\nFurthermore, consider the life cycle stage of your product. Technical debt is particularly bad for new and young products: If your product has a closely-coupled architecture with lots of dependencies, if it lacks (automated) tests and documentation, or if it is full of spaghetti code, then experimenting with new ideas and adapting the product to user feedback and new trends will be difficult and time-consuming. Similarly, if you want to extend its product life cycle, you may have to first remove (some of) the technical debt before you can make the necessary changes and add new features or create a variant.\nHaving said that, it is a valid strategy to launch a minimum viable product (MVP) whose architecture, technology, and code has been intentionally compromised in order to reduce time to market—as long as the quality is good enough to adapt the product to feedback from the early market. But apply this strategy with caution: You will have to spend time addressing the technical debt incurred and putting your product on solid technical foundations. This should be done before reaching product-market fit, as you will otherwise struggle to scale up and keep your product growing.\nIf, however, your product is in maturity—or even decline—and you do not intend to extend its life cycle but focus on maximising the business benefits it generates, you probably want to carry out as little debt removal work as possible.\nOptions for Removing Technical Debt\nOnce you’ve established how much tech debt there is and how soon it needs to be addressed, you face two choices: You can either make time for a focused effort and dedicate a period of time to removing the debt, or you can carry out the work in parallel to enhancing your product and adding new functionality.\nWhenever you face a significant amount of tech debt that constitutes a barrier to innovation, you should opt for a dedicated period to remove it. Apple did this with Mac OS X Snow Leopard, which was released in 2009 after nearly two years of work. While Snow Leopard didn’t provide any new functionality, it created the foundation for future releases by improving performance and reducing the memory footprint of the operating system, for example.\nI am not suggesting that you should necessarily spend a year or more refactoring your product, as Apple did. But it can be more effective to make a concentrated effort and invest a few months, or at least a sprint or two, in cleaning up the software, as opposed to doing it in drips and drops across several releases. You intentionally slow down, so to speak, to go faster afterwards.\nIf a refactoring release is the right approach for you, then your product roadmap should reflect this: It should show a release dedicated to future-proofing the product and making the necessary technical changes.\nBut if the technical debt is not as significant and does not need to be addressed as urgently, then plan in time for removing some debt in every sprint while continuing to improve the user experience and add or enhance features. You can do this by adding tech debt remedial items to the product backlog. This makes the necessary work visible and allows you to track it across sprints and releases. Make sure, though, that the necessary work is actually carried out and requests for more functionality don’t prevent the removal of technical debt. (My article “Succeeding with Innovation and Maintenance” discusses how you can fix bugs and add new features at the same time.)\nPreventing Technical Debt\nIntentionally compromising the code quality to get a release out and accepting technical debt is all good and well as long as you actually remove the debt afterwards. Often, however, technical debt is created unintentionally in my experience.\nDigital products require ongoing attention to their architecture and code. Otherwise, the product quality will deteriorate, which leads to an increase in technical debt. This is very much like maintaining your bicycle on a regular basis, ideally after every ride. And the more you rely on your bike, the more you should care about it, clean it, and fix or replace faulty parts. The challenge is to make time for the necessary clean-up and maintenance work and view it as part of the bike riding experience, rather than a chore.\nThe same is true for digital products: Some teams feel so rushed and pressured that they repeatedly cut corners and don’t apply good software craftsmanship practices like evolutionary architecture, test-driven development, pair programming, and continuous integration. But these practices do not only help create an adaptable architecture and clean code base. Used properly, they will speed up development and allow you to release new features and functionality faster, not slower—the latter being a common misconception amongst product people in my experience. The opposite is also true: If development teams don’t apply the right practices and tools, then the software is likely to be brittle, not soft and malleable.\nIf you want to prevent future technical debt, then give your development team the time to learn, apply, and improve the right development practices. In fact, you should expect that the development team creates product increments with the right quality. A great way to do this is to employ a Definition of Done that states code complexity limits and test coverage targets, and to only accept work results that fulfil this definition.\nNotes\n[1] Technical debt is a concept originally suggested by Ward Cunningham and nicely explained by Martin Fowler. Thanks to Yves Hanoulle for encouraging me to write about it.\n[2] I recommend that you add software quality to your KPIs and routinely track it. Quality is leading indicator: If it is decreasing, then you know that changing the product will become more and more difficult unless you do something about it. Knowing if and how much technical debt is building up helps you be proactive and avoid nasty surprises.\n ","url":"https://www.romanpichler.com/blog/technical-debt-and-product-success/?replytocom=127939"},{"date_scraped_timestamp":1710925633780,"host":"www.romanpichler.com","page_title":"Technical Debt and Product Success","text":"\n \n Published on 4th December 2018\n \n Last Updated on: 2 May 2023\n \n \n \n \n \n \n Similar to a company experiencing financial debt, products can incur “technical debt”: This happens when wrong or suboptimal architecture, technology, and coding decisions are taken. Consequently, the architecture may not be as loosely coupled as it should be, and the code may be messy rather than clean. This article explains why product people should care about technical debt and it offers strategies for addressing it. \n \nWhy Technical Debt Matters for Product People\nAs the person in charge of the product, you may not be terribly concerned about how clean and well-structured the code is. But the quality of your product matters: It directly impacts your ability to achieve strategic product goals and make your products successful: Technical debt makes it hard to experiment with new ideas, release new features, and quickly respond to user feedback. [1]\nThe messier the code and the less modular the architecture is, the longer it takes and the more expensive it is to change your product. In the worst case, you have to go through a rewriting exercise where some parts or even the entire product are being redeveloped. This is similar to financial debt: When the debt is not paid back, the interest payments can multiply and eventually cripple the business.\nTechnical Debt and Your Product\nTo understand if and to what extent your product is affected by technical debt, talk to the development team, for example, in the next sprint retrospective. I find that development team members usually have a good understanding where issues in the architecture and code are.\nAdditionally, consider asking the team to collect data that shows how much technical debt there is, where it is located, and how bad it is, for example, by using code complexity, dependencies, duplication, and test coverage as indicators. There are a number of code analysis tools available that collect the appropriate data and show how adaptable the architecture and how clean the code is. [2]\nOnce you understand the amount and severity of tech debt in your product, analyse its impact on meeting the product goals and achieving product success together with the development team. Take into account the cost of delay, the cost of not addressing the technical debt now but delaying it to a future point in time. Should you, for example, continue adding new features to the product for the next six months and plan in bigger technical improvement work afterwards? Or would it be better to address the worst debt now?\nFurthermore, consider the life cycle stage of your product. Technical debt is particularly bad for new and young products: If your product has a closely-coupled architecture with lots of dependencies, if it lacks (automated) tests and documentation, or if it is full of spaghetti code, then experimenting with new ideas and adapting the product to user feedback and new trends will be difficult and time-consuming. Similarly, if you want to extend its product life cycle, you may have to first remove (some of) the technical debt before you can make the necessary changes and add new features or create a variant.\nHaving said that, it is a valid strategy to launch a minimum viable product (MVP) whose architecture, technology, and code has been intentionally compromised in order to reduce time to market—as long as the quality is good enough to adapt the product to feedback from the early market. But apply this strategy with caution: You will have to spend time addressing the technical debt incurred and putting your product on solid technical foundations. This should be done before reaching product-market fit, as you will otherwise struggle to scale up and keep your product growing.\nIf, however, your product is in maturity—or even decline—and you do not intend to extend its life cycle but focus on maximising the business benefits it generates, you probably want to carry out as little debt removal work as possible.\nOptions for Removing Technical Debt\nOnce you’ve established how much tech debt there is and how soon it needs to be addressed, you face two choices: You can either make time for a focused effort and dedicate a period of time to removing the debt, or you can carry out the work in parallel to enhancing your product and adding new functionality.\nWhenever you face a significant amount of tech debt that constitutes a barrier to innovation, you should opt for a dedicated period to remove it. Apple did this with Mac OS X Snow Leopard, which was released in 2009 after nearly two years of work. While Snow Leopard didn’t provide any new functionality, it created the foundation for future releases by improving performance and reducing the memory footprint of the operating system, for example.\nI am not suggesting that you should necessarily spend a year or more refactoring your product, as Apple did. But it can be more effective to make a concentrated effort and invest a few months, or at least a sprint or two, in cleaning up the software, as opposed to doing it in drips and drops across several releases. You intentionally slow down, so to speak, to go faster afterwards.\nIf a refactoring release is the right approach for you, then your product roadmap should reflect this: It should show a release dedicated to future-proofing the product and making the necessary technical changes.\nBut if the technical debt is not as significant and does not need to be addressed as urgently, then plan in time for removing some debt in every sprint while continuing to improve the user experience and add or enhance features. You can do this by adding tech debt remedial items to the product backlog. This makes the necessary work visible and allows you to track it across sprints and releases. Make sure, though, that the necessary work is actually carried out and requests for more functionality don’t prevent the removal of technical debt. (My article “Succeeding with Innovation and Maintenance” discusses how you can fix bugs and add new features at the same time.)\nPreventing Technical Debt\nIntentionally compromising the code quality to get a release out and accepting technical debt is all good and well as long as you actually remove the debt afterwards. Often, however, technical debt is created unintentionally in my experience.\nDigital products require ongoing attention to their architecture and code. Otherwise, the product quality will deteriorate, which leads to an increase in technical debt. This is very much like maintaining your bicycle on a regular basis, ideally after every ride. And the more you rely on your bike, the more you should care about it, clean it, and fix or replace faulty parts. The challenge is to make time for the necessary clean-up and maintenance work and view it as part of the bike riding experience, rather than a chore.\nThe same is true for digital products: Some teams feel so rushed and pressured that they repeatedly cut corners and don’t apply good software craftsmanship practices like evolutionary architecture, test-driven development, pair programming, and continuous integration. But these practices do not only help create an adaptable architecture and clean code base. Used properly, they will speed up development and allow you to release new features and functionality faster, not slower—the latter being a common misconception amongst product people in my experience. The opposite is also true: If development teams don’t apply the right practices and tools, then the software is likely to be brittle, not soft and malleable.\nIf you want to prevent future technical debt, then give your development team the time to learn, apply, and improve the right development practices. In fact, you should expect that the development team creates product increments with the right quality. A great way to do this is to employ a Definition of Done that states code complexity limits and test coverage targets, and to only accept work results that fulfil this definition.\nNotes\n[1] Technical debt is a concept originally suggested by Ward Cunningham and nicely explained by Martin Fowler. Thanks to Yves Hanoulle for encouraging me to write about it.\n[2] I recommend that you add software quality to your KPIs and routinely track it. Quality is leading indicator: If it is decreasing, then you know that changing the product will become more and more difficult unless you do something about it. Knowing if and how much technical debt is building up helps you be proactive and avoid nasty surprises.\n ","url":"https://www.romanpichler.com/blog/technical-debt-and-product-success/?replytocom=41320"},{"date_scraped_timestamp":1710925632813,"host":"www.romanpichler.com","page_title":"Technical Debt and Product Success","text":"\n \n Published on 4th December 2018\n \n Last Updated on: 2 May 2023\n \n \n \n \n \n \n Similar to a company experiencing financial debt, products can incur “technical debt”: This happens when wrong or suboptimal architecture, technology, and coding decisions are taken. Consequently, the architecture may not be as loosely coupled as it should be, and the code may be messy rather than clean. This article explains why product people should care about technical debt and it offers strategies for addressing it. \n \nWhy Technical Debt Matters for Product People\nAs the person in charge of the product, you may not be terribly concerned about how clean and well-structured the code is. But the quality of your product matters: It directly impacts your ability to achieve strategic product goals and make your products successful: Technical debt makes it hard to experiment with new ideas, release new features, and quickly respond to user feedback. [1]\nThe messier the code and the less modular the architecture is, the longer it takes and the more expensive it is to change your product. In the worst case, you have to go through a rewriting exercise where some parts or even the entire product are being redeveloped. This is similar to financial debt: When the debt is not paid back, the interest payments can multiply and eventually cripple the business.\nTechnical Debt and Your Product\nTo understand if and to what extent your product is affected by technical debt, talk to the development team, for example, in the next sprint retrospective. I find that development team members usually have a good understanding where issues in the architecture and code are.\nAdditionally, consider asking the team to collect data that shows how much technical debt there is, where it is located, and how bad it is, for example, by using code complexity, dependencies, duplication, and test coverage as indicators. There are a number of code analysis tools available that collect the appropriate data and show how adaptable the architecture and how clean the code is. [2]\nOnce you understand the amount and severity of tech debt in your product, analyse its impact on meeting the product goals and achieving product success together with the development team. Take into account the cost of delay, the cost of not addressing the technical debt now but delaying it to a future point in time. Should you, for example, continue adding new features to the product for the next six months and plan in bigger technical improvement work afterwards? Or would it be better to address the worst debt now?\nFurthermore, consider the life cycle stage of your product. Technical debt is particularly bad for new and young products: If your product has a closely-coupled architecture with lots of dependencies, if it lacks (automated) tests and documentation, or if it is full of spaghetti code, then experimenting with new ideas and adapting the product to user feedback and new trends will be difficult and time-consuming. Similarly, if you want to extend its product life cycle, you may have to first remove (some of) the technical debt before you can make the necessary changes and add new features or create a variant.\nHaving said that, it is a valid strategy to launch a minimum viable product (MVP) whose architecture, technology, and code has been intentionally compromised in order to reduce time to market—as long as the quality is good enough to adapt the product to feedback from the early market. But apply this strategy with caution: You will have to spend time addressing the technical debt incurred and putting your product on solid technical foundations. This should be done before reaching product-market fit, as you will otherwise struggle to scale up and keep your product growing.\nIf, however, your product is in maturity—or even decline—and you do not intend to extend its life cycle but focus on maximising the business benefits it generates, you probably want to carry out as little debt removal work as possible.\nOptions for Removing Technical Debt\nOnce you’ve established how much tech debt there is and how soon it needs to be addressed, you face two choices: You can either make time for a focused effort and dedicate a period of time to removing the debt, or you can carry out the work in parallel to enhancing your product and adding new functionality.\nWhenever you face a significant amount of tech debt that constitutes a barrier to innovation, you should opt for a dedicated period to remove it. Apple did this with Mac OS X Snow Leopard, which was released in 2009 after nearly two years of work. While Snow Leopard didn’t provide any new functionality, it created the foundation for future releases by improving performance and reducing the memory footprint of the operating system, for example.\nI am not suggesting that you should necessarily spend a year or more refactoring your product, as Apple did. But it can be more effective to make a concentrated effort and invest a few months, or at least a sprint or two, in cleaning up the software, as opposed to doing it in drips and drops across several releases. You intentionally slow down, so to speak, to go faster afterwards.\nIf a refactoring release is the right approach for you, then your product roadmap should reflect this: It should show a release dedicated to future-proofing the product and making the necessary technical changes.\nBut if the technical debt is not as significant and does not need to be addressed as urgently, then plan in time for removing some debt in every sprint while continuing to improve the user experience and add or enhance features. You can do this by adding tech debt remedial items to the product backlog. This makes the necessary work visible and allows you to track it across sprints and releases. Make sure, though, that the necessary work is actually carried out and requests for more functionality don’t prevent the removal of technical debt. (My article “Succeeding with Innovation and Maintenance” discusses how you can fix bugs and add new features at the same time.)\nPreventing Technical Debt\nIntentionally compromising the code quality to get a release out and accepting technical debt is all good and well as long as you actually remove the debt afterwards. Often, however, technical debt is created unintentionally in my experience.\nDigital products require ongoing attention to their architecture and code. Otherwise, the product quality will deteriorate, which leads to an increase in technical debt. This is very much like maintaining your bicycle on a regular basis, ideally after every ride. And the more you rely on your bike, the more you should care about it, clean it, and fix or replace faulty parts. The challenge is to make time for the necessary clean-up and maintenance work and view it as part of the bike riding experience, rather than a chore.\nThe same is true for digital products: Some teams feel so rushed and pressured that they repeatedly cut corners and don’t apply good software craftsmanship practices like evolutionary architecture, test-driven development, pair programming, and continuous integration. But these practices do not only help create an adaptable architecture and clean code base. Used properly, they will speed up development and allow you to release new features and functionality faster, not slower—the latter being a common misconception amongst product people in my experience. The opposite is also true: If development teams don’t apply the right practices and tools, then the software is likely to be brittle, not soft and malleable.\nIf you want to prevent future technical debt, then give your development team the time to learn, apply, and improve the right development practices. In fact, you should expect that the development team creates product increments with the right quality. A great way to do this is to employ a Definition of Done that states code complexity limits and test coverage targets, and to only accept work results that fulfil this definition.\nNotes\n[1] Technical debt is a concept originally suggested by Ward Cunningham and nicely explained by Martin Fowler. Thanks to Yves Hanoulle for encouraging me to write about it.\n[2] I recommend that you add software quality to your KPIs and routinely track it. Quality is leading indicator: If it is decreasing, then you know that changing the product will become more and more difficult unless you do something about it. Knowing if and how much technical debt is building up helps you be proactive and avoid nasty surprises.\n ","url":"https://www.romanpichler.com/blog/technical-debt-and-product-success/?replytocom=127974"},{"date_scraped_timestamp":1710925598388,"host":"www.romanpichler.com","page_title":"The GO Portfolio Roadmap","text":"\n \n Published on 22nd September 2015\n \n \n \n \n \n \n \n Products don’t exist in isolation. Instead, they are often related to other products, which they help sell or they share features and components with. Think, for instance, of the Microsoft Office suite or the iPod product line. If your product is part of a family, then you will benefit from a portfolio roadmap, a plan that shows how the products are likely to grow together. This post introduces such a plan, the GO Portfolio Roadmap, and it describes how this roadmap can help you manage your product family. \n The GO Portfolio Roadmap\nPortfolio roadmaps come in different shapes and formats. Based on my popular GO Product Roadmap, I have developed the GO Portfolio Roadmap. Both roadmaps are goal-oriented and use goals to anticipate how a product or a product family is likely to grow. The following picture shows the structure and the elements of the GO Portfolio Roadmap. You can download the template for free from romanpichler.com/tools/the-go-portfolio-roadmap/ or by clicking on the picture below.\nAs the template above shows, the GO Portfolio Roadmap combines the roadmaps of several related products into a single plan. The portfolio roadmap is based goals; you create it by identifying the desired benefits the portfolio members should deliver. The goals invite you to describe why it is beneficial to develop the products and the overall portfolio rather than focusing on individual features. I find that goal-oriented roadmaps are particularly beneficial in the presence of change and uncertainty. What’s more, they make it easier to align stakeholders and help create a shared understanding of how the portfolio is likely to grow.\nLet’s take a brief look at the elements of the GO Portfolio Roadmap. The top section displays the release dates or timeframes. It then states the portfolio members, product A and product B. Each product has its own goals, features, and metrics, which are identical to their counterpart on the GO Product Roadmap: Each goal describes the desired benefit a major release should provide; the features are the key deliverables necessary to meet the goal; and the metrics state the measurements used to determine if the goal is met. (For more information on the goals, features, and metrics, please refer to my post The GO Product Roadmap.)\nYou can customise and extend the GO Portfolio Roadmap by adding more products and by including more portfolios with their products.\nA Sample GO Portfolio Roadmap\nLet’s see how the GO Portfolio Roadmap can be applied. The following sample roadmap consists of one portfolio, the Healthy Eating product family, and two fictitious products, the Beach Body app and the Training app. The former is aimed at people who would like to lose weight to look slimmer; the latter targets athletes who would like to improve their performance by adjusting their diet.\nAs the picture above shows, major releases are planned for both products on a quarterly basis. While the Beach Body app has been available for a while, the Training app is a brand-new product. If the latter reuses features of the former and if those features have to be refactored before they can be reused, then the roadmap above contains dependencies. These dependencies have to be managed, and the roadmap may have to be reworked, for instance, by delaying the launch of the training app to Q2. This illustrates one of the main benefits of a portfolio roadmap: It is easier to spot dependencies compared to using separate product roadmaps.\nAt the same token, if your portfolio roadmap suffers from many dependencies, then this may be an indication that the products are not defined appropriately. You may have to unbundle some products and promote their features to new products, for instance; you may choose to do the opposite and bundle smaller products into a larger one; or you may want to encapsulate shared assets, components, or services into a platform (which would then be added to the portfolio).\nAs developing and updating a portfolio roadmap tends to be more challenging compared to a product roadmap, I recommend that you develop a solid product roadmapping practice before you employ a portfolio roadmap. What’s more, make sure that the assets in your portfolio are indeed products–not features or components. Otherwise you don’t need a portfolio roadmap; a product roadmap will do.\n ","url":"https://www.romanpichler.com/blog/the-go-portfolio-roadmap/"},{"date_scraped_timestamp":1710925609401,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2734"},{"date_scraped_timestamp":1710925587201,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=40487"},{"date_scraped_timestamp":1710925620008,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2738"},{"date_scraped_timestamp":1710925596582,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2746"},{"date_scraped_timestamp":1710925583298,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=75145"},{"date_scraped_timestamp":1710925613842,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2731"},{"date_scraped_timestamp":1710925591423,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=31068"},{"date_scraped_timestamp":1710925592111,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=16136"},{"date_scraped_timestamp":1710925596545,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=16236"},{"date_scraped_timestamp":1710925603044,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2743"},{"date_scraped_timestamp":1710925622827,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2723"},{"date_scraped_timestamp":1710925590591,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=20223"},{"date_scraped_timestamp":1710925578930,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=149036"},{"date_scraped_timestamp":1710925588223,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=40484"},{"date_scraped_timestamp":1710925581249,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=148972"},{"date_scraped_timestamp":1710925460772,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/"},{"date_scraped_timestamp":1710925612596,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2735"},{"date_scraped_timestamp":1710925632590,"host":"www.romanpichler.com","page_title":"The Minimum Viable Product and the Minimal Marketable Product","text":"\n \n Published on 9th October 2013\n \n \n \n \n \n \n \n The minimum viable product (MVP) and the minimal marketable product (MMP) are two powerful concepts: The MVP helps you test your ideas. The MMP enables you to launch your product faster. This post discusses both concepts together with their relationship. \n The Minimum Viable Product\nThe minimum viable product (MVP), as originally defined by Eric Ries, is a learning vehicle. It allows you to test an idea by exposing an early version of your product to the target users and customers, to collect the relevant data, and to learn from it. For instance, to test the viability of using ads as the major revenue source, you could release an early product increment with fake ads, and measure if and how often people click on them.\nAs lack of knowledge, uncertainty, and risk are closely related, you can view the MVP as a risk reduction tool. In the example above, the MVP addresses the risk of developing a product that is not economically viable. Since the MVP is about learning, it’s no surprise that it plays a key part in Lean Startup’s build-measure-learn cycle, as the following picture shows:\nThe MVP is called minimum, as you should spend as little time and effort to create it as possible. But this does not mean that it has to be quick and dirty. But try to keep it as small as possible to accelerate learning and avoid the possibility of wasting time and money, as your idea may turn out to be wrong!\nWhile the MVP should facilitate validated learning, I find it perfectly OK to work with MVPs such as paper prototypes and clickable mockups that do not generate quantitative but qualitative data, as long as they help to test the idea and to acquire the relevant knowledge.\nThe Minimal Marketable Product\nAnother concept that encourages you to create a minimal offering is the minimal marketable product (MMP). It is based on the idea that less is more: The MMP describes the product with the smallest possible feature set that addresses the needs of the initial users (innovators and early adopters), and can hence be marketed and/or sold. The MMP is a tool to reduce time-to-market: It can be launched more quickly than a fat, feature-rich one.\nCreating a product with just the right amount of features sounds like common sense. Why would we offer more features than necessary? Sadly, I have seen many organisations develop over-engineered products with lots of shiny features that provided little value to the users, but cluttered the product and increased its maintenance cost. And it’s not just the others: I am constantly tempted to add just another cool feature to a product, or to write a few extra lines in a blog post. Using the concept of an MMP helps me focus on what really matters, and remove unnecessary features (and lines).\nA great example of an MMP is Apple’s original iPhone launched in 2007. I understand that the first iPhone was a complex product, and that many people worked incredibly hard on it. But I find it amazing how many features the phone did not provide compared to its competitors: no copy-and-paste, no video, and no POP email integration, to name just a few. Nevertheless the phone was still a staggering success. How come?\nThe key to creating a successful MMP is to “develop the product for the few, not the many,” as Steve Blank puts it, and to focus on those features that make a real difference to the users. To discover the right features, the aforementioned MVP is a fantastic tool.\nCombining the Two Concepts\nTo combine the two concepts, develop one or more MVPs to test your ideas and to acquire the relevant knowledge. This is typically done as part of your product discovery activities. Then use your new insights to create and launch the MMP – a simple product with the right user experience and feature set.\nNote that a minimal marketable product differs from a viable one: It is complete enough to be ready for general release, as indicated by the gift wrapping in the picture above. What’s more, launch preparation activities have to take place for an MMP, for instance, creating advertising campaigns, or gaining certification. Some of your MVPs are likely to be throwaway prototypes that only serve to acquire the necessary knowledge; others are reusable product increments that morph into a marketable product.\nPost Scriptum 2 November 2017\nSince I wrote this post, the meaning of the term minimum viable product has started to change. People like Ash Maurya view it as the smallest offering that can be launched, which essentially equates the MVP with the minimal marketable product.\nWhichever definition you prefer, aim to launch the smallest possible product that is still good enough to serve its early market. Then inspect and adapt to achieve product-market fit and growth. This may require smaller changes like adding or optimising features, adjusting the business model, and enhancing the user experience. But it might also require a pivot, a drastic change. Flickr, for example, was launched as an online role-playing game and changed to a photo-sharing website; YouTube evolved from a video-dating site to a video-sharing product.\n ","url":"https://www.romanpichler.com/blog/minimum-viable-product-and-minimal-marketable-product/"},{"date_scraped_timestamp":1710925651571,"host":"www.romanpichler.com","page_title":"The Product Backlog Refinement Steps","text":"\n \n Published on 2nd April 2012\n \n Last Updated on: 7 Mar 2022\n \n \n \n \n \n \n Refining the product backlog helps you make the right product decisions and get the product backlog ready for the next sprint. In this post, I show how you successfully refine your product backlog in five steps. \n Step 1: Analyse the Data\nRefining the product backlog starts with analysing the feedback and data collected from exposing a product increment to target users and customers. The increment may be working software, or in the case of a brand-new product, a paper prototype. The data obtained may be quantitative, qualitative, or both depending on the validation technique used. I prefer to work with both, qualitative and quantitative data whenever possible and combine, for example, direct observation with A/B tests.\nWhen evaluating the feedback, focus on the data that is relevant to help you understand if you are building the right product with the right UX, features, and technologies, or how you can further enhance and optimise the product. Have the courage to say no to new ideas and requests if these are not helpful to meet the current product goal. Otherwise, your product is in danger of becoming a feature soup, a loose collection of features with little or no connection.\nBe aware of the cognitive biases we all have, your hidden assumptions and wishes, as these can lead to ignoring or misinterpreting data. Example biases are confirmation bias, the tendency to prefer data that confirms our preconceived ideas and views, and anchoring bias, the tendency to rely too much on the first piece of information obtained. To mitigate the risk, analyse the feedback together with the development team members.\nFinally, remember that negative feedback is good feedback: If all you ever hear is positive, you don’t learning anything new and you miss opportunities for making your product even better.\nStep 2: Integrate the Learning\nOnce you have analysed the feedback, draw the right conclusions and incorporate them into the product backlog. This usually results in removing, adjusting, and adding items, including epics, non-functional requirements, design and workflow sketches.\nBut you might also find that the product goal you are pursuing is no longer valid or feasible within the time and budget constraints. If that’s the case, you may have to adjust not only the product backlog but also the product roadmap, assuming that you use such a plan.\nStep 3: Decide what to do Next\nAfter incorporating the new insights into your backlog, decide what to do next and choose the right sprint goal. Ask yourself what needs to be done next and what the purpose of the next sprint is. Which ideas and assumptions do you want to validate, which risks do you need to address? Or which functionality do you want to provide or enhance? You may want to try my sprint goal template to capture goal.\nStep 4: Refine the Backlog Items\nNext, break the larger items that help you to reach the sprint goal into smaller. For example, break epics into user stories. Then make them high-priority, and order the items according to their importance for reaching the sprint goal.\nYou may also want to ask the development team to estimate any epics that have been added or adjusted as well as the newly formed stories. This allows you to understand how much effort is roughly contained in the backlog, to prioritise by cost-benefit, and track the development progress, for example, by using a release burndown chart.\nStep 5: Get the High-Priority Items Ready\nWith small, ordered user stories in place, you are close to starting the next cycle. But before you do so, ensure that the stories are ready: clear, feasible, and testable. This may entail creating a user interface design sketch and one or more operational quality constraints for the stories, as the picture below illustrates.\nGetting the stories ready may also require resolving dependencies between teams if several teams work on the same product. The stories should now be ready to be pulled onto the sprint backlog or the Kanban board.\nProduct Backlog Refinement is Teamwork\nWhen I talk to Scrum product owners about refining their product backlogs, it’s not uncommon for me to discover that the individuals carry out the work on their own. This wastes a massive opportunity: to mitigate the product owner’s cognitive biases, create shared ownership of the product backlog, and leverage the team’s collective creativity and knowledge.\nAs the product owner, involve the team members in the refinement work. This reduces your workload, and it is likely to result in better requirements and a better product. Don’t be afraid, however, to facilitate the discussions and to make a decision if no consensus can be reached. You don’t want to get stuck in analysis-paralysis but move on, and test new ideas or deliver more functionality.\n ","url":"https://www.romanpichler.com/blog/the-product-backlog-refinement-steps/"},{"date_scraped_timestamp":1710925696981,"host":"www.romanpichler.com","page_title":"The Product Owner’s Checklist for the First Sprint","text":"\n \n Published on 17th December 2014\n \n \n \n \n \n \n \n Scrum is a popular agile framework for developing a product with the right features and the right technologies. Unfortunately, it does not state the prerequisites for kicking off a Scrum project and for starting the first sprint. As a consequence, I find it not uncommon that product managers and product owners are unsure about the work they should do prior to the first sprint. This post offers a checklist to help you do the right upfront product management work. \n The Essential Upfront Product Management Work\nScrum is agnostic about the work that has to be done before you can create an initial product backlog  and run the first sprint, be it for a brand-new product or for an existing one that you have just taken on. In fact, it doesn’t make any recommendations. But this does not mean, of course, that you don’t have to or should not do any work before you move into Scrum and kickoff the first sprint. As the product owner, you should do just enough work to have the following artefacts in place and be able to answer the following questions:\nArtefacts\nQuestions to Address\nShared Vision\nWhat are the purpose and the motivation for developing, marketing, and selling the product?\nWhat is the positive change the product should create?\nValid Product Strategy\nWhat market or market segment does the product serve? Who are the customers and the users?\nWhat problem does it solve, or which benefit does it provide?\nWhy would people choose it over a competing offer? What makes it special or desirable?\nWhat are the business goals? Why should your company invest in the product?\nValid Business Model\nHow does the product generate the desired business benefits?\nHow is it monetised? What are the cost factors for developing, marketing, and selling the product?\nWhat marketing and sales channels are used?\nRealistic Product Roadmap\nHow is the product going to be delivered over the next 12 months? What are the release dates?\nWhat goals or benefits do the individual releases provide?\nWhat metrics are used to determine success?\nPersonas\nWhat characteristics, attitudes, behaviours, and goals do the users and customers have?\nWho is the primary persona?\nThe items in the table above form a checklist to help you assess if you are ready to apply Scrum. You may have to tailor the checklist to you specific needs. For an in-house product, a valid business model is typically less applicable than for a commercial one, for instance. Similarly, if you build a product for a client then the strategy should address the client’s business goals rather than yours.\nYou can use choose from a range of tools to capture the answers to the questions above. For instance, my Product Vision Board describes the vision and the strategy, Alexander Osterwalder’s Business Model Canvas defines the business model, my GO Roadmap captures the product roadmap, and my persona template helps you describe the personas. The point is not to use a specific tool but to ask the right questions and to answer them effectively. To put it differently, if you struggle with the questions then a tool alone is unlikely to help you.\nVision and Strategy Take Priority\nOf the four artefacts listed above, the vision and the product strategy are particularly crucial. You should hence pay particular attention to them and create them first. Here is why:\nIf you don’t have a shared vision, then you lack an overarching goal and a reason for creating the product. You will consequently struggle to motivate, guide, and align the stakeholders.\nIf you don’t know who the customers and the users are and why they would buy and use your product, then you cannot make informed decisions about the user experience and the product features. Imagine writing a user story without knowing who the user is. You would have to speculate and dream up the story.\nWhat’s more, collecting meaningful feedback becomes virtually impossible, as you are likely to ask the wrong people and receive unhelpful feedback. This would cause you to draw the wrong conclusions and make the wrong changes to your product; or you would conclude that the users don’t have a clue, that you should ignore their input, and that you know what’s best for them anyway. Neither approach maximises the chances of creating a successful product.\nFinally, if you don’t know what the business goals are and why your company should invest in your product, you don’t understand the value that the product should create for your business. This will make it difficult to attract funding and to get the right people.\nBusiness Model, Product Roadmap, and Personas Come Second\nHaving a vision and product strategy is great but not always enough to start the first sprint effectively. For commercial software products it is also important to understand how you can meet the business goals and how you can monetise your product. Otherwise you won’t be able to create a financial forecast, and your company is unlikely to be in a position to make an informed investment decision.\nSimilarly, a product roadmap details the product strategy and states how it will be implemented. Without a roadmap, you haven’t made explicit when major releases will happen, what benefits they should provide, and how you are going to determine their success. This will make it difficult to align the stakeholders including marketing, sales, and support, to staff the development team, and to show that you have done a great job and deserve a pay rise or a bonus. Take look at my post Getting Stakeholder Engagement Right find out how you can effectively identify and involve the stakeholders.\nWithout personas I find it difficult to discover the right user interaction, the right user interface design, and the right functionality. Who do the user stories serve and why do they add value for the users? And without a primary persona, I find it hard to prioritise and decide, for instance, if a story or scenario should make it into the release or not and if it can be postponed or only partially provided. This makes managing the product backlog very challenging.\nDo Just Enough Upfront Work\nWhile you don’t want to rush into the first sprint, you don’t want to spend more time and effort then absolutely necessary to answer the questions in my checklist above. A great way to carry out the upfront work is to employ a Lean Startup-based approach, as the picture below illustrates.\nThe diagram above shows two key steps, problem discovery and product development. The first step iteratively creates a shared vision, a valid product strategy and business model, a realistic product roadmap, and helpful personas. This is likely to require some research and validation work, for instance, direct observation, problem interviews, and developing minimum viable products (MVPs). The second step leverages Scrum and builds the actual product, a product with the right features, right user experience, and right technologies. It starts with creating an initial product backlog and finishes with the launch of the new major release.\nHow much upfront work is needed depends on how many risks your strategy and your business model contain. The more risks there are, the more time and effort you typically have to invest. The risks in turn are related to your growth strategy and to the technologies used to build the product. Developing a new product for a new market carries significantly more risk than updating an existing product for an existing market and therefore tends to require more upfront work, for instance. As a consequence, the amount of effort you may have to spend varies. It can range from a few days for a straight-forward product update to a few months for a diversification effort.\nAs the product owner, you should lead the product strategizing effort and you should shape the vision, the strategy, the business model, the roadmap, and the personas. If that’s not the case then make sure that the necessary prep work has been carried out, that you know the answers to the questions stated in the checklist above, and that the appropriate artefacts are available. If that’s not the case you should consider delaying the start of the first sprint and carrying out more research and validation work.\n ","url":"https://www.romanpichler.com/blog/the-product-owners-checklist-for-the-first-sprint-in-scrum/"},{"date_scraped_timestamp":1710925574220,"host":"www.romanpichler.com","page_title":"The Product Roadmap and the Product Backlog","text":"\n \n Published on 9th September 2014\n \n Last Updated on: 3 Oct 2023\n \n \n \n \n \n \n The product backlog is a great tool to capture ideas and requirements. But it is less suited to describe how the product is likely to develop in the longer term. This is where the product roadmap comes in. But how do the product backlog and the product roadmap relate? Is the backlog derived from the roadmap or is it the other way round? Should the product owner be responsible for both artefacts? Read on to find out my recommendations. \n Product Roadmap vs. Product Backlog\nThe product roadmap and the product backlog are two important product management tools. Each tool has its own strengths and weaknesses: The product roadmap is a strategic product-planning tool that shows how the product is likely to grow across the nexts, say, 12 months. It creates a continuity of purpose, facilitates stakeholder collaboration, helps acquire funding, and makes it easier to coordinate the development and launch of different products.\nThe product backlog contains the outstanding work necessary to create a product including epics and user stories, workflow diagrams, user-interface design sketches, and mock-ups. It is a tactical tool that directs the work of the development team and that provides the basis for tracking the development progress using, for example, a release burndown chart. The following diagram summarises the main differences of the product roadmap and the product backlog.\nApplied correctly, the two tools complement each other nicely. The product roadmap provides an umbrella for the product backlog; it tells a longer-term story about the likely growth of the product whereas the product backlog contains the details necessary to progress the product in the next few months.\nDerive the Product Backlog from the Product Roadmap\nI Find it helpful to derive the product backlog from the product roadmap. This assumes, however, that you have a realistic roadmap in place that provides the right input for the backlog, particularly product goals that capture the desired benefits or outcomes your product should provide. Sample goals might be acquire users, increase engagement, and remove technical debt to future-proof the product.\nYou can take this approach further and focus your product backlog on the next product goal. This creates a concise backlog that is easy to update and change, which is particularly useful as long as your product changes and grows. To do so, use the next product goal on your roadmap to scope your product backlog and determine the right contents, as the following picture illustrates.\nMinimise any Overlap between the Roadmap and the Backlog\nUnfortunately, I find that product roadmaps can contain too many details, including epics and user stories, and that some product backlogs look too far into the future. This blurs the line between the two artifacts; it results in a product roadmap that is difficult to understand, prone to change, and overly long and hard to manage.\nTherefore keep the two tools separate and leverage their respective strengths. Employ the roadmap to describe your product’s overall journey and the backlog to capture the details. Don’t add epics and stories to your product roadmap. Stick to high-level features and product capabilities instead.\nKeep the Product Roadmap and Product Backlog in Synch\nBe aware that the product backlog also influences the product roadmap: Bigger product backlog updates can trigger product roadmap adjustments. Similarly, if the development progress is not as anticipated, you may have to update the product roadmap and modify, for example, the goal or date.\nIt is therefore important that you keep the product roadmap and the product backlog in sync. Use the product roadmap to determine the backlog contents,  as mentioned above, and consider the product backlog changes when you review the product roadmap. Reviews should happen on a quarterly basis, as a rule of thumb, and involve dev team representatives and the key stakeholders.\n ","url":"https://www.romanpichler.com/blog/product-roadmap-product-backlog/"},{"date_scraped_timestamp":1710925542028,"host":"www.romanpichler.com","page_title":"The Product Roadmap and the Release Plan","text":"\n \n Published on 16th August 2016\n \n Last Updated on: 21 Dec 2021\n \n \n \n \n \n \n Release planning and product roadmapping are both important practices to achieve product success. But what’s exactly the difference between a release plan and a product roadmap? How do the two tools fit together? This post answers these questions so you can apply the two planning artefacts effectively. \n What is a Release Plan?\nA release plan forecasts how a major release is developed. It’s a type of project plan—albeit an agile one—and it usually covers the next three to six months. I use the term major release to refer to a version of your digital product that introduces a noticeable change, for instance, by adding or optimising functionality or enhancing the user experience, and it typically results in a new product version—think of Windows 10 or iOS 9.3, for example.\nRelease plans come in different shapes and sizes depending on the process used. In Scrum, the release burndown chart is the default release plan. It helps you track the progress from sprint to sprint, anticipate if the relevant product backlog items can be delivered on time and budget (or how long it will take and how much it will cost), and make the necessary adjustments, such as, reduce or remove a feature, or add a new team member to the team. The following picture shows a sample release burndown chart.\nIn the chart above, the vertical axis captures the remaining effort in the product backlog required to create the next release, and the horizontal axis captures the number of sprints necessary or available to develop the release. The first data point on the chart is the estimated effort of the entire product backlog before any development has taken place.  To arrive at the next data point, you determine the remaining effort in the product backlog at the end of the first sprint. Then draw a line between the two points. The burndown line shows the progress that has been made, and after a few sprints you should see a trend emerge and be able to forecast future progress. The forecast is represented by the dotted line in the chart above.\nWhat is a Product Roadmap?\nA product roadmap communicates how a product is likely to evolve across several major releases. Unlike the release plan, it is a product plan that looks beyond an individual project or release: It describes the journey you want to take your product on over the next 12 months or so—much like a roadmap helps you plan a road trip.\nProduct roadmaps vary in their format. I prefer to work with goal-oriented roadmaps (also called outcome-based roadmaps). As their name suggests, these roadmaps focus on the goals the upcoming releases should provide. The picture below shows the GO Product Roadmap, a specific goal-oriented roadmap format that I have created. You can download the roadmap template from romanpichler.com/tools or by clicking on the following image.\nLet’s take a quick look at the rows of the GO roadmap in the picture above from top to bottom. The first row captures the date or the time frame when a new product release should be available—for example, 1 March 2015, or first quarter 2015. As explained in my post 10 Tips for Creating an Agile Product Roadmap, I recommend using dates or timeframes on internal product roadmaps and omitting them on external ones, that is, on roadmaps that are shown to (prospective) customers. The second row states the name of the release like iOS 9.3 or Windows 10 mentioned before.\nThe third row is the most important part of the GO roadmap. As its name suggests, it states the goal you want to achieve, the benefit you want to offer. You can think of the goal as a release goal if you work with major releases that package up feature enhancements or releases to make them available at the same time to the users. Sample goals include acquiring users, improving the user experience, and removing technical debt. The fourth row lists the product’s features that are necessary to meet the goal. Derive the features from the goals and ensure that they help create the desired benefits. Focus on what really counts; limit yourself to five features per goal, and keep the features coarse-grained. The fifth and final row captures the metrics to determine if a goal has been met—for example, x amount of users employ the product for at least thirty minutes per day within two weeks after the release becomes available. Stating the metrics ensures that the goals on your roadmap are specific and measurable.\nHow do the Release Plan and Roadmap Relate?\nI find it helpful to think of the product roadmap as a high-level plan that sketches out the major stages of a road trip, including overnight stops. The release plan then states how each stage is likely to unfold. My preference is therefore to derive the release plan from the product roadmap (with the help of the product backlog) and to use the release plan to forecast how a specific product goal on the product roadmap is met. The following picture shows the relationship between the three artefacts.\nDon’t forget to keep the product roadmap and the release plan in synch. Bigger changes in the release plan are likely to impact the roadmap. If, for instance, the development progress is slower than anticipated, then this will not only impact the release plan but it might also affect the product roadmap.\nThe following table summarises the key differences between the release plan and product roadmap.\nArtefact\nCharacteristics\nTimeframe\nContents\nRelease Plan\nProject plan, tactical\n3 to 6 months\nProduct backlog items, including user stories\nProduct Roadmap\nProduct plan, strategic\n12 months\nProduct/release goals, high-level features / product capabilities\n ","url":"https://www.romanpichler.com/blog/product-roadmap-vs-release-plan/"},{"date_scraped_timestamp":1710925552374,"host":"www.romanpichler.com","page_title":"The T-Shaped Product Professional","text":"\n \n Published on 10th May 2017\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n Product management is a multi-faceted discipline. This makes our work interesting and varied. But it can also make it hard to see which skills we need to develop so we can do an even better job or take on more responsibility. In this post, I discuss balancing product-specific skills with generic product management capabilities. I suggest developing a t-shaped skills profile that ensures that you have the necessary deep skills to progress your product, as well as the broad skills required to systematically deal with common, recurring product management challenges. \n \nBalance Specific and Generic Skills\nTo do a great job as a product manager or Scrum product owner, you will benefit from two skills sets: a product-specific and a generic one. As their name suggests, product-specific capabilities focus on a specific product or product category. They include a deep understanding of the users with their needs, the competition, and the market trends. They also require you to have a deep knowledge of the product itself, including its value proposition, key features, user journeys, business goals, and KPIs. Finally, they imply an insight into how the company works and how things get done—what the company goals are, which processes are used, and who the decision makers and influencers are. As product-specific skills are crucial, I find that many product people strive to develop these capabilities. But as important as they are, they are not enough.\nIn addition to deep product skills, you require generic or transferable product management capabilities, such as, effectively capturing the product’s value proposition, segmenting the market, validating product strategy assumptions, selecting the right KPIs, prioritising the product backlog, and analysing user feedback and data. These skills are not specific to an individual product, but transferable. They equip you with the expertise to methodically solve common product management challenges and they enable you to move between jobs and verticals if you wish to do so.\nBalancing the specific and generic skills leads to a T-shaped skills profile and makes you a T-shaped product person as the following picture shows. [1]\nThe horizontal bar is the ability to effectively apply product management concepts, techniques, and tools to different products in different markets and companies. The vertical bar on the T above represents the depth of related skills and expertise for a single product or product portfolio.\nGrow Your Horizontal Skills\nHaving strong horizontal skills enables you to work in a methodical way and to manage different products in different companies. As these skills form a large set, I like to divide them into three sub groups: strategic, tactical, and leadership capabilities, as the picture below shows.\nStrategic skills include the ability to develop an effective product strategy, actionable roadmap, and working business model. Tactical skills help you capture requirements, manage the product backlog, and validate ideas for new features and feature enhancements. Leadership skills enable you to effectively guide the development team and lead the stakeholders, create an inspiring vision, and reach sustainable agreements, to name just a few.\nTo become a competent product professional, you should strive to develop all three types of skills—leadership, strategy, and tactics. Even if you currently fill a tactical product role, increasing your product leadership and product strategy skills will help with your current job: You will be able to collaborate more effectively with the individual who sets the vision and decides the product strategy and earn their respect and trust.\nAdditionally, it will enhance your employability, enable you to progress your career and take on a role that includes strategic responsibilities in the future. And competent and well-skilled product people increase the chances of innovating successfully and maximising the benefits digital products provide.\nTo get started, explore how strong your skills in each of the three groups are. Ask yourself, for example, how much you know about creating and validating a product strategy, about product roadmapping, and business model development. Then focus on those skills where improvements will help you most with your current job. Here are some of the questions it asks you:\nDo you know how to formulate an inspiring vision for a product?\nDo you know how to make effective decisions and generate strong buy-in?\nAre you able to create and evolve product strategy?\nCan you describe different segmentation techniques?\nDo you know what a product strategy is and what its key elements are?\nCan you describe the business model of your product?\nCan you develop an actionable product roadmap that clearly states the specific outcomes your product  should create?\nAre you able to select and apply the right KPIs?\nDo you know when and how to review, adjust, and change your product strategy and product roadmap?\nDo you know how to prioritise product backlog items? Can you state different prioritisation techniques and explain when which is most appropriate?\nDo you understand how to validate your product including the user experience and the features? Do you know when to choose which technique?\nDevelop Your Vertical Skills\nDeep product-specific skills are important to make the right product decision and move your product in the right direction. Here are some activities that I find helpful to strengthen this skillset:\nTalk to users and customers at least once per quarter, be it online or onsite. Nothing beats meeting real users, even if you have tons of analytics data at your disposal.\nRegularly collect and analyse user feedback and data using qualitative and quantitative techniques to better understand how people interact with your product and discover opportunities to improve it.\nUse your own product (a.k.a. eat your own dog food). This helps you discover shortcomings and opportunities for improvement, as well as empathise with the users.\nAttend conferences and tradeshows to stay on top of market trends and see what other companies are working on.\nRegularly read trade journals, product reviews, and user forum messages to see what’s happening in your industry and how people respond to your product as well as competing offerings.\nReview the products of your main competitors. This helps you understand if your product is properly differentiated.\nBuild strong relationships with the development team, Scrum Master, the product sponsor, and the other key stakeholders. Why not invite the sponsor to a coffee, for example, make time to listen to a concerned stakeholder, and bring treats to the sprint planning meeting?\nNetwork with your product colleagues. Build a community of practice, for instance, by hosting brown bag lunches to learn more about each other’s products and practices.\nFinally, pay attention to corporate emails, newsletters, and magazines to see if developments in your company affect your product, such as changes in senior and executive management, changes in the business strategy including acquisitions and spin-offs, and changes in the development group.\n[1] As far as I know, my colleague Ellen Gottesdiener was the first person to suggest that product people should be T-shaped, see her article 5 Ways to Recognize a Great Product Manager.\n ","url":"https://www.romanpichler.com/blog/the-t-shaped-product-manager/"},{"date_scraped_timestamp":1710925621885,"host":"www.romanpichler.com","page_title":"Tips for Growing a Product Management Team","text":"\n \n Published on 9th July 2019\n \n Last Updated on: 22 Jan 2024\n \n \n \n \n \n \n Growth is something wonderful: It means that individuals, teams, and products prosper. Growing a product management team, however, throws up a number of challenges: How big should the team become? How fast should people be added? And how should the individuals work together? This articles discusses how you can address these challenges and it shares my recommendations for growing in an effective manner. \n \nOrganise Around Products\nIn order to grow your product management team, start by reviewing your product portfolio. Determine which assets are actual products—value creating vehicles that offer a tangible benefit or address a real problem for a group of people, while at the same time deliver specific business benefits, such as generating revenue directly or indirectly, reducing cost, or increasing brand equity.\nOnce you’ve identified the products, determine the skills required to manage each asset. For example, an internal product like a platform is likely to require in-depth technical skills—unlike an end-user facing offering, which is likely to require a thorough understanding of the market and business model, for example.\nThen look for the right individual to lead and manage each product bearing in mind that the person should look after the asset over an extended period of time. This rewards long-term thinking and helps people see which impact their decisions have.\nDetermine How Many People are Needed\nOnce you have identified your products together with the skills required to manage them, find out how many product people you need. A common way to do this is to determine the number of development teams needed to progress each asset: If a product needs more than two to three teams, then it is usually too large for one person to manage in my experience.\nIf that’s the case for one of your products, consider adding more product people who take on specialised roles like feature owner (a.k.a. area product owner in LESS) and work with the person in charge of the overall product.\nDevelop Shared Standards\nBefore you add more people, make sure that sufficient shared standards are in place. Review the product management roles and responsibilities, processes, and tools that are currently used. Explore if they are helpful, consistent, and complete. For instance, do you have a shared understanding of how ideas are progressed to shippable products—be it new offerings or new features? Do common product discovery and strategy practices exist? And do you agree on what a product vision, strategy, roadmap, and backlog are, for example, and how these plans should be captured?\nFinally, review how the work of the product people is currently assessed. What are performance evaluations based on? And are they fair? For instance, you may want to tie the evaluations not only to the performance of the product an individual looks after; you may also want to consider the person’s ability to effectively lead and collaborate with dev teams and stakeholders, as well as improve their work and acquire new skills.\nIf important standards are missing, then develop them first and delay growing the team: Without effective standards, it will be difficult for a larger group of people to work together. Confusion, miscommunication, and other forms of waste are likely to materialise. This is not to say that any standard should be set in stone. The opposite is true: Standards exist to help people do great work in a healthy manner. If a standard can be improved, the people doing the work should be empowered to change it.\nGrow the Team Incrementally\nI’ve seen many organisations significantly increase the size of their product management group in one go. While there are always good reasons for this approach, it creates strain for the organisation and the individuals. The quick addition of new product people can be overwhelming and lead to a prolonged period of slow and inconsistent decision-making and low productivity.\nInstead of a big-bang approach, grow your product management group in a piecemeal fashion. This is best done by adding one or two people at a time, particularly when your team is still you. Growing incrementally allows you to understand if your hiring practices are effective, the standards you have in place work well, how much support the new product people need—both from the head of product as well as from the Scrum Master, and how easy or challenging it is to integrate the individuals into the team and foster effective collaboration. What’s more, if you discover any issue, an incremental approach allows you make the necessary changes before you add more people.\nWhen it comes to recruiting the right people, I find that it is often beneficial to develop current employees to help them grow into a product role as well as hire experienced product people. Employees understand the company, its markets, and its products. External product people offer a fresh perspective and have a hopefully solid product management skill set. Make sure, though, that you hire people not only for their product management and domain knowledge but pay attention to their leadership and people skills. For example, how good are they at attentively listening to others and empathising with them? How skilled are they in constructively resolving conflicts and collaborative decision-making?\nEmpower People and Align them through Shared Goals\nProducts have little or no dependencies and can be progressed and released individually;\nProduct people have full authority over their products and own the vision, strategy, and tactics;\nThey have direct access to end users and customers on a regular basis;\nThey are accountable for the product performance (to the degree to which they can influence it).\nWith the right people in place, help the individuals own their products so that they can manage them autonomously. To achieve autonomy, make sure that the following four conditions are fulfilled:\nWhile autonomy empowers the individuals and reduces the management overhead, it leads to people going off in different directions if it is not balanced with shared goals. Therefore, agree on a set of cascading goals and capture them in the appropriate artefacts, for example, as shown in the strategy map below.\nIn the strategy map above, the goals stated in the business strategy guide the portfolio goals, which set the scene for the strategic goals of the individual products. Please see my article “A Strategy Map” for more information on how to create and work with the map above.\nInvolve People in the Decisions\nLast but not least, involve the product people in the process of finding the right org structure, standards, scaling approaches, and new team members. This leverages the collective knowledge of the group. Additionally, it is likely to generate stronger support for the changes you want to make, as the individuals are offered the opportunity to express their ideas and concerns and influence the decisions.\nWhile you may not be able to take on board all suggestions and ideas, attentively listening to individuals shows that you care, and it helps you mitigate your own biases and make better decisions.\n ","url":"https://www.romanpichler.com/blog/tips-for-growing-a-product-management-team/"},{"date_scraped_timestamp":1710925754687,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=3099"},{"date_scraped_timestamp":1710925496417,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/"},{"date_scraped_timestamp":1710925760105,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=3097"},{"date_scraped_timestamp":1710925753059,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=152714"},{"date_scraped_timestamp":1710925758823,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=3094"},{"date_scraped_timestamp":1710925755795,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=3096"},{"date_scraped_timestamp":1710925570161,"host":"www.romanpichler.com","page_title":"What Exactly is a Product Strategy?","text":"\n \n Published on 14th March 2023\n \n \n \n \n \n \n \n The product strategy is possibly the most important product management plan. But what exactly is it? Which information should it contain? Do you need a strategy for your product? How can you ensure that it is likely to result in a successful product and how do you keep it up to date? These are the questions I am going to answer in this article. \n \nListen to the audio version of this article:\nWhat Information Should a Product Strategy Provide?\nI like to think of the product strategy as a high-level plan that helps you realise your vision and that answers the following four questions:\nWho is the product for? Who are the users and, if appropriate, who are the customers?\nWhy would people want to use and buy it? What specific problem does it address, or which tangible benefit does it offer?\nWhat kind of product is it and what makes it stand out? How does it differ from competing offerings? Why would people choose it over alternatives?\nWhat are the business goals? Which benefits does the product create for the company developing and providing it?\nTo make these recommendations more concrete, let’s look at an example. Say that I want to develop a product that helps people eat more healthily. To create a strategy, I might choose middle aged men with busy jobs and an unhealthy lifestyle as the target users. The benefit the product should create for this user group might be to reduce the risk of developing type-2 diabetes. The product might be a mobile app, and its standout features might include measure and record sugar levels in food, analyse eating habits and make individualised recommendations, and seamlessly integrate with leading smart scales. The business benefits, finally, might be to create a new revenue stream, diversify the business, or develop the company brand.\nTo capture the product strategy, you can use my product vision board. It’s a tool I have developed specifically to help people describe the vision and strategy of their products. You can download the product vision board from my website and by clicking on the image below. If you want to learn more about the tool, then read my article The Product Vision Board or watch my video Introduction to the Product Vision Board.\nHow Does the Strategy Relate to the Vision and Roadmap?\nAnother approach to define the product strategy is to explore how it relates to other product plans. To do this, let’s take a look at my product strategy framework shown below.\nAs the image above shows, the product strategy sits between the vision and the product roadmap in my model. To put it differently, it states how you intend to realise the vision and thereby make the product successful, and it provides the necessary input to create an actionable product roadmap. The roadmap, in turn, provides the context to discover the right product details and capture them in the product backlog. You can learn more about the framework by reading the article My Product Strategy Model.\nDo You Need a Strategy for Your Product?\nNow, you might be wondering if you need a product strategy at all. Without a product strategy, you will struggle to explain how your product creates value; you will find it difficult to come up with a realistic product roadmap; and you will have a hard time determining the product details. How can you capture the right user stories, for example, if you don’t know for sure who the users are and why they would want to use your product? Finally, it will be hard to select the right key performance indicators (KPIs) and measure how much value your product creates—the product strategy forms the basis for choosing the correct KPIs. I therefore recommend that every product has a strategy. If that’s not the case for your offering, then you should create one, for example by using the product vision board template shown above.\nHow Can You Create a Strategy that likely to Result in a Successful Product?\nIt’s great to have an initial product strategy. But to increase the chances that it will result in a successful product—a product that is desirable, feasible, viable, and ethical product—you should test your plan. A great way to achieve this is to start with an initial strategy and to iteratively validate and change it, as the picture below illustrates.\nThe process above—which is loosely based on Eric Ries’ work—consists of the following four steps: First, identify the biggest risk currently contained in the product strategy. That’s the uncertainty that must be addressed now to make the right strategic decisions. A sample risk might be that the target group is not big enough or that the need identified may not be compelling enough. Second, determine the right method to address the risk such as direct observation and user interview. Third, apply the method and collect the relevant data, for example, carry out the user interviews and capture the answers in the form of notes or video footage. Fourth, evaluate the data and use the insights gained to decide how to proceed: persevere, pivot, or stop.\nPersevere means sticking with the strategy, possibly making smaller changes, and addressing the next risk. Pivot entails changing the strategy, for example, writing a book on healthy eating rather than developing an app to build on the example used earlier. Stop, finally, means what it says: to stop working on the product strategy and looking for a new idea. For a more detailed explanation of how to create and iteratively validate a product strategy, refer to my book Strategize.\nHow Do You Keep the Product Strategy Relevant and Up to Date?\nFinally, the product strategy is not a fixed, static plan that simply has to be implemented. Instead, it is changeable and dynamic. As new technologies emerge, as competitors offer new products or update existing ones, and as users’ needs evolve, your strategy has to change in order to proactively guide the product delivery and maximise the chances of offering a successful product. You should therefore regularly review your product strategy. The following four factors will help you with this.\nPerformance: How your product doing based on its key performance indicators (KPIs)?\nTrends: Are there any new technology, regulatory, or social developments that will affect your product?\nCompetition: Are your competitors launching new products or features? Is your product still sufficiently differentiated?\nCompany: Are there any significant changes in your company that affect the product strategy? For example, has the business strategy changed or have key people left?\n ","url":"https://www.romanpichler.com/blog/what-is-a-product-strategy/?replytocom=151778"},{"date_scraped_timestamp":1710925566952,"host":"www.romanpichler.com","page_title":"What Exactly is a Product Strategy?","text":"\n \n Published on 14th March 2023\n \n \n \n \n \n \n \n The product strategy is possibly the most important product management plan. But what exactly is it? Which information should it contain? Do you need a strategy for your product? How can you ensure that it is likely to result in a successful product and how do you keep it up to date? These are the questions I am going to answer in this article. \n \nListen to the audio version of this article:\nWhat Information Should a Product Strategy Provide?\nI like to think of the product strategy as a high-level plan that helps you realise your vision and that answers the following four questions:\nWho is the product for? Who are the users and, if appropriate, who are the customers?\nWhy would people want to use and buy it? What specific problem does it address, or which tangible benefit does it offer?\nWhat kind of product is it and what makes it stand out? How does it differ from competing offerings? Why would people choose it over alternatives?\nWhat are the business goals? Which benefits does the product create for the company developing and providing it?\nTo make these recommendations more concrete, let’s look at an example. Say that I want to develop a product that helps people eat more healthily. To create a strategy, I might choose middle aged men with busy jobs and an unhealthy lifestyle as the target users. The benefit the product should create for this user group might be to reduce the risk of developing type-2 diabetes. The product might be a mobile app, and its standout features might include measure and record sugar levels in food, analyse eating habits and make individualised recommendations, and seamlessly integrate with leading smart scales. The business benefits, finally, might be to create a new revenue stream, diversify the business, or develop the company brand.\nTo capture the product strategy, you can use my product vision board. It’s a tool I have developed specifically to help people describe the vision and strategy of their products. You can download the product vision board from my website and by clicking on the image below. If you want to learn more about the tool, then read my article The Product Vision Board or watch my video Introduction to the Product Vision Board.\nHow Does the Strategy Relate to the Vision and Roadmap?\nAnother approach to define the product strategy is to explore how it relates to other product plans. To do this, let’s take a look at my product strategy framework shown below.\nAs the image above shows, the product strategy sits between the vision and the product roadmap in my model. To put it differently, it states how you intend to realise the vision and thereby make the product successful, and it provides the necessary input to create an actionable product roadmap. The roadmap, in turn, provides the context to discover the right product details and capture them in the product backlog. You can learn more about the framework by reading the article My Product Strategy Model.\nDo You Need a Strategy for Your Product?\nNow, you might be wondering if you need a product strategy at all. Without a product strategy, you will struggle to explain how your product creates value; you will find it difficult to come up with a realistic product roadmap; and you will have a hard time determining the product details. How can you capture the right user stories, for example, if you don’t know for sure who the users are and why they would want to use your product? Finally, it will be hard to select the right key performance indicators (KPIs) and measure how much value your product creates—the product strategy forms the basis for choosing the correct KPIs. I therefore recommend that every product has a strategy. If that’s not the case for your offering, then you should create one, for example by using the product vision board template shown above.\nHow Can You Create a Strategy that likely to Result in a Successful Product?\nIt’s great to have an initial product strategy. But to increase the chances that it will result in a successful product—a product that is desirable, feasible, viable, and ethical product—you should test your plan. A great way to achieve this is to start with an initial strategy and to iteratively validate and change it, as the picture below illustrates.\nThe process above—which is loosely based on Eric Ries’ work—consists of the following four steps: First, identify the biggest risk currently contained in the product strategy. That’s the uncertainty that must be addressed now to make the right strategic decisions. A sample risk might be that the target group is not big enough or that the need identified may not be compelling enough. Second, determine the right method to address the risk such as direct observation and user interview. Third, apply the method and collect the relevant data, for example, carry out the user interviews and capture the answers in the form of notes or video footage. Fourth, evaluate the data and use the insights gained to decide how to proceed: persevere, pivot, or stop.\nPersevere means sticking with the strategy, possibly making smaller changes, and addressing the next risk. Pivot entails changing the strategy, for example, writing a book on healthy eating rather than developing an app to build on the example used earlier. Stop, finally, means what it says: to stop working on the product strategy and looking for a new idea. For a more detailed explanation of how to create and iteratively validate a product strategy, refer to my book Strategize.\nHow Do You Keep the Product Strategy Relevant and Up to Date?\nFinally, the product strategy is not a fixed, static plan that simply has to be implemented. Instead, it is changeable and dynamic. As new technologies emerge, as competitors offer new products or update existing ones, and as users’ needs evolve, your strategy has to change in order to proactively guide the product delivery and maximise the chances of offering a successful product. You should therefore regularly review your product strategy. The following four factors will help you with this.\nPerformance: How your product doing based on its key performance indicators (KPIs)?\nTrends: Are there any new technology, regulatory, or social developments that will affect your product?\nCompetition: Are your competitors launching new products or features? Is your product still sufficiently differentiated?\nCompany: Are there any significant changes in your company that affect the product strategy? For example, has the business strategy changed or have key people left?\n ","url":"https://www.romanpichler.com/blog/what-is-a-product-strategy/?replytocom=151878"},{"date_scraped_timestamp":1710925493858,"host":"www.romanpichler.com","page_title":"What Should a Head of Product Do?","text":"\n\t\n \n \n \n \n \n \n \n \n \n \n Published on 5th July 2022\n \n Last Updated on: 22 Jan 2024\n \n \n \n \n \n \n \n Becoming a head of product is a career aspiration for many product managers and product owners. But what exactly should a head of product do? Which are the responsibilities the individual should fulfil? Read on to find out my answer. \n \nListen to the audio version of this article:\nThe Head of Product Role\nA head of product is someone who manages a group of product people—individuals who look after one or more products and who may be called product manager or product owner. Depending on the size and org structure of your company, the role might also be referred to as Director of Product Management, VP Product, or Chief Product Officer.[1]\nAs the head of product, you play a key part in developing the people on your team, creating an environment that helps them succeed, and improving the effectiveness of the product management function in the enterprise.[2]\nThe responsibilities I share below are based on my work with product leaders and product practitioners. To make the duties more accessible, I have grouped them into four sets: people management, processes and tools, business strategy and organisational development, and self-leadership. Note that I have kept the description of the responsibilities concise. To learn more, please follow the links in the text.\nBe aware that there is no one right way to apply the head of product role or a golden standard for doing the job. You should therefore tailor my recommendations to your team and organisation. The best way to do this is to ask the people on the product management team how you can effectively support them.\nPeople Management\nCreate an environment where people feel valued and able to speak their minds. Genuinely care about the individuals on your team and show appreciation for their efforts. Practice active listening, empathise with the team members, speak and act with integrity, and build strong, trustful connections. Give people a choice about the products they work on, for example, by using self-selection. This increases motivation and it shows the team members that you value them.\nEnsure that the product management roles are well defined and understood by all team members. Clearly state the authority, responsibilities, and necessary skills of each role. Involve the team member in describing the roles. This leverages their expertise, creates a shared understanding, and shows them that you value their input.\nMake sure that the product people have the authority and autonomy they need to succeed in their jobs. Individuals who manage products should have full-stack ownership and be empowered to make not only tactical product decisions but also strategic ones. Additionally, ensure that the products are loosely coupled so that they can be effectively progressed and not held back by dependencies.\nSet clear expectations and agree on specific, measurable, and outcome-based goals. Having well-defined roles in place will help you with this, as I’ll discuss below.\nHold people accountable to meet the agreed goals. Use, for example, the CEDAR model and appreciative inquiry techniques to offer feedback in the right way and help people get back on track.\nDevelop the individuals on the team. Help them get better at product management and grow as product professionals. You might achieve this by having regular one-on-one meetings, mentoring and coaching the individuals as well as recommending suitable training courses. Don’t forget to capture the learning and development measures, for example, on a learning roadmap.\nEstablish clear career paths to retain team members and show them how they can advance their careers. For instance, someone might start as an associate product manager, then move into a junior and subsequently into a senior product manager role, next become a portfolio manager and finally a head of product.\nEncourage a growth mindset and create a failure-tolerant environment where experiencing setbacks and making mistakes is seen as a necessary part of learning new skills as well as bringing new products and features to live. One way to do this is to share failure experiences from your career.\nRemove impediments the team members face and act as an escalation partner for problems the individual product people cannot solve. Examples are excessive red tape and the lack of qualified Scrum Masters.\nHelp the team members practise sustainable pace so they don’t sacrifice their wellbeing but stay healthy and motivated. For example, encourage people to take regular breaks from work and don’t expect them to work extra hours, at least not on a regular basis.\nGrow the product management team. This includes creating job descriptions and interviewing candidates. A great way to develop the team is to organise around products, as I discuss in more detail in the article Tips for Growing a Product Management Team.\nHelp establish the right product management processes. For example, agree with the team members on what goals should be used to manage the products, how the product strategy work is done, how often the product strategy and roadmap are reviewed, how the right KPIs are selected, and how product backlog refinement is carried out.\nFacilitate the selection of the right product management tools, for instance, to capture the product strategy, to describe the product roadmap, and to manage the product backlog. \nHelp the people on your team continuously improve their way of working. Set some time aside once per quarter to collaboratively review the roles, processes, and tools, discuss any issues and improvement ideas, and adjust them accordingly. \nEnsure that the product portfolio—the group of products the team members look after—is effectively managed. This includes setting strategic goals for the portfolio, balancing the group of products, managing dependencies between products, and aligning release dates. As the head of product, you might be able to carry out this work, especially if the portfolio is not too large. If that’s not the case, hire a dedicated product portfolio manager who carries out the work.\nBusiness Strategy and Organisational Development\nContribute to the business strategy. Ensure that the plan is realistic and share it with the product people on your team. This will help them understand the direction the business is heading in and the strategic objectives the entire business is following.\nRepresent the product management function on the leadership team (when you act as a Director of Product Management, VP Product, or Chief Product Officer), and build strong connections with the other heads, for instance, head of development, head of marketing, and head of sales. \nLobby for the necessary organisational changes to fully establish an effective product management function, if required. This may include securing the necessary empowerment for the product people on your team and establishing a product-led way of working.\nSelf-Leadership\nLook after yourself. Ensure that your workload is sustainable and that you stay healthy and motivated. There is no point in doing an amazing job for your team and company but being constantly overworked. Cultivating mindfulness will help you spot early signs of stress so you can quickly respond and adjust your work. Developing self-compassion will help you being kind towards yourself. It avoids being overly self-critical and expecting too much of yourself.\nTake time to reflect on your own work. Identify ways to strengthen your skills, develop as a leader, and get better at guiding and supporting others. For instance, you might decide to address a lingering conflict, change your leadership style, or make a focused effort to practice active listening. \nInvest in your own career development and determine the measures that will help you take the next step.\nNotes\n[1] See Rich Mironov, “Hiring a Head of Product.”\n[2] This approach is inspired by Esther Derby’s work, which builds on Kurt Lewin insight that the behaviour an individual shows is the result of the person and the environment, see “Skills Are Only Half the Equation for Success.”\n \n \n Learn More\n You can learn more about succeeding as a head of product with the following:\n \n \n \n \n \n\t\n\t\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n","url":"https://www.romanpichler.com/blog/what-should-a-head-of-product-do/"},{"date_scraped_timestamp":1710925558338,"host":"www.romanpichler.com","page_title":"What is a Digital Product?","text":"\n \n Published on 14th June 2016\n \n Last Updated on: 21 Dec 2021\n \n \n \n \n \n \n As product professionals, we create a product strategy and product roadmap; we manage the product backlog; we release minimum viable products and product increments; and we are responsible for achieving product success. But what is a product? While it might seem a trivial question, it is surprisingly hard to answer for many organisations. But a poor understanding of this fundamental concept can lead to unclear roles and responsibilities and result in ineffective product management practices. This article offers my definition of what a digital product is and how it differs from features, components, projects, and the user experience. \n Product\nWhat is a product? It might be tempting to say, something we can market or sell. But when it comes to digital products, this definition has only limited applicability. Take the search function on your company’s website. Is that a product? Or is the entire website the product? And how would others, including people from development, marketing, and sales, answer this question?\nI view a product as an entity that creates specific value for a group of people, the customers and users, and for the organisation that develops and provides it, as the picture below shows. The former is achieved by solving a problem—think of Google Search or Bing that address the challenge of finding information on the Internet—or by providing a tangible benefit—take Facebook that allows people to stay in touch with family and friends.\nCreating value for the business is accomplished by directly generating revenue, like Microsoft Office and Adobe Illustrator do, helping promote or sell other products or services, think of iTunes and Google Chrome, for example, or increasing productivity and reducing cost, as in-house developed IT applications do.\nFinding a problem that’s worth solving—or a benefit that people would not want to miss once they’ve experienced it—and discovering a viable business model are two key prerequisites for successfully offering a product.\nProducts go through different life cycle stages: they are created and launched; they develop, grow, mature; and eventually, they die. Some digital products exist for many years and even decades. One of my clients, a company specialised in digital engineering products, offers a product that contains 30-year-old code, for instance. This distinguishes products from projects.\nProduct vs. Project\nA project delivers a specific product release—think of Windows 10 or iOS 14.5—and it is a temporary endeavour: The project is finished when the new release becomes available. But products have a different life cycle and typically exist for much longer. The ancestor of Windows 10, Windows NT, was launched in 1993, and iOS was introduced with the first iPhone in 2007, for example.\nSimilarly, products have different success criteria compared to projects. A project is successful if the new release is deployed on time and budget, and if it delivers the agreed scope. A product, however, achieves success if it meets creates the desired value for the users, the customers, and the business. Revenue-generating products typically become successful and profitable when they have achieved product-market fit and entered the growth stage. This may be months, and in some cases, years after the initial development project was finished.\nThe job of a product manager or Scrum product owner is therefore different from a project manager’s: product people are in it for the long run—assuming that the product prospers and grows.\nFeatures and Components\nIf an asset does not create value for its customers and users and for the company, then I don’t regard it as a product. Take an e-commerce site like Amazon.com or JohnLewis.com. Both offer search and check-out capabilities so that customers can find and buy goods. While these are important steps in the user journey and may require a complex technical solution involving third-party systems, I would be inclined to view them not as products but as features: end-user facing product capabilities that they do not provide value on their own to the customers and the business. I don’t go to Amazon or John Lewis just to search or to checkout. Instead, I want to buy the right product at the right price with minimum hassle. A feature does therefore not address a need or solve a problem on its own. Instead, several features have to interact to create the desired value.\nSimilarly, a user-interface layer or a (micro) service that talks to a payment gateway are not products but components, or more accurately, architecture building blocks—even if they are developed by a dedicated team. Both building blocks may offer a benefit to a group of people—the developers of other components and services—but they don’t create any measurable value for the company.\nIf you manage a feature or component, then that’s perfectly fine. But I don’t think you should be called a product manager or product owner. The terms feature owner or component owner describe your role more accurately: they clearly communicate your responsibilities and avoid confusion and unrealistic expectations. (See my post The Agile Product Owner Responsibilities for more information on how distinguishing between products, features, and components helps you define the right roles and responsibilities.)\nWeb vs. Mobile\nDigital products are often provided in different forms. Google Search and Facebook are both available as a website and mobile app, for example, and the mobile apps are offered on all major mobile operating systems, including Android and iOS. Does this mean that the mobile version is a product in its own right? And similarly, are the Android and iOS apps separate products?\nMy answer to both questions is no. Here is why: The assets create the same value for their customers and users and for the company that provides them. They may consist of separate code bases developed by different teams and the mobile version might differ in the user experience and functionality offered. But the core value proposition is the same. I therefore view the mobile versions of a product as different product variants, variations of the same product.\nUnbundling Features and Product Bundles\nInterestingly, features and components can become products in their own right. Take the Facebook Messenger app for example. The messenger feature used to be part of the main Facebook app until it was unbundled in April 2014. This streamlined the main Facebook app and it allowed Facebook to evolve the Messenger app by adding new features, such as sending money to friends, communicating directly with businesses, and using chatbots.\nIf we look at Facebook.com, then we see that messenger functionality is still offered alongside newsfeed and other features. I therefore regard the Facebook website as a product bundle—a collection of related products, including newsfeed, messenger, and games apps. While some products evolve into bundles, as Facebook arguably did, others are intentionally bundled together to provide value to the customers and users and/or increase sales. Microsoft, for instance, decided in the late 1980ies to bundle several apps, including Word, Excel, and PowerPoint, into Microsoft Office.\nThe following image shows the relationship between product bundle, product, feature, and component. A product bundle contains several products, and a product has one or more features and components.\nUser Experience\nThe user experience, finally, arises when people interact with a product. It is therefore not the product. While the look-and-feel and the functionality of the product can trigger a specific experience—think of slow loading web sites, complex menus, or cryptic error messages that can test the users’ patience or leave them confused, it is important to recognise that the experience people have is also determined by their state of mind.\nIf I am stressed, upset, or angry, I get much more worked up when experiencing a slow loading site, for instance, than when I am my normal self. We should do everything we can to offer a great, pleasant user experience, but we cannot make people experience the product in one specific way. The picture below illustrates the difference between the user experience and the product.\n ","url":"https://www.romanpichler.com/blog/what-is-a-digital-product/"},{"date_scraped_timestamp":1710925704985,"host":"www.romanpichler.com","page_title":"When should Product Backlog Refinement Take Place?","text":"\n \n Published on 25th January 2017\n \n \n \n \n \n \n \n A refined product backlog facilitates the development of a successful product: It incorporates new insights and learning, and it provides items that are ready to be implemented. But when should you work on the backlog? Before the new sprint starts or afterwards? And how can you decide which option is appropriate? In this post, I discuss four options with their benefits and drawbacks to help you make the right choice. \n Option 1: In the Sprint Review Meeting\nYour first option is to work on the product backlog in the sprint review meeting. Assuming that the development has developed a “done” product increment and the right people are present, you can use the attendee’s feedback to make the relevant product decisions and update the product backlog, as the Scrum Guide suggests and the following picture shows.\nThis approach ensures that the backlog is updated before the next sprint starts. This allows you to immediately action any new insights thereby mitigating the risk of taking the product in the wrong direction. Additionally, the backlog is collaboratively worked on. This creates strong buy-in from the people participating in the sprint review meeting.\nBut it only works if the attendees are able to provide relevant feedback, are willing to collaborate and can quickly agree on the necessary backlog changes. What’s more, the feedback must not require further analysis or give rise to bigger product backlog changes. Don’t use this option if a significant amount of uncertainty and change is present in your product backlog, for example, if you work on a new product or extend your product’s life cycle.\nOption 2: In a Separate Workshop Prior to Sprint Planning\nYour second option is to have a separate product backlog workshop prior to the next sprint planning meeting. The workshop should include you as the Scrum product owner, the development team, and the Scrum Master. Collaboratively analysing the data and working on the backlog, mitigates the risk of drawing the wrong conclusions due to cognitive biases like confirmation bias; it leverages the creativity and knowledge of the team, increases understanding and buy-in, and leads to better requirements.\nAs the picture above illustrates, my preference is to hold the workshop right at the beginning of the next sprint. This violates the Scrum rule that the sprint planning meeting must be the first event in every sprint. But it allows you to respond to the feedback in the subsequent sprint without rushing or dropping the sprint retrospective or working late or at the weekend.\nWhat’s more, it provides the benefit of separating the data collection from the analysis: It enables you to review the feedback without the people present who provided it. It also give you more time to assess the feedback, derive the right insights, make the right product decisions, and change the product backlog accordingly. This makes it easier to deal with difficult feedback and requests, and to carry out bigger product backlog changes.\nNote that this approach still assumes that you can collect the relevant feedback in the sprint review meeting, for instance, by carrying out a product demo, usability test, or solution interview. If you decide to release the product increment to (selected) users, then this option is unlikely to be appropriate for you, as it often takes several days to collect the relevant data in my experience.\nOption 3: In a Separate Workshop After Sprint Planning\nIf you validate your product decisions by releasing software to (selected) users, then this option may suit you. It suggests that you hold a product backlog workshop involving the development team and Scrum Master after the next sprint planning has taken place, as the picture below shows.\nThis approach assumes that you require several days to gather the relevant user data before you can analyse it and make the appropriate backlog changes. It also assumes that you don’t have to wait for the data to arrive to decide on the next sprint goal. Instead, you can continue with the next sprint while collecting the data.\nWhile option three allows you to validate your product quantitatively, it too has a drawback: As sprints are protected, the earliest point in time you can respond to the backlog changes is sprint+2. It is therefore advisable to start with option one and two, and use option three once the crucial risks in the backlog have been addressed. Additionally, you should focus on different features in sprint n+1 compared to sprint n in order to avoid the danger of continuing to move your product in the wrong direction.\nOption 4: Continuously\nIf you don’t need to wait until the end of the sprint before you release a new or improved piece of functionality, then you will benefit from continuously collecting data, analysing it, and changing the product backlog accordingly. You may want to set a side 30 minutes every morning to look at the latest data and draw the right conclusion from it, preferably with the help of the development team or some of its members.\nNote that option 4 assumes that you either make small incremental improvements to a product or that you run multiple overlapping experiments to test ideas for new or improved features, for example, by releasing feature fakes or MVFs.\nStrictly speaking, Scrum is not well suited to support this approach. The model assumes that a cross-functional development team works together for several weeks to achieve a shared sprint goal and deliver a product increment. A sprint is intended to run one experiment or implement related product functionality. It’s not particularly well suited to execute multiple tests and to continuously release smaller enhancements and bug fixes. You might therefore consider changing from Scrum to a Kanban-based process, as I discuss in more detail in my article “Is Scrum Right for Your Product?“\n ","url":"https://www.romanpichler.com/blog/when-should-product-backlog-refinement-take-place/"},{"date_scraped_timestamp":1710925727192,"host":"www.romanpichler.com","page_title":"When should Product Backlog Refinement Take Place?","text":"\n \n Published on 25th January 2017\n \n \n \n \n \n \n \n A refined product backlog facilitates the development of a successful product: It incorporates new insights and learning, and it provides items that are ready to be implemented. But when should you work on the backlog? Before the new sprint starts or afterwards? And how can you decide which option is appropriate? In this post, I discuss four options with their benefits and drawbacks to help you make the right choice. \n Option 1: In the Sprint Review Meeting\nYour first option is to work on the product backlog in the sprint review meeting. Assuming that the development has developed a “done” product increment and the right people are present, you can use the attendee’s feedback to make the relevant product decisions and update the product backlog, as the Scrum Guide suggests and the following picture shows.\nThis approach ensures that the backlog is updated before the next sprint starts. This allows you to immediately action any new insights thereby mitigating the risk of taking the product in the wrong direction. Additionally, the backlog is collaboratively worked on. This creates strong buy-in from the people participating in the sprint review meeting.\nBut it only works if the attendees are able to provide relevant feedback, are willing to collaborate and can quickly agree on the necessary backlog changes. What’s more, the feedback must not require further analysis or give rise to bigger product backlog changes. Don’t use this option if a significant amount of uncertainty and change is present in your product backlog, for example, if you work on a new product or extend your product’s life cycle.\nOption 2: In a Separate Workshop Prior to Sprint Planning\nYour second option is to have a separate product backlog workshop prior to the next sprint planning meeting. The workshop should include you as the Scrum product owner, the development team, and the Scrum Master. Collaboratively analysing the data and working on the backlog, mitigates the risk of drawing the wrong conclusions due to cognitive biases like confirmation bias; it leverages the creativity and knowledge of the team, increases understanding and buy-in, and leads to better requirements.\nAs the picture above illustrates, my preference is to hold the workshop right at the beginning of the next sprint. This violates the Scrum rule that the sprint planning meeting must be the first event in every sprint. But it allows you to respond to the feedback in the subsequent sprint without rushing or dropping the sprint retrospective or working late or at the weekend.\nWhat’s more, it provides the benefit of separating the data collection from the analysis: It enables you to review the feedback without the people present who provided it. It also give you more time to assess the feedback, derive the right insights, make the right product decisions, and change the product backlog accordingly. This makes it easier to deal with difficult feedback and requests, and to carry out bigger product backlog changes.\nNote that this approach still assumes that you can collect the relevant feedback in the sprint review meeting, for instance, by carrying out a product demo, usability test, or solution interview. If you decide to release the product increment to (selected) users, then this option is unlikely to be appropriate for you, as it often takes several days to collect the relevant data in my experience.\nOption 3: In a Separate Workshop After Sprint Planning\nIf you validate your product decisions by releasing software to (selected) users, then this option may suit you. It suggests that you hold a product backlog workshop involving the development team and Scrum Master after the next sprint planning has taken place, as the picture below shows.\nThis approach assumes that you require several days to gather the relevant user data before you can analyse it and make the appropriate backlog changes. It also assumes that you don’t have to wait for the data to arrive to decide on the next sprint goal. Instead, you can continue with the next sprint while collecting the data.\nWhile option three allows you to validate your product quantitatively, it too has a drawback: As sprints are protected, the earliest point in time you can respond to the backlog changes is sprint+2. It is therefore advisable to start with option one and two, and use option three once the crucial risks in the backlog have been addressed. Additionally, you should focus on different features in sprint n+1 compared to sprint n in order to avoid the danger of continuing to move your product in the wrong direction.\nOption 4: Continuously\nIf you don’t need to wait until the end of the sprint before you release a new or improved piece of functionality, then you will benefit from continuously collecting data, analysing it, and changing the product backlog accordingly. You may want to set a side 30 minutes every morning to look at the latest data and draw the right conclusion from it, preferably with the help of the development team or some of its members.\nNote that option 4 assumes that you either make small incremental improvements to a product or that you run multiple overlapping experiments to test ideas for new or improved features, for example, by releasing feature fakes or MVFs.\nStrictly speaking, Scrum is not well suited to support this approach. The model assumes that a cross-functional development team works together for several weeks to achieve a shared sprint goal and deliver a product increment. A sprint is intended to run one experiment or implement related product functionality. It’s not particularly well suited to execute multiple tests and to continuously release smaller enhancements and bug fixes. You might therefore consider changing from Scrum to a Kanban-based process, as I discuss in more detail in my article “Is Scrum Right for Your Product?“\n ","url":"https://www.romanpichler.com/blog/when-should-product-backlog-grooming-take-place/"},{"date_scraped_timestamp":1710925744297,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=124828"},{"date_scraped_timestamp":1710925639107,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=127323"},{"date_scraped_timestamp":1710925777895,"host":"www.romanpichler.com","page_title":null,"text":null,"url":"https://www.romanpichler.com/blog/tips-for-saying-no-to-stakeholders/?replytocom=55544"},{"date_scraped_timestamp":1710925454682,"host":"www.romanpichler.com","page_title":null,"text":null,"url":"https://www.romanpichler.com/blog/my-product-strategy-model/"},{"date_scraped_timestamp":1710925529604,"host":"www.romanpichler.com","page_title":"10 Tips for Creating an Agile Product Roadmap","text":"\n \n Published on 20th July 2016\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n A product roadmap is a powerful tool to describe how a product is likely to grow, to align the stakeholders, and to acquire a budget for developing the product. But creating an effective roadmap is not easy, particularly in an agile context where changes occur frequently and unexpectedly. This post shares ten practical tips to helps you create an actionable agile product roadmap. \n 1 Focus on Goals and Outcomes\nWhenever you are faced with an agile, dynamic environment—be it that your product is experiencing significant change or that the market is dynamic with new competitors or technologies introducing change, you should work with a goal-oriented product roadmap, sometimes also referred to as outcome-based.\nSuch a roadmap focuses on product goals, benefits, or outcomes like acquiring customers, increasing engagement, and removing technical debt. Features might still exist, but they should derived from the goals and used carefully. I like to recommend using no more than three to five features per goal, as a rule of thumb.\nTo help you develop your agile product roadmap, I have created a goal-oriented roadmap template called the GO Product Roadmap. It consists of five elements: date, name, goal, features, and metrics, as the picture below shows. You can download the template for free from romanpichler.com/tools, and you can find more information on how to use it in my article The GO Product Roadmap.\n2 Do the Necessary Prep Work\nBefore you create your roadmap, capture and validate the product strategy. I like to regard the strategy as the path chosen to realise your vision and the roadmap as an actionable product plan that communicates how the strategy is implemented. In other words, I like to derive the roadmap from the strategy.\nAn effective strategy should describe the product’s value proposition, the target market. standout features, and business goals. Make sure that you can confidently state these, that you have done the necessary product strategy work. Otherwise, you risk creating a product roadmap that is not realistic and actionable.\nI like to use my Product Vision Board to describe the product strategy. The board captures the vision, the target group, the problem to be solved or the benefit to be provided, the key features of the product, and the business goals. You can download the Product Vision Board template from romanpichler.com/tools/ for free.\n3 Tell a Coherent Story\nYour product roadmap should tell a coherent story about the likely growth of your product. Each goal should build on the previous one, particularly as long as your product has not reached maturity.\nTo come up with the right roadmap narrative, follow these two tips: First, break the user, customer, and business goals stated in the product strategy into specific and measurable subgoals. Then order the subgoals so that they form a coherent story. If I wanted to offer a healthy eating product, for example, that helps middle-aged men reduce the risk of developing type-2 diabetes, the the goal of the first, initial release (MVP) might be to build a user community. The goal of the second release might be to increase engagement, and the goal of the third one might be to generate revenue.\nSecond, resist the temptation to add goals and features to the product roadmap to please powerful stakeholders or broker a deal. While I am a big fan of collaborative product roadmapping, this should not result in weak product decisions and compromises, see my tips Secure Strong Buy-in and Have the Courage to Say No below. \n4 Keep it Simple\nBe careful not to add too many details to your product roadmap. Keep your roadmap simple and easy to understand. Capture what really matters and leave out the rest by focusing on the goals. Keep the features on your roadmap coarse-grained and derive them from the goals. Do not show epics or user stories on your product roadmap but keep them in the product backlog. Use the product roadmap as a strategic product plan and the product backlog as a detailed one that facilitates execution, as the picture below shows.\n5 Secure Strong Buy-in\nThe best product roadmap is worthless if the people required to develop, market, and sell the product don’t buy into it. A great way to get to agreement is to collaborate with the key stakeholders and involve them in creating and updating the product roadmap. This allows you to leverage their ideas and knowledge, it creates shared understanding, and it makes it more likely that people will support the plan.\nRunning a collaborative roadmapping workshop is a great way to engage everyone and create a shared product roadmap, as the following picture illustrates.\nMake sure, though, that you ask a skilled facilitator, for instance, your Scrum Master, to facilitate the workshop. This includes choosing the right decision rule, for example, consent, and ensuring that everyone is heard and nobody dominates. (See my article Making Effective Product Decisions for more help on how to successfully decide with stakeholders and dev team members.)\n6 Have the Courage to Say No\nWhile you want the key stakeholders to support the product roadmap, you should not make the mistake to say yes to every idea and request. This would turn your product into a feature soup, a random collection of features. “Innovation is not about saying yes to everything. It’s about saying no to all but the most crucial features,” said Steve Jobs. Use your vision and product strategy to make the right decisions.\nBut before you explain why an idea or request cannot be added to the product roadmap, carefully listen to the stakeholder’s idea. Take a genuine interest in what the individual  has to say and seek to understand her or his underlying need or motivation. This makes the person feel valued and understood, which will make it more likely that the individual is able to hear a negative answer and is still willing to support the roadmap. (See also my article 5 Tips Saying No Stakeholders.)\n7 Know When to Show Dates\nDates on product roadmaps has been a hotly debated topic amongst some product people for a while. I recommend using dates or time frames on an internal roadmap that coordinates the work carried out by the internal stakeholders, such as, marketing, sales, and support, and the development team. This helps you make important trade-off decisions between shipping on time and fully meeting a goal. What’s more, it provides clarity for the stakeholders and development teams helping them do their work.\nBut when you use an external roadmap that is shown to customers and users and often used as a sales tool, then I suggest not showing any dates or time frames but sequencing your releases and possible employing a now-next-later grid to order them. Please see my article “Should Product Roadmaps Have Dates?” for more information.\n8 Make your Roadmap Measurable\nWhen using a goal-oriented roadmap, ensure that every goal is specific and measurable so you can tell if you have met the goal or not. If your goal is to acquire customers, for example, then ask yourself how many new customers should be acquired; and if your goal is to reduce technical debt, determine how much of the bad code should be removed or rewritten.\nIf you don’t state a target, it will be hard to tell if you have met the goal or not. Make sure, though, that you state a realistic target, and that the goals on your roadmap are feasible. Then select the metrics that will help you determine if a goal has been met and if a goal has been met and the desired benefit has materialised.\n9 Determine Cost Top-Down\nWhenever your product experiences a significant amount of change and innovation, I recommend that you do not attempt to determine the development cost bottom-up but rather top-down. It’s virtually impossible to derive the right epics and user stories from the roadmap features, get correct estimates from your team, and accurately anticipate the velocity and the rate of change in the product backlog. Even if you manage to make it work, you will end up with an overly long and complex product backlog that is difficult to adjust and maintain. What’s more, it can take days—and in some cases weeks—to turn the features into well-defined requirements and to come up with detailed estimates.\nInstead, determine how many people with which skills are likely to be required to create the desired releases on the roadmap. Draw on your experience of developing similar products or previous versions of the same product; consider whether enough people with the right expertise are available in your company, or if you will have to hire or contract people. This should give you an indication of the likely labor cost required. Then add the cost for facilities, infrastructure, materials, licenses, and other relevant items. Carry out this exercise together with the development team.\n10 Regularly Review and Adjust the Roadmap\nLast but not least: If the environment you’re in is agile, then change is likely to occur. You should therefore regularly review and update your product roadmap—between every four weeks to every three months depending on how young your product and how dynamic the market is.\nCombine your product roadmap and product strategy reviews. This ensures that the two plans are kept in synch, that bigger roadmap changes are reflected in the strategy and vice versa. \n ","url":"https://www.romanpichler.com/blog/10-tips-creating-agile-product-roadmap/"},{"date_scraped_timestamp":1710925683718,"host":"www.romanpichler.com","page_title":"10 Tips for Using Key Performance Indicators","text":"\n \n Published on 14th December 2015\n \n Last Updated on: 18 Jul 2023\n \n \n \n \n \n \n Product key performance indicators, or KPIs for short, are metrics that measure the performance of a product. They help you understand if the product is creating the desired value. Without KPIs, you end up guessing how your product is doing. But choosing the right indicators is not always straightforward, and I have seen many product people struggle with it. This post shares my tips on how to select those KPIs that really help you understand how your product is doing. \n \n1 Use the User, Business, and Product Goals to Choose the Right KPIs\nTo select the right key performance indicators or KPIs, you must be clear on the user and business goals your product serves. If your product directly generates revenue, then revenue is likely to be a key indicator, for example. If you are not sure what these goals are, then ask yourself how the product benefits the users and the company. Why would people want to use it and why would the business want to invest in it? Then take the next step and capture the goals using, for instance, my Product Vision Board. You can download the tool and find out how to use it at romanpichler/tools/product-vision-board.\nAdditionally, use any product goals that you have set for your product to derive further KPIs and complete your set of indicators. Product goals are specific benefits or outcomes that your product should create. These goals should be derived from, or at least aligned with, the user and business goals. I capture them on a product roadmap like my GO roadmap, as I explain in more detail in my article How to Choose the Right KPIs for your Product.\n2 Make the Goals Specific\nKnowing the business goals of your product is a prerequisite for selecting the right KPIs. But it is not enough. To effectively apply the indicators, analyse the resulting data, and take the right actions, the goals must be specific and realistic. Establishing such goals can be challenging, particularly for brand-new and young products. The next tips will help you with this.\n3 Use Ratios and Ranges\nWork with ratios and ranges to describe your goals, as Alistair Croll and Benjamin Yoskovitz recommend in their book Lean Analytics. Instead of stating that a new product should create x amount of revenue per year, you could say that the product should increase the company’s revenue by five to 10% within one year after its launch, for instance. While you might not be sure that goal will be met, at least you have drawn a line in the sand against which progress can be measured. If it turns out that the goal is too ambitious, then you move the line and adjust the target.\n4 Avoid Vanity Metrics\nStay clear of vanity metrics, measures that make your product look good but don’t add value. Take the number of downloads for an app as an example. While a fair amount of people might download the product, this tells you little about how successful it is. Instead of measuring downloads, you should choose a relevant and helpful metric, such as daily active usage or referral rate.\n5 Don’t Measure Everything that Can Be Measured\nDon’t measure everything that can be measured and don’t blindly trust an analytics tool to collect the right data. Instead, use the business goals to choose a small number of metrics that truly help you understand how your product performs. Otherwise, you take the risk of wasting time and effort analysing data that creates little or no insights. In the worst case, you action irrelevant data and make the wrong decisions.\n6 Use Quantitative and Qualitative KPIs\nAs their name suggests, quantitative indicators, such as daily active users or revenue, measure the quantity of something rather than its quality. This has the benefit of collecting “hard” and statistically representative data. Qualitative indicators, such as user feedback, help you understand why something has happened, for instance, why users aren’t as satisfied with the product as expected. Combining the two types gives you a balanced outlook on how your product is doing. It reduces the risk of losing sight of the most important success factor: The people behind the numbers, the individuals who buy and use the product.\n7 Employ Lagging and Leading Indicators\nLagging indicators, such as revenue, profit, and cost, are backwards-focused and tell you about the outcome of past actions. Leading indicators help you understand how likely it is that your product will meet a goal in the future. Take product quality as an example. If the code is becoming increasingly complex, then adding new features will become more expensive and require more time. Meeting profit targets and delivery dates will therefore become harder. Using backward and forward-focused indicators allows you to tell if you have met the business goals and helps you anticipate if the product is likely to meet the goals in the future.\n8 Look beyond Financial and Customer Indicators\nFinancial indicators, such as revenue and profit, and customer metrics, including engagement and referral rate, are the two most common indicator types in my experience. While these metrics are undoubtedly important, they are not sufficient. Say your product is meeting its revenue and profit goals and that customer engagement and referral rate are high. This suggests that your product is doing well and that there is no reason to worry. But if at the same time, the team motivation is low or if the code quality is deteriorating, then you should be concerned: These indicators suggest that achieving product success will be much harder in the future. You should therefore look beyond financial and customer indicators and complement them with the relevant product, process, and people indicators.\n9 Leverage Trends\nCompare the data you report to other time periods, user groups, or competitors, such as revenue growth over the last six weeks or cancellation rates from quarter to quarter. This helps you spot trends, for instance, if revenue is increasing, staying flat, or declining. Trends allow you to better understand what’s happening and to take the right actions. If a decline in revenue is a one-off occurrence, for instance, then there is probably no reason to be overly worried. But if it is a trend, then you should investigate how you can stop and revert it – unless you are about to sunset your product.\n10 Use a Product Scorecard\nOnce you have selected the right key performance indicators for your product, you should collect the relevant data and regularly analyse it. A product scorecard like the on shown below is a great tool for this job. An effective scorecard uses the right indicators and helps you spot trends.\n ","url":"https://www.romanpichler.com/blog/10-tips-for-product-key-performance-indicators-kpis/?replytocom=43359"},{"date_scraped_timestamp":1710925767494,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/?replytocom=39297"},{"date_scraped_timestamp":1710925497873,"host":"www.romanpichler.com","page_title":"A Brief Guide to Product Strategizing","text":"\n \n Published on 6th October 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n When practiced correctly, product discovery maximises the chances of achieving product success. Unfortunately, I find that it's not uncommon that companies lack an effective product discovery approach. This article offers help. It explains what product discovery is, why it matters, and how it helps you maximise the chances of creating a successful product. It discusses when, how and by whom product discovery should be carried out. Finally, it describes how product discovery helps you progress existing products. \n \nWhat is Product Strategizing?\nProduct strategizing describes the activities required to determine if and why a product should be developed and offered. This increases the chances of creating a product that users actually want and need and achieving product success, and it involves answering the following questions:\nWhat is the specific value the product should create for the users and customers? What problem should it solve, or which benefit should it create?\nWhich market and market segment should the product address? Who are the users and who are the customers?\nWhat makes the product stand out? How will it differ from competing offerings?\nWhat are its business goals? How will it benefit the company? For example, generate revenue or meet a profit margin, reduce cost, or develop the brand?\nWhat business model will it use in order to achieve the business goals, including revenue sources, cost factors, and channels?\nWill the product make a positive impact on people’s lives, the wider society, and the planet, or will it at least not cause any harm?\nHow might people use the product? What are the major touch points? What kind of user experience (UX) should the product give rise to?\nHow can the product be built? What architecture patterns and technologies may be used?\nIn order to answer the questions above, you may want to use techniques such as direct observation, user interviews, prototyping, creating a strategy canvas or E-R-R-C grid, and you may capture some of them using a tool like my Product Vision Board. Whatever you do, I suggest that you follow Steve Blank’s advice and “get out of the building”. Meeting users and customers, at least in the form of a video call, not only helps you validate your assumptions and develop new ideas. It also allows you to empathise with the individuals and to better understand their perspectives and needs.\nI find it helpful to distinguish two types of product strategizing: timeboxed and continuous discovery. Let’s look at timeboxed strategizing first.\nTimeboxed Product Strategizing\nWhenever you create a brand-new product or when you make bigger changes to an existing one, like taking it to a new market, you will benefit from using a dedicated, timeboxed product strategy period. This results in an innovation process like the one shown in the picture below.\nIn the picture above, the product strategy work precedes product development. The former focuses on understanding if and why a product should be created or updated. The latter largely determines how the product should be developed. This includes discovering the right UX design and functionality and making the right technical decisions.\nNote that I have purposefully drawn discovery and development as overlapping, as I find it helpful to address major UX and technical risks as part of the strategizing work—without making the mistake of using big design upfront (BDU). Addressing these risks ensures that the development team has the right knowledge to hit the ground running when starting development. Consequently, the key deliverables include the following:\nValidated product strategy and business model,\nActionable product roadmap that implements the strategy,\nValid business model,\nInitial product backlog that captures the necessary product details,\nA high-level UX design concept and coarse-grained software architecture supplemented by throwaway prototypes (spikes).\nAs it’s notoriously difficult to correctly forecast how much time a bigger piece of strategy work will require, I recommend timeboxing it. To do so, consider the amount of innovation and risk present and allocate an appropriate timebox. If you were to develop a brand-new product for a new market with new technologies, for instance, then you would face more risks compared to taking an existing product to a new market. Consequently, the former will require more time than the latter. You might want to allocate, say, two months for the first initiative, but only two weeks for the latter, assuming that you already serve the new target market. Additionally, I recommend running weekly review sessions to understand the progress of the discovery work and adapt it if necessary.\nTo carry out the strategizing work, bring together the right people, product person, development team representative, key stakeholders, and Scrum Master or agile coach, as shown in the picture below.\nAs the person in charge of the product, you should lead the strategizing and development effort. Here’s why: You can’t be responsible for maximising the value a product creates if you don’t actively participate in, guide the discovery work, and shape strategic product decisions.\nDevelopment team representatives—ideally a UX designer, one or two developers, and a tester—should also engage in the discovery activities. This leverages the individuals’ knowledge and creativity; it surfaces feasibility issues and technical risks; and it allows the team members acquire knowledge about the market and users and understand why the product is being created or updated. The latter will enable the development team to make the right design and technical decisions and own the solution. Do make sure that the individuals continue to work on the team in development and help build the product. Otherwise, you are likely to lose precious knowledge and time.\nInviting the key stakeholders to participate in the product strategy work ensures that their ideas and concerns are taken into account at an early stage; it takes advantage of their expertise; and it maximises the chances that they will support the resulting strategic product decisions: When people are given the opportunity to contribute to a decision, they are more likely to understand and buy into it.\nThe Scrum Master or agile coach, finally, should facilitate the discovery process and the meetings in order to ensure that everybody is heard, and nobody dominates. This may include suggesting applying a Kanban-based process to visualise and manage the discovery and strategy work, as I recommend in my book Strategize.\nContinuous Strategizing\nAs helpful as timeboxed product strategizing is, it is not enough. Here is why: When you create a brand-new product, you typically aim to launch a minimum viable product (MVP), a good enough offering that addresses the early market. To achieve product-market fit and make the product successful, more discovery work is required: You now need to figure out how to adapt your product to serve the needs of the mainstream market. But even once you’ve entered the growth stage, you can’t afford to neglect the product strategy. The world doesn’t stand still: Markets and technologies change, competitors improve their products, and new market entrants may appear.\nProduct management is therefore like riding a bike: When I am on my bike—which is one of my favourite pastime activities—I have to turn the cranks, change gears, steer the bike, and so on. But if I forget to look ahead, I’ll sooner or later get lost or even crash. The same is true for your product: If you are completely immersed in execution and forget about discovery, you’re likely to miss an opportunity or threat and experience difficulties further down the line.\nIt is therefore important that you carry out continuous strategizing. This includes the following activities:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What measures would help you achieve the desired product performance?\nLook for opportunities. Are there any new technology, regulatory, or social trends that you should be aware of? Do they offer an opportunity to innovate, add, remove, or enhance product features, or even create a brand-new product? Talking to users, attending trade shows and conferences, and participating in online communities can help you spot new trends. Giving the dev team time to investigate new technologies will allow you to take advantage of opportunities and improve your product.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there any new market entrants? Should you respond to any of these changes? If so, which actions are appropriate? Job postings can help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow the developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? \nTo help you answer the questions above and carry out the related work, I recommend the following two measures:\nFirst, block at least one hour per day in your calendar to carry out the necessary product strategy work. This helps you avoid nasty surprises, such as a competitor leapfrogging you by offering a new killer feature, and it makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or a growing number of support calls. This allows you to be responsive and take action early.\nSecond, regularly hold collaborative strategy reviews, once per quarter, as a rule of thumb. Assess the product strategy and product roadmap together with development team representatives and key stakeholders. These are ideally the same people who participated in the timeboxed discovery work and who helped you create the current product strategy and roadmap. As mentioned before, involving dev team members and stakeholders leverages their collective creativity and knowledge, creates alignment, and mitigates the risk that the individuals don’t support necessary strategy changes.\nA Few Thoughts on Product Strategy in a Scaled Environment\nIf you manage a larger product and you work in a scaled environment, don’t forget to involve the other people who look after the product, for example, feature and component owners or SAFe product owners, in both timeboxed and continuous strategizing.\nIn addition to the collaboration benefits already mentioned, this makes it more likely that strategic decisions will be translated into tactical ones, and it ensures that tactical insights—like the knowledge gained from analysing user feedback on specific features—inform the strategic decisions.\n ","url":"https://www.romanpichler.com/blog/a-brief-guide-to-product-discovery/"},{"date_scraped_timestamp":1710925676973,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2612"},{"date_scraped_timestamp":1710925760035,"host":"www.romanpichler.com","page_title":"Eliminate Features to Differentiate your Product","text":"\n \n Published on 27th April 2015\n \n \n \n \n \n \n \n It is tempting to add more and more features to make your product stand out and differentiate it from the competition. While this can be an appropriate strategy at times, it carries the risk of creating an overly complex product with a vague value proposition and a poor user experience. It can therefore be useful to explore which ones you can reduce or even eliminate. This post shows you how to do it. \n A great tool for discovering opportunities to remove features is the Eliminate-Reduce-Raise-Create grid. The grid, which forms part of the Blue Ocean Strategy, encourages you to identify the key features that are used to compete in the marketplace, be it by your own product or the competitors. You then determine which of those features your product can eliminate and which it should provide to a lesser extend or in an inferior way. But that’s not all. The grid also encourages you to identify new and improved features that set your product apart. This leads to a matrix with four quadrants that give the grid its name: Eliminate, Reduce, Raise, and Create.\nLet’s take a look at an example and apply the grid to the first iPhone, which was launched in 2007.\nAs the picture above shows, the first iPhone eliminated a number of smartphone features that were considered a standard or must-have back in 2007. These included different models to choose from, a physical keyboard and a stylus to write on the screen. Additionally, it reduced a number of features such as the voice and the camera quality and the email integration (no POP and no Exchange support), which its competitors excelled in.\nBut the iPhone also provided enhanced and genuinely new features as shown in the “Raise” and “Create” quadrants above. These include mobile Internet in form of the Safari browser, integrating the iPod with a mobile phone, a brand-new eye-catching design, and a revolutionary touch screen. Removing and weakening features helped Apple reduce time-to-market, resulted in an uncluttered, easy to use product, and made the product stand out.\nBefore you decide which features you are going to remove or reduce, ensure that you have a solid understanding of your target group and the problem your product solves or the benefit it provides. You will also benefit from a good portion of courage. It’s always easier to create a me-too product than to do something different. But “innovation is not about saying yes to everything. It’s about saying no to all but the most crucial features,” as Steve Jobs once said.\n ","url":"https://www.romanpichler.com/blog/eliminate-features/"},{"date_scraped_timestamp":1710925458304,"host":"www.romanpichler.com","page_title":"Everything You Need to Know about Product Portfolio Strategy","text":"\n \n Published on 22nd January 2024\n \n Last Updated on: 26 Jan 2024\n \n \n \n \n \n \n Products often don’t exist in isolation. Instead, they are part of a product portfolio. Think of Word, Excel, and PowerPoint, which belong to Microsoft Office. Such a portfolio benefits from having a dedicated strategy—a product portfolio strategy. But what information should it contain? Which template can you use to describe it? How does it relate to the overall product portfolio management work? And who should create and update the strategy? Read on to find out my answers. \n \nListen to the audio version of this article:\nWhat Is a Product Portfolio Strategy and Why Does It Matter?\nA product portfolio strategy is a high-level plan that helps you maximise the value a group of products creates. It achieves this by setting overarching goals for the entire portfolio. These guide and align the strategies of the portfolio members, as Figure 1 illustrates.\nFigure 1: The Product Portfolio and Product Strategy Using Microsoft Office as an Example\nIn Figure 1, the strategies of the individual products—Word, PowerPoint, and Excel—implement the Office strategy. Their visions, target groups, needs, standout features, and business goals must comply with the overall portfolio strategy.[1]\nProduct Portfolio, Product Family, and Product Line—What’s the Difference?\nA product portfolio is a group of products. These might be end-user-facing or internal ones like a software platform, for instance; they might directly generate revenue or support commercial offerings. Larger companies often have several portfolios; early-stage startups, in contrast, usually have a singleton one—it consists of just one offering.\nA product family is commonly defined as a group of related products. You can therefore view it as a cohesive product portfolio—a portfolio whose members have related value propositions and/or business goals, for example, Adobe Creative Cloud and Microsoft Office.\nA product line is a set of product variants. You can think of Microsoft Visio as a product line, as it is offered in three versions at the time of writing—basic, standard, and advanced. Another example is YouTube, which is available in three variants—standard, premium, and kids.\nWhich Specific Information Should the Portfolio Strategy Contain?\nAn effective product portfolio strategy should contain five elements—an overarching vision that describes its purpose, the positive change it should bring about; the markets and market segments the portfolio serves; the overall value it creates for the users and customers; the business benefits it helps achieve; and the type of products it contains with the capabilities that set them apart from competitors.\nTo make this more concrete, let’s explore how the Microsoft Office strategy might be captured.[2]\nFigure 2: A Sample Product Portfolio Strategy\nIf you are familiar with my work on product strategy, you’ll recognise the structure I’ve used in Figure 2: It is based on the Product Vision Board—the tool I’ve developed to capture a product vision and a product strategy. This means that you can apply my strategy approach not only to individual products but also to your product portfolio.\nTo get started, create your own Portfolio Vision Board by downloading and adapting the Product Vision Board or by recreating it in your favourite tool. Please make sure, though, that you state the author and source of the Product Vision Board as well as the CreativeCommons BY-SA license on your derived portfolio board—like I did in Figure 2. If you haven’t worked with the Vision Board, then read the article The Product Vision Board and watch the video Product Vision Board Introduction.\nBut despite the structural similarity between a portfolio and a product strategy, there is an important difference: Due to its nature, a portfolio strategy has to be bigger and less specific than a product strategy—it covers several products and not just a single one. This means that its target group, needs, standout features, and business goals are significantly less specific than those in a product strategy.[3]\nHow Does the Product Portfolio Strategy Direct the Product Strategies?\nNow that we understand which information a portfolio strategy should contain, we can take a closer look at how it guides the strategies of the products it contains using Office as an example. The Word, PowerPoint, and Excel visions have to either support the Office vision or, which is my preference, they inherit it. This way, they share the same purpose—“to enable individuals and organisations to get things done.”\nAdditionally, the target groups of Word, PowerPoint, and Excel have to be subsets of the portfolio target group. Similarly, the needs captured in the individual strategies have to help meet the needs in the portfolio; the standout features of Word, PowerPoint, and Excel have to address the needs stated in the Office strategy; and their business goals have to help achieve the portfolio ones. Figure 3 illustrates this relationship.[4]\nFigure 3: The Product Strategy Implements the Portfolio Strategy\nFollowing this approach ensures that the portfolio and product strategies are closely aligned. To put it differently, the portfolio strategy sets the stage for the product strategies; it guides and constrains the strategic decisions of the portfolio members.\nHow do Product Portfolio Strategy and Product Portfolio Management Relate?\nAs its name suggests, product portfolio management is the process of managing a group of products. This includes analysing a product portfolio using a tool like the Product Portfolio Matrix, creating and updating a product portfolio strategy, and adjusting the portfolio. The latter includes harmonising the strategies and roadmaps of the portfolio members, resolving dependencies, coordinating major releases (if required), as well as adding and removing products.\nAs this description shows, simply creating a product portfolio strategy is not enough. You also have to establish an effective portfolio management approach. Part of this process should be regular portfolio strategy reviews. I recommend holding them every three months and considering the portfolio performance, changes in the competitive landscape and business strategy, new trends, and modifications of the strategies of the portfolio members.\nThe product portfolio strategy is therefore far from being a fixed plan. Just like a product strategy, it is best understood as being malleable and changeable. As Dwight D. Eisenhower famously said, “Plans are nothing; planning is everything.”\nWho Creates and Manages the Product Portfolio Strategy?\nCarrying out portfolio management and creating and evolving a portfolio strategy requires expertise and time. To ensure that the work gets done, you have two options:\nFirst, use a dedicated product manager. The individual should have a track record of successfully managing products similar to the ones contained in the portfolio. Additionally, they‘ll benefit from having the right leadership skills, be able to guide a group of product people, collaborate with senior stakeholders, and engage with senior management.\nSecond, ask the head of product to carry out the portfolio management work in addition to their other duties—as long as the individual has the necessary expertise and does not become overworked.\nNo matter, which option you choose, it would be a bad idea if a single person made all portfolio decisions on their own. This would waste the knowledge and creativity of the people working on the individual products. What’s more, it might cause poor alignment and weak buy-in. I therefore recommend a collaborative approach that involves the following individuals:\nThe product portfolio manager (who might be the head of product);\nThe individuals managing the products contained in the portfolio;\nDevelopment team reps which might include a UX designer (for end-user-facing products), an architect/programmer, and a tester/QA engineer.\nKey stakeholders, for example, a sales rep, marketer, and customer support team member.\nThese individuals form a product portfolio team like the one shown in Figure 4.\nFigure 4: The Product Portfolio Team\nThe team in Figure 4 is similar to a product team but it operates at a higher level. What’s more, the portfolio team should not only create a portfolio strategy but also collaboratively review and adjust it on a regular basis.\nTo staff the team, I recommend asking the dev teams and various key stakeholders involved in progressing the individual products to nominate representatives. This ensures that the team members are motivated to help with the portfolio management work. Additionally, keep the team stable to facilitate trust-building and collaboration and avoid handoffs and loss of knowledge.\nHow Can You Get Started with a Product Portfolio Strategy?\nMy experience suggests that it’s usually best to first able to create and evolve a strategy for a single offering before you move up a level and employ a product portfolio strategy. Once you have established an effective product strategizing approach—which often is challenging enough—you’ll be in a great position to transfer your learnings onto the portfolio level.\nTo remind yourself of the advice shared, download the infographic below by clicking on the image.\nNotes\n[1] The article is based on my work with different clients in different industries using different product portfolios. I use Microsoft Office, officially called Microsoft 365 at the time of writing, as a well-known example of a product portfolio, which you hopefully can relate to—even if you use an alternative like Google Workspace or Apple iWork. Note that it’s unknown to me how Microsoft manages the Office suite, and I don’t claim that the company uses an approach like the one described in this article.\n[2] Note that the sample strategy shown in Figure 2 is based on my research; it is not an official description of the Office strategy employed at Microsoft.\n[3] You therefore cannot apply the checklist I have developed for the Product Vision Board to the Portfolio Vision Board.\n[4] Figure 3 uses a single product strategy for simplicity’s sake.\n ","url":"https://www.romanpichler.com/blog/product-portfolio-strategy/"},{"date_scraped_timestamp":1710925650084,"host":"www.romanpichler.com","page_title":"How Detailed should the Product Backlog be?","text":"\n \n Published on 14th July 2015\n \n \n \n \n \n \n \n The product backlog is a great tool. But using it effectively can be difficult. One of the challenges is to get the level of detail right. An overly detailed backlog is unwieldy and hard to manage. But a product backlog that is too coarse-grained is also not helpful: It provides too little guidance for the development team. This post helps you strike the right balance between too much and too little detail. It shows you how determine the right amount of detail for your product backlog. \n Theory and Practice\nIn theory, your product backlog should be prioritised with the high-priority items at the top and the low priority items at the bottom. The top items should be detailed and fine-grained. But as their priority decreases, they should become more and more coarse-grained. You could capture your top items as small user stories that are ready to be implemented in the next sprint. But further down in the backlog you would use epics, which are big sketchy stories. How detailed an items is therefore depends on its priority, as the following picture shows.\n If your product backlog does not look like the one above, does this mean it is wrong?\nThe Product Life Cycle\nI find that a product backlog like the one pictured above is optimised for a young product. At this stage, you typically have to experiment with new ideas and change your product frequently, for instance, to discover the right user experience and features or to enhance and optimise them. As a consequence, you want to be able to easily change your backlog, keep it concise, and use only a small amount of detailed items. Otherwise, updates are too much effort and take too long.\nBut as your product stabilises and eventually matures, you have learned to better understand the market, the customer needs, and how to address them. This increases your ability to anticipate how your product is likely to evolve. Consequently, you can add more details to your backlog.\nHow detailed your product backlog should be is therefore tied to the lifecycle stage of your product: Young product should have a concise backlog with few details; older, stable products tend to benefit from a more detailed backlog, as the following picture shows.\nThe product backlog on the left-hand size of the life cycle curve carries only a few detailed items; most of its contents are coarse-grained. But the backlog on the right-hand side is the opposite: It contains many more detailed items and fewer coarse-grained ones. As a consequence, it is larger and less concise. But watch out that your backlog does not grow in an uncontrolled fashion or morph into a wish list. Complement it with a product roadmap to capture the longer-term outlook of how your product is likely to grow.\nWhile the product life cycle is great to gauge the right level of detail, it is not enough. You should also consider where your product’s position in the release cycle.\nThe Release Cycle\nAs you start working on a new product version or a major release – think of iOS 8.4 or Windows 10 – you typically encounter more unknowns and risks than towards the end of the project. If you address the risks on early, then your product backlog is particularly volatile in the first few sprints. As you test assumptions and address the risks, you are likely to discover that some of your assumptions were wrong and generate new ideas. The new insights and ideas make it necessary to change the product backlog, and some of the change can be rather big, particularly if your product is young. You will therefore benefit from a concise and coarse-grained backlog at the start of a new release.\nBut once you have addressed the key risks and critical assumptions, your focus shifts to completing and optimising the features, as I explain in my post “Get Your Focus Right: Learning and Execution in Scrum“. At this point your product backlog should start to stabilise and experience fewer and smaller changes. As a consequence, you can add more details to it.\nAs a rule of thumb, use few details at the start of a project or release and more once you have addressed the key risks and the product backlog has started to stabilise.\nConclusion\nUse the product lifecycle and release cycle to determine how detailed the product backlog should be. This is true for traditional backlogs as well as Jeff Patton’s storymaps and my Product Canvas. To put it simple, the more uncertainty and change you experience the more coarse-grained and concise the backlog should be.\nAs your product develops and grows adjust your product backlog and the way you manage it. There is no one right level of detail.\n ","url":"https://www.romanpichler.com/blog/product-backlog-right-details/"},{"date_scraped_timestamp":1710925447980,"host":"www.romanpichler.com","page_title":"How to Choose the Right KPIs for Your Product","text":"\n \n Published on 13th April 2021\n \n Last Updated on: 19 Jun 2023\n \n \n \n \n \n \n A key challenge of working with KPIs is to select the right indicators: There are so many different metrics to choose from including daily active users, net promoter score, and profit, to name just a few. What’s more, senior managers and stakeholders can have strong views on which indicators should be used. This article helps you select the metrics that really matter and are truly helpful for your product. \n \nListen to this article:\nWhat are KPIs?\nKey performance indicators (KPIs) are metrics that measure how your product is doing. Effective KPIs help you understand if your product is creating the desired value for the users, the customers, and the business. Without KPIs, you end up guessing how well your product is performing. It’s like driving a car with your vision blurred: You can’t see if you are heading in the right direction or getting closer to your destination. You might have a hunch, but you don’t know if it is correct. Using KPIs and collecting the relevant data helps you balance intuition with empirical evidence. This increases the chances of making the right decisions and achieving product success.\nA Goal-directed Approach to Choosing KPIs\nTo select the right KPIs, I recommend taking the following three steps: First, use the user and business goals in the product strategy to select an initial set of indicators. Then take into account the product goals on the product roadmap to discover additional KPIs. Finally, choose further indicators to assess the health of your product and team. This, of course, assumes that you have a validated product strategy and a realistic product roadmap in place. If that’s not the case, then I recommend creating those two plans first.\nAs you may have noticed, I suggest using a goal-directed approach to identify the right indicators. I am not a big fan of “standard” KPIs, for example, customer acquisition cost (CAC), churn, and number of active users for SaaS products. While it’s helpful to be aware of the indicators that may be commonly used for the type of product you manage, it would be a mistake to blindly adopt them. Employing user, business, and product goals to guide the selection of KPIs avoids this mistake and it ensures that your indicators are relevant and helpful, as the following image shows. You can download the infographic by clicking on the picture.\nStep 1: Take Advantage of the Product’s User and Business Goals\nTo select the right KPIs, start with the needs and the business goals in the product strategy. Then consider how you can tell if they have been met. \nSay I want to offer a product that reduces the blood sugar levels of individuals who have type-2 diabetes and that generates £50k of revenue within the first 12 months of launching the app. I would then ask myself how I can measure that the product creates the desired user and business value. To determine the former, I might choose user feedback, customer satisfaction, and referral rate as the key performance indicators. To understand the latter, I might select monthly recurring revenue (MRR).\nNote that this approach assumes that valid user and business goals are available. In other words, the goals should be part of a validated product strategy—a strategy whose key assumptions and risks have been successfully addressed. This might have involved observing target users, interviewing them, carrying out competitor research, and using throw-away prototypes, to name just a few strategy validation techniques.\nStep 2: Use Product Goals to Discover Additional KPIs\nIn addition to deriving KPIs from the user and business goals, I like to use the product goals I have captured on the product roadmap in order to discover additional indicators. A product goal is a specific and measurable benefit or outcome your product should achieve, typically in the next two to three months. What’s more, every product goal should be aligned with the user and business goals in the product strategy, as I explain in more detail in my article “Product Goals in Scrum.”\nSay the goal of my initial product (MVP) is to allow the users to better understand their eating habits and acquire an initial user base. I would then look at the first part of this goal and ask myself if I need to introduce a new indicator. As I’ve already chosen user feedback, customer satisfaction score, and referral rate, I would not add another metric at this stage. But the second part, acquire an initial user base, would require the introduction of a new KPI in order to understand if the acquisition goal has been met. To do so, I might measure market share, for instance, by tracking the product’s position in the appropriate app store.\nStep 3: Add Health Indicators\nMeasuring how well your product is doing at meeting its user, business, and product goals is great. But it is not enough. Let’s say that my new product is meeting its revenue targets, that the user feedback is excellent, and that customer satisfaction and referral rates are high. This suggests that it is performing well, and there seems to be no reason to worry. \nBut if the team motivation is declining—as people are being overworked or stressed—or if the code quality is deteriorating—as bugs are accumulating and the code complexity is increasing, alarm bells should go off. These indicators suggest that achieving product success will be much harder in the future, due to an increase in technical debt, higher absenteeism or turnover rate. \nIt is therefore helpful to add metrics that measure how healthy your product and team are and that allow you to spot important warning signs early on so you can be proactive and respond to them in a timely manner—instead of reacting to them with the back against the wall. These indicators include product quality, schedule variances, which is the ability to meet product goals on time and budget, team motivation, team knowledge and skills, and stakeholder engagement.\nLess is More\nHaving been involved in product management for 20 years, I sometimes marvel at how much our profession has changed for the better. This includes the analytics tools we have available today. These powerful tools usually generate more data for us than we can handle. And herein lies the issue: There is no point in measuring everything that can be measured.\nUsing more KPIs than necessary and analysing data that provides no value is a waste of time. In the worst case, you act on irrelevant data and make wrong decisions. Think of driving a car. A small number of indicators are helpful for safely getting to your destination, including how fast you are travelling and how much battery/fuel is left. If the car dashboard continuously showed a range of other data, such as tyre pressure or ABS status, it would be harder to take in the relevant information and make the right decisions while driving. \nTherefore, limit the number of KPIs you use. Carefully select them by using the factors discussed above, and regularly review and adjust them. Don’t make the mistake of allowing powerful stakeholders to dictate KPIs to you. Instead, explain to them how effective product KPIs are derived, and consider inviting them to the next product strategy workshop in order to collaboratively determine the right KPIs.\n ","url":"https://www.romanpichler.com/blog/how-to-choose-the-right-kpis-for-your-product/"},{"date_scraped_timestamp":1710925451849,"host":"www.romanpichler.com","page_title":"How to Offer Constructive Feedback: A Framework for Product People","text":"\n \n Published on 6th June 2023\n \n Last Updated on: 30 Jun 2023\n \n \n \n \n \n \n To create value, product people, stakeholders, and development teams have to work together. But when people collaborate, things don’t always go smoothly, and problems emerge. As the person in charge of the product, you should address these issues and offer constructive feedback. That’s often easier said than done, though. Asking people to change their behaviour can be difficult, especially when you are not their boss. To help you with this challenge, I have developed a new framework, which I describe in this article. \n \nListen to the audio version of this article:\n“No Matter How it Looks at First, it’s Always a People Problem”\nThis quote from Gerald Weinberg nicely summarises a core challenge we face as product people: Our profession is called product management, but the product part can be the easy one compared to the people challenges we sometimes face. Here are four examples:\nJoe, the sales rep, has promised a feature to an important customer without first talking to you—the person in charge of the product.\nSue, the Scrum Master, wanted to help the development team get better at sprint planning. But the team still over-commits and under-delivers.\nPete, the marketer, agreed to rework the marketing strategy to support the next major release. To your surprise, you discover that he has hardly made any progress even though the release is only a few weeks away.\nCindy who helps you manage the product started to come late to meetings. Recently she even missed one without telling you in advance.\nIt can be tempting to ignore people issues and focus on product-related tasks like reviewing the product strategy, updating the product roadmap, and refining the product backlog. But this is hardly a recipe for success. Problems like the ones mentioned above will hardly go away on their own. Instead, they may even get worse. Consequently, you’ll have to deal with more unsolicited feature requests, poor development team performance, an ineffective marketing strategy, and meetings that are poorly attended—to stay with the examples from above.\nIt is therefore important that you exercise leadership and address the people issues you are encountering even if this can be challenging and require courage at times. On the positive side, when done correctly, it will not only remove the problems. It will help the individuals involved grow and strengthen your connections with them.\nFramework Overview\nTo help you successfully tackle people issues, structure difficult conversations, and offer constructive feedback, I have developed the framework shown in the picture below. You can download the infographic by clicking on it.\nWhile my framework integrates elements from the CEDAR model, the Situation-Behavior-Impact (SBI) model, and Non-Violent Communication (NVC), I’ve specifically designed it for a product management context where you lead others without necessarily being their boss. The following sections explain how you can apply the framework.\nBefore You Start\nBefore you share your feedback, reflect on your intention. Ensure that you want to improve the situation and help the other person rather than acting out of frustration or the desire to retaliate. It would be wrong to label or judge the individual, for instance, thinking of Joe—the sales rep introduced earlier—as a selfish and pushy sales guy who needs to be put in his place. Instead, separate the person from the problem, and focus on the latter.\nAdditionally, choose the right time and place for giving feedback. Allocate enough time—at least 30 minutes as a rule of thumb. If you find that the issue has triggered difficult emotions like frustration or anger in you, then wait for them to reside before offering your feedback. Finally, consider if it is feasible to meet onsite. If you meet online, make sure that the cameras are switched on and that you can clearly see each other.\nStep 1: Connection\nPrior to discussing the issue, take some time to check in with the other person. Ask them how they are and what’s going on for them. This allows you to empathise and build trust with the individual. This, in turn, will have a positive impact on the conversation, and it will make it easier to share difficult feedback.\nYou might say, for example: Hi Joe, it’s been a while. How are you doing? Have you been travelling lately?\nStep 2: Objective\nDescribe the desired outcome of the meeting and state the context in which the issue occurred.\nYou might say: Thanks for making time to meet with me, Joe. I want to talk to you about the feature request you recently raised and the impact it’s had. I also want to discuss with you how we can improve the way we handle feature requests in the future.\nStep 3: Issue\nNext, address the issue. But rather than telling the other person what’s wrong and what you want them to do differently, ask them to share their perspective. What did they observe? What is their version of what happened? And how are they feeling about the issue? Listen attentively with the intention to understand. This shows the other person that you are interested in what they have to say, and it ensures that you take in all the information.\nYou might ask Joe: How did the feature request come about Joe? How did you experience the conversation with the customer and the following interaction with me?\nThen describe your observations. Stick to the facts. Don’t judge, blame, or accuse. Be kind but frank. Don’t generalise, sugar-coat, or exaggerate. State the impact that the issue has had including the feelings it has triggered in you.\nYou might say: Thanks for sharing your perspective, Joe. I was very surprised and a bit shocked, to be honest, when I heard that you had told the customer that we would offer the feature in the next release. I can still feel some frustration now when I think about it. It put me in a very difficult situation. As we could not afford to disappoint the customer, I had to change the agreed product goal and consequently deal with complaints from the dev teams and some of the other stakeholders.\nStep 4: Causes\nOnce you’ve shared observations, determine the issue’s underlying causes. Create a shared understanding of why the problem occurred. Find out what caused the other person to act the way they did, and what drove their behaviour. What were their underlying goals and needs?\nYou might say: Joe, you regularly talk to our major customers. Is there a reason why you weren’t aware that the customer wanted this feature when we met to agree on the outcome of the next release and the functionality it should provide?\nStep 5: Actions\nDetermine the actions required to address the causes and improve the situation. Encourage the other person to come up with suggestions rather than telling them what to do. You might ask questions like “What needs to be done to stop the issue from recurring?” and “What will you do differently in the future?” Additionally, clearly state the actions that you want them to take and share the changes you are willing to make. The latter shows that you are willing to contribute to solving the issue and change your own behaviour if necessary.\nYou might say: I’d like to ask you to stop mentioning feature ideas to customers and instead, focus on their needs when you talk to them about future product versions. I’d also like to ask you to always talk to me first before you promise something to a customer. I’ll do my best from now on to schedule the product planning meetings so that you can attend them and share your insights from customer meetings, and I’ll explicitly check with you and the other attendees that you agree with the decisions.\nStep 6: Closure\nWrap up the conversation and close the meeting. Ask the other person how the conversation went for them, how they are feeling right now, and if the meeting was helpful. This allows you to get better at offering constructive feedback in the future.\nYou might say: Thanks for the open and constructive conversation, Joe. I am glad that we sorted things out, and I am pleased with the actions we’ve agreed on. How did the meeting go for you? \nIf you did not manage to develop a shared understanding of the causes and if you failed to agree on actions, then you are likely to experience conflict—a serious disagreement with an element of adversary. If this is the case, I recommend recognising what’s happening and scheduling a follow-up meeting to resolve the conflict.\nYou might say to Joe: It seems to me that we can’t agree on what happened and why it happened. It’s important to me that we address the disagreement. But it would be too much to do now. Let’s please schedule a follow-up meeting.\n ","url":"https://www.romanpichler.com/blog/offering-constructive-feedback-a-framework-for-product-people/"},{"date_scraped_timestamp":1710925669397,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2322"},{"date_scraped_timestamp":1710925471509,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/"},{"date_scraped_timestamp":1710925668045,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2323"},{"date_scraped_timestamp":1710925666571,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2319"},{"date_scraped_timestamp":1710925695025,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=67371"},{"date_scraped_timestamp":1710925694135,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=67391"},{"date_scraped_timestamp":1710925527917,"host":"www.romanpichler.com","page_title":"Product Strategizing Tips","text":"\n \n Published on 9th January 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n Product strategizing refers to the activities required to determine if and why a product should be developed. Carrying out this work makes it more likely to create a product that users want and need. In this article, I share my recommendations to help you improve your product strategy work. \n \nBring the Right People Together\nProduct strategy is a team sport. You should therefore involve the right people in the work and secure enough of their time. I find it helpful to form a team that consists of:\nDevelopment team members: user experience (UX) designer, developer, tester;\nKey stakeholders, for example, representatives from marketing, sales, and support;\nA Scrum Master, agile coach, or product coach.\nInvolving these individuals in the strategizing work allows you to leverage their knowledge and expertise, builds rapport, and creates support for key product decisions including the selection of a specific market segment and stand-out features.\nA UX designer, for example, might help you observe and interview users; and a developer and tester might advise you on technical feasibility, identify technical risks, and build prototypes; a sales rep might get you in touch with prospective customers and help you with competitor research; a Scrum Master might facilitate collaboration and advise on process issues—for instance, which process and tools should be best used to visualize and track the discovery work. (I prefer to use a Kanban-based process and a Kanban board to organise product strategy validation work, as I discuss in my book Strategize in more detail.)\nFocus on Problem Validation, not Solution Building\nYour product strategizing should focus on nailing the value proposition, target group, business goals, business model, and stand-out features of the product—not determining individual product features, writing user stories, designing the user interface, or building the actual solution. Your goal should be to mitigate the risk of offering a product nobody wants and needs, not to figure out the product details.\nHaving said that, it’s ok to address key UX and technology risks and evaluate important user interaction and architecture options as part of the strategizing work. But the bulk of the UX design, user story writing, and technology work should be done after you have successfully validated the problem.\nTo get your focus right, consider using a tool like my Product Vision Board to capture your idea, and identify assumptions and risks.\nDo Just-Enough Strategizing Work\nMinimise the amount of time you spend on any upfront strategy work to accelerate time-to-market. You should aim to get an initial, good enough product out as fast as possible, and then adapt it to the market feedback. \nBut don’t rush the work, and resist the temptation to jump start building the actual product. Explore the key assumptions and risks in your product strategy and business model by systematically testing and addressing them in an iterative fashion using, for example, observations, interviews, surveys, and prototypes.\nIf you can’t confidently state why people are going to use your product, who those individuals are, what makes your product stand out from the crowd, and why it’s worthwhile for your business to develop and provide the product, then you are not in a position to build the actual solution. Instead, continue the strategy work (persevere or pivot), or stop and move on to another product idea.\nTalk to the Users\nWith all the product strategy work that needs to happen, it can be easy to lose sight of the most important success factor—the people who are going to use the product. There is no point in coming up with a smart business model and sophisticated user interactions, if you don’t understand the user needs, what they may struggle with, what works well for them, and what doesn’t. If the users don’t need your product or if they find it hard to use it, then you will find it hard to monetise it and achieve product success.\nTherefore, get out of the building, as Steve Blank recommends, and meet target users face-to-face, be it online or onsite. I know that’s not always easy. But to succeed, I find it paramount that you—the person in charge of the product—carry out user research yourself and develop a deep understanding of the user needs.\nWhen communicating with users, take a genuine interest in the people you meet. Listen attentively and let go of preconceived ideas about the problem you think the users have or the solution you believe they need. This allows you to discover what people really want and need thereby maximise the chances of creating a successful product.\nDon’t Handoff Product Strategy Work\nI’ve seen more than company where a group of people carried out the product strategy work and then handed it of to another group who would determine the detailed product functionality and deliver the product. But this practice is usually ineffective and wasteful, as it is likely to lead to misunderstandings and loss of knowledge—it is hard to precisely capture and pass on strategy insights in the form of documents, and written information is open to misinterpretation. In the worst case, the individuals tasked with delivery don’t understand and support the decisions taken during the strategy work, but do what they believe is right.\nTherefore, ensure that the people tasked with the product strategy work also participate in developing the actual solution. The UX designer, developer, tester involved in strategizing should continue to work on the development team; the stakeholders who participate in the strategy work should continue to be involved and regularly attend product strategy and roadmap reviews, as well as sprint review meetings. This speeds up the product innovation process, creates a smooth transition from strategy to development, and avoids the issues mentioned above.\nConsider Timeboxing the Product Strategy Activities\nKnowing upfront how much time and effort will be required to carry out the necessary strategy work can be tricky, particularly when you develop a brand-new product and when you make a big change to an existing one, for example, to extend its life cycle. Luckily, there is a straightforward solution: timebox the work.\nA time box is a fixed period of time, such as one week, that cannot be extended. At the end of the time box, the work stops, and you reflect on what has been achieved. If the work has not been completed, and your product strategy and business model still contain significant risks, you have two options: add another time box—and possibly pivot—or stop the work.\nConsider holding weekly review meetings that involve the people carrying out the validation work as well as the management sponsor. Use the meetings to reflect on the risks that are being addressed and the learnings that you have achieved; consider the risks that still exist in your product strategy and business model; and decide if and how to continue.\nDon’t Limit Product Strategizing to New Products\nAs your product grows and matures, its value proposition, market, stand-out features, and business model will change. To make and keep your product successful, it is paramount that you practice continuous strategizing and regularly review and adjust your product strategy, roadmap, and business model. These adjustments sometimes require little or no product strategizing.\nBut when bigger changes are required, such as taking your product to a new market or adding features and redesigning the user experience to sustain growth, you’ll likely have to carry out specific strategy work, as the picture below shows. If that’s the case, then I recommend anticipating the work and stating it on your product roadmap.\nModern product strategizing is hence best understood as a set of ongoing, continuous activities rather than a clear-cut phase that is separated by a milestone or gate from building the actual solution.\n ","url":"https://www.romanpichler.com/blog/product-discovery-tips/"},{"date_scraped_timestamp":1710925468219,"host":"www.romanpichler.com","page_title":"Product Strategy and Product Discovery","text":"\n \n Published on 4th December 2023\n \n Last Updated on: 1 Mar 2024\n \n \n \n \n \n \n Product discovery has become increasingly popular in recent years as a way to determine the right solution. In this article, I explain why you need a product strategy to succeed with product discovery, how the strategy helps you determine the right outcomes and opportunities, and how you can use the Product Vision Board to build an Opportunity Solution Tree. \n \nListen to the audio version of this article:\nWhat is Product Discovery?\nProduct discovery is the process of “figuring out a solution to a problem we’ve been asked to solve,” writes Marty Cagan.[1] It involves understanding and selecting user needs, exploring solutions, and choosing the most appropriate one. Let’s make this more concrete by looking at a popular product discovery tool, Teresa Torres’ Opportunity Solution Tree (OTS).[2]\nBefore I proceed, let me point out that I am neither a product discovery expert in the sense discussed below nor do I fully endorse the specific approaches created by Marty and Teresa. My intention with this article is to show how product teams can use a product strategy to guide their discovery work and maximise the chances of creating successful products.\nLet’s now get back to Opportunity Solution Trees. Such a tree contains three elements: An outcome, opportunities, and solutions. The outcome describes the business need that has to be addressed. It corresponds to the problem mentioned in Marty’s quote above. The opportunities represent the customer needs that, if addressed, will achieve the desired outcome. The solutions, finally, are the products or product capabilities that help solve the customer needs. Figure 1 shows how these elements form an Opportunity Solution Tree.\nFigure 1: Opportunity Solution Tree\nWithout wanting to dive into the details of Opportunity Solution Trees —I recommend reading Teresa Torre’s book Continuous Discovery Habits to learn more about them—I’ll point out three main benefits they can offer.\nEncourage teams to start with outcomes—business and user/customer benefits—rather than outputs—features and deliverables. This avoids the risk of implementing features that add little or no value.\nConnect a business goal, customer needs, and solutions: You start with an outcome, determine opportunities, break them into smaller, more specific ones, and identify solution candidates.[3]\nRemind teams to consider different options and not prematurely commit to a single one.[4]\nLike every tool, Opportunity Solution Trees also have drawbacks. A key issue I see is having the right business goal to start with. How is it determined? How can you be sure that it’s the right outcome to pursue, that others are not more urgent or valuable? To put it differently, if the business goal is wrong, you are likely to determine the wrong opportunities and discover the wrong features and user experience. It’s garbage in, garbage out.\nTo make things worse, this issue is not limited to Opportunity Solution Trees. It applies to product discovery in general. Luckily, there is a solution: Using a validated product strategy that provides the input of the product discovery work. [5]\nWhat is a Validated Product Strategy?\nI like to think of a product strategy as a high-level plan that helps you realise your vision and achieve product success. Such a strategy should answer the following four questions:\nWho is the product for? Who are the users and, if appropriate, who are the customers?\nWhy would people want to use or pay for it? What specific problem does it address, or which tangible benefit does it offer?\nWhat are the business goals? Which benefits does the product create for the company developing and providing it?\nWhat kind of product is it and what makes it stand out? How does it differ from competing offerings? Why would people choose it over alternatives?\nA handy tool to capture the product strategy is my Product Vision Board shown in Figure 2. It describes the strategy by using the sections “Target Group,” “Needs,” “Product,” and “Business Goals.” These sections correspond to the four questions above.\nFigure 2: Product Vision Board\nYou can learn more about the Product Vision Board by reading the article The Product Vision Board and watching the video Introduction to the Product Vision Board. You can download the tool together with a handy checklist from my website.\nWhile it’s great to capture the strategy of a product, it’s usually not enough. To maximise the chances that following it will result in a successful product, it must be based on empirical evidence and free of major risks. In other words, it must be validated. A great way to achieve this is to start with an initial strategy and iteratively test, correct, and improve it, as Figure 3 illustrates.\nFigure 3: Iterative, Risk-driven Strategy Validation\nThe process above consists of the following four steps:[6] \nIdentify the biggest risk currently contained in the product strategy. Sample risks might be that the target group is too small, that the need identified is not compelling enough, that the product’s standout features are not strong enough, and that the business goals are not achievable. \nDetermine the right method to address the risk such as direct observation, user interview, competitive analysis, and business modelling.\nApply the method and collect the relevant data. For example, to test if the need is compelling enough you might carry out the user interviews and capture the answers in the form of notes or video footage.\nEvaluate the data and adapt the strategy. Follow this process until you have addressed the major risks in the strategy, and you have sufficient data to show that it is likely to result in a successful product—a product that is desirable, feasible, viable, and ethical, as I explain in more detail in my book Strategize.\nHow Does the Product Strategy Help with Product Discovery?\nA validated product strategy provides you with the foundation for effective product discovery. It offers a context to choose the right outcome and determine the opportunities. More specifically, such a strategy offers you one or more business goals. As these have been tested alongside the rest of the strategy, you can be confident that they are the right business outcomes—that they have a meaningful business impact, are achievable, and have been correctly prioritised. This is great news, as this helps you determine the right input for the product discovery work.\nThere are three ways you can achieve this: \nYou can choose one of the business goals on the product strategy and use it as the business outcome that enables the discovery of opportunities—the root node of the Opportunity Solution Tree.\nIf the business goal selected is too big, you can derive a sub-goal from it. For example, if the goal is to “generate £200k of revenue in the next 12 months,” you might choose “make £50k in the next three months” as the outcome on the tree.\nSuppose you find yourself faced with a problem like declining engagement, poor retention, or low customer satisfaction. In that case, the product strategy enables you to check that fixing the issue will indeed help you meet the overarching business goals.\nAdditionally, a validated product strategy can help you determine the right opportunities, and it can accelerate product discovery. Here is why: Validating the strategy usually requires carrying out market and user research including observing and interviewing target users. This will help you identify the right opportunities, and it saves you from carrying out the work as part of the product discovery effort—you’ve essentially front-loaded your innovation process. What’s more, you can use the needs in the product strategy to guide the selection of the opportunities: Every opportunity should be a step towards meeting the overarching user and customer needs.\nFigure 4 illustrates how the product strategy can guide product discovery and how the Product Vision Board can help build an effective Opportunity Solution Tree.[7]\nFigure 4: Validated Product Vision Board and Opportunity Solution Tree\nNo matter if you agree with my advice or if you follow the product discovery approach championed by Marty Cagan and Theresa Torres, make sure that you have correctly determined the target users and, if appropriate, customers, the problem the product should address or the benefit it should offer, the business benefits it should generate, and, especially for commercial products, the capabilities that make it stand out from competing offerings. This will enable you to take the next steps and determine the right solution—the right product features, user experience, technologies, and software architecture.\nNotes\n[1] See Marty Cagan, “The Origins of Product Discovery.” Marty has championed product discovery and shaped how most product people think about and approach the challenge of getting from outcomes to features.\n[2] This characterisation is based on Teresa Torres’ book Continuous Discovery Habits: Discover Products that Create Customer Value and Business Value.\n[3] This approach is not dissimilar to Impact Mapping, which suggests that you start with a business objective (why), determine the target customers (who), discover the benefit that the customers should experience (how), and finally, select the right solution (what). See Gojko Adzic’s book Impact Mapping. I am not the first person to note the similarity, see, for instance, Tim Herbig’s article “Using Impact Mapping to navigate Discovery” and Büşra Coşkuner‘s work on combining an Impact Map and Opportunity Solution Tree.\n[4] This approach was first suggested by Set-based Design, as far as I know. See, for example, Jeffrey Liker’s book The Toyota Way: 14 Management Principles from the World’s Greatest Manufacturer, which discusses how Set-based Design is used in lean management.\n[5] Note that I am not the first individual to recognise that product discovery should be guided by a product strategy, see Nacho Bassino’s book Product Direction, for example. I don’t, however, subscribe to the notion that discovery should be a stage or phase. Instead, I view it as an ongoing process—much like the effort required to evolve a product strategy. (I write about continuous strategizing in my book Strategize as well as in my strategy-related blog articles.)\n[6] The validation approach is loosely based on Eric Ries’ book The Lean Startup and discussed in detail in my book Strategize.\n[7] Note that the relationship between product strategy and product discovery is bidirectional. If the product team struggles to achieve the outcome and opportunities, this might indicate that the strategy is no longer valid and that it has to be adapted. To put it differently, the progress of the product discovery work can help determine if the product strategy has to be updated.\n ","url":"https://www.romanpichler.com/blog/product-strategy-and-product-discovery/"},{"date_scraped_timestamp":1710925719769,"host":"www.romanpichler.com","page_title":"Product Vision FAQs","text":"\n \n Published on 17th August 2021\n \n Last Updated on: 25 Apr 2022\n \n \n \n \n \n \n The product vision can be a powerful instrument to inspire and align stakeholders and development teams. But in practice, it is not always effectively applied. This article shares questions about the product vision I am frequently asked together with my answers. \n \nListen to this article:\nWhat is the Product Vision?\nThe product vision describes the ultimate purpose of a product, the positive change it will bring about. You can think of it as a big, hairy, audacious goal (BHAG)—or a moon shot—that inspires people and offers continued guidance for the next five to ten years.\nSay I wanted to create a product that helps people become more aware of what and how much they eat. As the product vision, I could then choose “help people eat healthily” or just “healthy eating.” While the example states the purpose of a new product, I find that a vision is equally beneficial for an existing one.\nWhat Makes a Good Product Vision?\nA good, effective product vision fulfils the following six criteria:\nInspiring: The product vision creates a purpose for the people working on the product. It provides motivation and guidance even if the going gets tough.Shared: The vision unites people, and acts as the product’s true north. Ethical: A good vision gives rise to an ethical product, a product that truly benefits its users and that does not cause any harm to people and planet.Concise: The product vision is easy to understand and remember. Using slogan—a short, memorable phrase—can be a great way to create such a vision.Ambitious: It describes a big, visionary goal.Enduring: Despite its name, I recommend keeping the product vision free from assumptions about the actual product or solution. This allows you change the product strategy and the product while you stay grounded in your vision.\nWho Owns the Product Vision?\nIdeally, a product vision is collectively owned by the person in charge of a product, the key stakeholders, and the development team(s). This ensures that the individuals support the vision and follow it—rather than paying lip service to it. A great way to foster joint ownership is to develop the product vision together, as I describe in the section “How do I Create an Inspiring Product Vision?” As the person in charge of a product, you should ensure, however, that a meaningful product vision exists and guide the effort to create one.\nHow do I Capture the Product Vision?\nAs mentioned above, I find it helpful to use a brief statement or a slogan to describe the product vision. This increases the chances that people understand and remember it. An elaborate or verbose vision that looks great on paper but is hard to understand and memorise offers little value.\nAdditionally, I like to capture the product vision together with the product strategy, as it’s done on my product vision board shown below. The board encourages you to state the product vision at the top and the product strategy underneath it.\nYou can find more information about the product vision board above in my book Strategize and the article The Product Vision Board.\nCan the Product Vision and the Company Vision Be the Same?\nYes, the two can be identical. But I recommend using two separate visions—unless you work for an early-stage start-up. The company vision should describe the purpose of the entire organisation, the reason why the business exists. Take, for example, IKEA’s vision to “create a better everyday life for the many people.” The product vision, however, should communicate the ultimate reason for developing and offering a specific product, for instance, IKEA’s app that allows users to design their own PAX wardrobe.\nDoes Every Product Have to Have its Own Vision?\nEvery product should have a vision, but not every offering requires its own, unique one. Say your product is part of a product portfolio like Microsoft Office. As its products are closely related, I would use one overarching vision for the entire portfolio, a product portfolio vision so to speak. In Microsoft Office’s case, this might be, “help people collaborate in real time.” Word, PowerPoint, Excel, and the other Office products would then share this vision.\nDo I need a Product Vision and a Product Strategy?\nIf your vision describes the ultimate purpose for creating the product, you will have to complement it with a product strategy. While the vision is great to inspire the stakeholders and development teams, it is not enough to direct their work. This is where the product strategy comes in. You can think of it as the approach chosen to realise the vision and achieve product success, as the following picture shows.\nAn effective product strategy should clearly state the needs or user goals that the product will help address or meet, the people who will use and pay for the product, the aspects that set it apart from competing offerings, and the business benefits, which it should generate for the company developing and providing it.\nNote that creating a product strategy and validating it—ensuring that it does not contain any major risks or assumptions—tends to be significantly more work than coming up with a product vision. What’s more, the decisions captured in the product strategy are crucial to achieve product success: I view them as prerequisites for deriving an actionable product roadmap with specific, measurable product goals or outcomes that direct the development of the product.\nHow do I Create an Inspiring Product Vision?\nThe best way to ensure that your vision is inspiring and meaningful for the stakeholders and dev team members is to create it together with the individuals in a collaborative workshop.\nTo take advantage of this approach, invite the right people to a joint session, be it online or onsite, and encourage the participants to describe the purpose that they associate with the product. Then look for a product vision that is fitting and that everyone can support.\nAs the vision is truly fundamental, you should take the time required to create an inclusive vision that resonates with everyone. Resist the temptation to shortcut or rush the process. Similarly, don’t allow the most powerful person to dominate and don’t agree on the smallest common denominator. Otherwise, you’ll end up with an ineffective vision.\nYou can find more advice on collaborative decision-making in my article Making Effective Product Decisions: Tips for Deciding with Stakeholders and Dev Teams.\nDoes the Product Vision Ever Change?\nAs a general rule, the product vision should be stable. It should offer continued guidance to for an extended period—at least five years, as I recommended earlier. There are, however, two exceptions to this rule: First, when you create a brand-new product and you cannot find a valid product strategy, you may want to consider adapting the product vision. Second, when your product has been offered for a number of years, you might find that adjusting the product vision is helpful to keep it fresh and meaningful.\nContrast this with the product strategy and the product roadmap. The former will change at least once per life cycle stage, and the roadmap is likely to change several times per year. Both plans therefore benefit from regular reviews. These offer you the opportunity to also assess the product vision and change it if this is turns out to be necessary. To say it with Jeff Bezos words: Be suborn on the vision and flexible on the details.\n ","url":"https://www.romanpichler.com/blog/product-vision-faqs/"},{"date_scraped_timestamp":1710925486439,"host":"www.romanpichler.com","page_title":"Six Qualities of a Great Product Vision","text":"\n \n Published on 9th March 2022\n \n \n \n \n \n \n \n The product vision can be a powerful tool to align stakeholders and development teams. When used effectively, it acts as the product’s true north, and it inspires and guides people. This article helps you create such a vision. It describes six essential qualities that a compelling product vision has to have. \n \nListen to this article:\nInspiring\nAn inspiring vision creates a meaningful purpose for everyone involved in making the product a success including the stakeholders and development team members. It helps people understand how their work relates to a bigger whole and how their efforts create a positive change.\nIt also allows you, as the person in charge of the product, to understand if dedicating your time and energy to the offering is worthwhile and sustainable. If the vision resonates with you, then this will help you do a great job, especially when the going gets tough. If that’s not the case, then you should maybe look for a different challenge. As Steve Jobs once said, “If you are working on something that you really care about, you don’t have to be pushed. The vision pulls you.”\nAdditionally, an inspiring vision helps you apply a visionary leadership style and become a visionary leader—someone who guides others through a big, motivating goal.\nA shared vision unites people. It creates alignment, and it facilitates collaboration. A vision is shared when the stakeholders and development team members support the goal and are happy to work towards it. If that’s not the case, then it will be difficult to encourage the individuals to agree to more specific goals and to follow a product strategy and a product roadmap that are based on the vision.\nA great way to ensure that your vision is shared is to create it together with the stakeholders and dev team members in a collaborative workshop, be it online or onsite. Encourage the participants to describe the purpose that they associate with the product. Then look for a product vision that everyone can support.\nVisioning Workshop Attendees\nAs the vision is truly fundamental, you should take the time required to create an inclusive goal that resonates with everyone. Resist the temptation to shortcut or rush the decision-making process. Similarly, don’t allow the most powerful person to dominate and don’t make the mistake of agreeing on the smallest common denominator. Otherwise, you’ll end up with an ineffective vision that fails to inspire and guide people. Ask the Scrum Master or agile coach to facilitate so you can focus on shaping the vision and you don’t have to ensure  that everyone is heard and that nobody hijacks the decision-making process. (See my article Making Effective Product Decisions for more advice on how to decide together with stakeholders and dev teams.)\nEthical\nAn ethical vision gives rise to a product that benefits its users and customers and that does not cause any harm to people and planet. This includes not affecting people’s mental health, for instance, by getting them hooked or offering content that promotes misinformation, self-harm, hatred, and violence.\nAdditionally, an ethical product does not contribute to climate change, and it does not damage the environment by how it is developed, provided, and if it includes hardware, manufactured, delivered, and disposed of.\nWhile the vision alone doesn’t achieve ethicality, it plays a crucial role, as it describes the intention for offering the product. You ultimately have to ask yourself why you want to provide the product. Is it to help others, or is it to maximise your own benefits?\nConcise\nA concise product vision is easy to communicate, understand, and remember. To achieve this, I like to capture the vision as a brief statement or a slogan—a short, catchy phrase. An example for a product that helps people improve their eating habits might be “help people eat healthily.”\nA handy tool to describe the vision is my product vision board. The board, shown in the picture below, captures the vision in the top section and the strategy in the four sections underneath it. You can download the board from the tools section of my website and by clicking on the image.\nAmbitious\nYou can think of the product vision as a big, hairy, audacious goal (BHAG). Such a vision increases the chances of providing a continuous purpose in an ever-changing world, compared to a narrow, specific one. \nI would therefore choose a big, ambitious vision like “help people eat healthily” over a more specific, narrower one like “help people lose weight.” Note that such a product vision is not measurable. It truly is an inspirational, grand goal.\nEnduring\nDespite its name, a product vision should not describe the product or solution. For example, “offer a weight loss mobile app” and “become the number one weight loss app provider” are not effective visions. Instead of referring to the product, state the positive change you want to bring about, such as “healthy eating.”\nA solution-agnostic vision allows you to change the product strategy but keep your vision stable. Say that it turns out that my idea of developing a healthy-eating app is ill conceived. With a vision like “healthy eating,” I can explore alternatives, for example, writing a book on healthy eating and offering healthy-eating workshops.\nA vision that is not tied to a product can therefore provide direction for an extended period, say five to ten years, during which the product strategy and the product change and evolve. To say it with Jeff Bezos’ words, “be stubborn on the vision and flexible on the details.”\n ","url":"https://www.romanpichler.com/blog/six-qualities-of-a-great-product-vision/"},{"date_scraped_timestamp":1710925717198,"host":"www.romanpichler.com","page_title":"Six Qualities of a Great Product Vision","text":"\n \n Published on 9th March 2022\n \n \n \n \n \n \n \n The product vision can be a powerful tool to align stakeholders and development teams. When used effectively, it acts as the product’s true north, and it inspires and guides people. This article helps you create such a vision. It describes six essential qualities that a compelling product vision has to have. \n \nListen to this article:\nInspiring\nAn inspiring vision creates a meaningful purpose for everyone involved in making the product a success including the stakeholders and development team members. It helps people understand how their work relates to a bigger whole and how their efforts create a positive change.\nIt also allows you, as the person in charge of the product, to understand if dedicating your time and energy to the offering is worthwhile and sustainable. If the vision resonates with you, then this will help you do a great job, especially when the going gets tough. If that’s not the case, then you should maybe look for a different challenge. As Steve Jobs once said, “If you are working on something that you really care about, you don’t have to be pushed. The vision pulls you.”\nAdditionally, an inspiring vision helps you apply a visionary leadership style and become a visionary leader—someone who guides others through a big, motivating goal.\nA shared vision unites people. It creates alignment, and it facilitates collaboration. A vision is shared when the stakeholders and development team members support the goal and are happy to work towards it. If that’s not the case, then it will be difficult to encourage the individuals to agree to more specific goals and to follow a product strategy and a product roadmap that are based on the vision.\nA great way to ensure that your vision is shared is to create it together with the stakeholders and dev team members in a collaborative workshop, be it online or onsite. Encourage the participants to describe the purpose that they associate with the product. Then look for a product vision that everyone can support.\nVisioning Workshop Attendees\nAs the vision is truly fundamental, you should take the time required to create an inclusive goal that resonates with everyone. Resist the temptation to shortcut or rush the decision-making process. Similarly, don’t allow the most powerful person to dominate and don’t make the mistake of agreeing on the smallest common denominator. Otherwise, you’ll end up with an ineffective vision that fails to inspire and guide people. Ask the Scrum Master or agile coach to facilitate so you can focus on shaping the vision and you don’t have to ensure  that everyone is heard and that nobody hijacks the decision-making process. (See my article Making Effective Product Decisions for more advice on how to decide together with stakeholders and dev teams.)\nEthical\nAn ethical vision gives rise to a product that benefits its users and customers and that does not cause any harm to people and planet. This includes not affecting people’s mental health, for instance, by getting them hooked or offering content that promotes misinformation, self-harm, hatred, and violence.\nAdditionally, an ethical product does not contribute to climate change, and it does not damage the environment by how it is developed, provided, and if it includes hardware, manufactured, delivered, and disposed of.\nWhile the vision alone doesn’t achieve ethicality, it plays a crucial role, as it describes the intention for offering the product. You ultimately have to ask yourself why you want to provide the product. Is it to help others, or is it to maximise your own benefits?\nConcise\nA concise product vision is easy to communicate, understand, and remember. To achieve this, I like to capture the vision as a brief statement or a slogan—a short, catchy phrase. An example for a product that helps people improve their eating habits might be “help people eat healthily.”\nA handy tool to describe the vision is my product vision board. The board, shown in the picture below, captures the vision in the top section and the strategy in the four sections underneath it. You can download the board from the tools section of my website and by clicking on the image.\nAmbitious\nYou can think of the product vision as a big, hairy, audacious goal (BHAG). Such a vision increases the chances of providing a continuous purpose in an ever-changing world, compared to a narrow, specific one. \nI would therefore choose a big, ambitious vision like “help people eat healthily” over a more specific, narrower one like “help people lose weight.” Note that such a product vision is not measurable. It truly is an inspirational, grand goal.\nEnduring\nDespite its name, a product vision should not describe the product or solution. For example, “offer a weight loss mobile app” and “become the number one weight loss app provider” are not effective visions. Instead of referring to the product, state the positive change you want to bring about, such as “healthy eating.”\nA solution-agnostic vision allows you to change the product strategy but keep your vision stable. Say that it turns out that my idea of developing a healthy-eating app is ill conceived. With a vision like “healthy eating,” I can explore alternatives, for example, writing a book on healthy eating and offering healthy-eating workshops.\nA vision that is not tied to a product can therefore provide direction for an extended period, say five to ten years, during which the product strategy and the product change and evolve. To say it with Jeff Bezos’ words, “be stubborn on the vision and flexible on the details.”\n ","url":"https://www.romanpichler.com/blog/six-qualities-of-a-great-product-vision/?replytocom=140137"},{"date_scraped_timestamp":1710925724320,"host":"www.romanpichler.com","page_title":"Six Qualities of a Great Product Vision","text":"\n \n Published on 9th March 2022\n \n \n \n \n \n \n \n The product vision can be a powerful tool to align stakeholders and development teams. When used effectively, it acts as the product’s true north, and it inspires and guides people. This article helps you create such a vision. It describes six essential qualities that a compelling product vision has to have. \n \nListen to this article:\nInspiring\nAn inspiring vision creates a meaningful purpose for everyone involved in making the product a success including the stakeholders and development team members. It helps people understand how their work relates to a bigger whole and how their efforts create a positive change.\nIt also allows you, as the person in charge of the product, to understand if dedicating your time and energy to the offering is worthwhile and sustainable. If the vision resonates with you, then this will help you do a great job, especially when the going gets tough. If that’s not the case, then you should maybe look for a different challenge. As Steve Jobs once said, “If you are working on something that you really care about, you don’t have to be pushed. The vision pulls you.”\nAdditionally, an inspiring vision helps you apply a visionary leadership style and become a visionary leader—someone who guides others through a big, motivating goal.\nA shared vision unites people. It creates alignment, and it facilitates collaboration. A vision is shared when the stakeholders and development team members support the goal and are happy to work towards it. If that’s not the case, then it will be difficult to encourage the individuals to agree to more specific goals and to follow a product strategy and a product roadmap that are based on the vision.\nA great way to ensure that your vision is shared is to create it together with the stakeholders and dev team members in a collaborative workshop, be it online or onsite. Encourage the participants to describe the purpose that they associate with the product. Then look for a product vision that everyone can support.\nVisioning Workshop Attendees\nAs the vision is truly fundamental, you should take the time required to create an inclusive goal that resonates with everyone. Resist the temptation to shortcut or rush the decision-making process. Similarly, don’t allow the most powerful person to dominate and don’t make the mistake of agreeing on the smallest common denominator. Otherwise, you’ll end up with an ineffective vision that fails to inspire and guide people. Ask the Scrum Master or agile coach to facilitate so you can focus on shaping the vision and you don’t have to ensure  that everyone is heard and that nobody hijacks the decision-making process. (See my article Making Effective Product Decisions for more advice on how to decide together with stakeholders and dev teams.)\nEthical\nAn ethical vision gives rise to a product that benefits its users and customers and that does not cause any harm to people and planet. This includes not affecting people’s mental health, for instance, by getting them hooked or offering content that promotes misinformation, self-harm, hatred, and violence.\nAdditionally, an ethical product does not contribute to climate change, and it does not damage the environment by how it is developed, provided, and if it includes hardware, manufactured, delivered, and disposed of.\nWhile the vision alone doesn’t achieve ethicality, it plays a crucial role, as it describes the intention for offering the product. You ultimately have to ask yourself why you want to provide the product. Is it to help others, or is it to maximise your own benefits?\nConcise\nA concise product vision is easy to communicate, understand, and remember. To achieve this, I like to capture the vision as a brief statement or a slogan—a short, catchy phrase. An example for a product that helps people improve their eating habits might be “help people eat healthily.”\nA handy tool to describe the vision is my product vision board. The board, shown in the picture below, captures the vision in the top section and the strategy in the four sections underneath it. You can download the board from the tools section of my website and by clicking on the image.\nAmbitious\nYou can think of the product vision as a big, hairy, audacious goal (BHAG). Such a vision increases the chances of providing a continuous purpose in an ever-changing world, compared to a narrow, specific one. \nI would therefore choose a big, ambitious vision like “help people eat healthily” over a more specific, narrower one like “help people lose weight.” Note that such a product vision is not measurable. It truly is an inspirational, grand goal.\nEnduring\nDespite its name, a product vision should not describe the product or solution. For example, “offer a weight loss mobile app” and “become the number one weight loss app provider” are not effective visions. Instead of referring to the product, state the positive change you want to bring about, such as “healthy eating.”\nA solution-agnostic vision allows you to change the product strategy but keep your vision stable. Say that it turns out that my idea of developing a healthy-eating app is ill conceived. With a vision like “healthy eating,” I can explore alternatives, for example, writing a book on healthy eating and offering healthy-eating workshops.\nA vision that is not tied to a product can therefore provide direction for an extended period, say five to ten years, during which the product strategy and the product change and evolve. To say it with Jeff Bezos’ words, “be stubborn on the vision and flexible on the details.”\n ","url":"https://www.romanpichler.com/blog/six-qualities-of-a-great-product-vision/?replytocom=126879"},{"date_scraped_timestamp":1710925634628,"host":"www.romanpichler.com","page_title":"Technical Debt and Product Success","text":"\n \n Published on 4th December 2018\n \n Last Updated on: 2 May 2023\n \n \n \n \n \n \n Similar to a company experiencing financial debt, products can incur “technical debt”: This happens when wrong or suboptimal architecture, technology, and coding decisions are taken. Consequently, the architecture may not be as loosely coupled as it should be, and the code may be messy rather than clean. This article explains why product people should care about technical debt and it offers strategies for addressing it. \n \nWhy Technical Debt Matters for Product People\nAs the person in charge of the product, you may not be terribly concerned about how clean and well-structured the code is. But the quality of your product matters: It directly impacts your ability to achieve strategic product goals and make your products successful: Technical debt makes it hard to experiment with new ideas, release new features, and quickly respond to user feedback. [1]\nThe messier the code and the less modular the architecture is, the longer it takes and the more expensive it is to change your product. In the worst case, you have to go through a rewriting exercise where some parts or even the entire product are being redeveloped. This is similar to financial debt: When the debt is not paid back, the interest payments can multiply and eventually cripple the business.\nTechnical Debt and Your Product\nTo understand if and to what extent your product is affected by technical debt, talk to the development team, for example, in the next sprint retrospective. I find that development team members usually have a good understanding where issues in the architecture and code are.\nAdditionally, consider asking the team to collect data that shows how much technical debt there is, where it is located, and how bad it is, for example, by using code complexity, dependencies, duplication, and test coverage as indicators. There are a number of code analysis tools available that collect the appropriate data and show how adaptable the architecture and how clean the code is. [2]\nOnce you understand the amount and severity of tech debt in your product, analyse its impact on meeting the product goals and achieving product success together with the development team. Take into account the cost of delay, the cost of not addressing the technical debt now but delaying it to a future point in time. Should you, for example, continue adding new features to the product for the next six months and plan in bigger technical improvement work afterwards? Or would it be better to address the worst debt now?\nFurthermore, consider the life cycle stage of your product. Technical debt is particularly bad for new and young products: If your product has a closely-coupled architecture with lots of dependencies, if it lacks (automated) tests and documentation, or if it is full of spaghetti code, then experimenting with new ideas and adapting the product to user feedback and new trends will be difficult and time-consuming. Similarly, if you want to extend its product life cycle, you may have to first remove (some of) the technical debt before you can make the necessary changes and add new features or create a variant.\nHaving said that, it is a valid strategy to launch a minimum viable product (MVP) whose architecture, technology, and code has been intentionally compromised in order to reduce time to market—as long as the quality is good enough to adapt the product to feedback from the early market. But apply this strategy with caution: You will have to spend time addressing the technical debt incurred and putting your product on solid technical foundations. This should be done before reaching product-market fit, as you will otherwise struggle to scale up and keep your product growing.\nIf, however, your product is in maturity—or even decline—and you do not intend to extend its life cycle but focus on maximising the business benefits it generates, you probably want to carry out as little debt removal work as possible.\nOptions for Removing Technical Debt\nOnce you’ve established how much tech debt there is and how soon it needs to be addressed, you face two choices: You can either make time for a focused effort and dedicate a period of time to removing the debt, or you can carry out the work in parallel to enhancing your product and adding new functionality.\nWhenever you face a significant amount of tech debt that constitutes a barrier to innovation, you should opt for a dedicated period to remove it. Apple did this with Mac OS X Snow Leopard, which was released in 2009 after nearly two years of work. While Snow Leopard didn’t provide any new functionality, it created the foundation for future releases by improving performance and reducing the memory footprint of the operating system, for example.\nI am not suggesting that you should necessarily spend a year or more refactoring your product, as Apple did. But it can be more effective to make a concentrated effort and invest a few months, or at least a sprint or two, in cleaning up the software, as opposed to doing it in drips and drops across several releases. You intentionally slow down, so to speak, to go faster afterwards.\nIf a refactoring release is the right approach for you, then your product roadmap should reflect this: It should show a release dedicated to future-proofing the product and making the necessary technical changes.\nBut if the technical debt is not as significant and does not need to be addressed as urgently, then plan in time for removing some debt in every sprint while continuing to improve the user experience and add or enhance features. You can do this by adding tech debt remedial items to the product backlog. This makes the necessary work visible and allows you to track it across sprints and releases. Make sure, though, that the necessary work is actually carried out and requests for more functionality don’t prevent the removal of technical debt. (My article “Succeeding with Innovation and Maintenance” discusses how you can fix bugs and add new features at the same time.)\nPreventing Technical Debt\nIntentionally compromising the code quality to get a release out and accepting technical debt is all good and well as long as you actually remove the debt afterwards. Often, however, technical debt is created unintentionally in my experience.\nDigital products require ongoing attention to their architecture and code. Otherwise, the product quality will deteriorate, which leads to an increase in technical debt. This is very much like maintaining your bicycle on a regular basis, ideally after every ride. And the more you rely on your bike, the more you should care about it, clean it, and fix or replace faulty parts. The challenge is to make time for the necessary clean-up and maintenance work and view it as part of the bike riding experience, rather than a chore.\nThe same is true for digital products: Some teams feel so rushed and pressured that they repeatedly cut corners and don’t apply good software craftsmanship practices like evolutionary architecture, test-driven development, pair programming, and continuous integration. But these practices do not only help create an adaptable architecture and clean code base. Used properly, they will speed up development and allow you to release new features and functionality faster, not slower—the latter being a common misconception amongst product people in my experience. The opposite is also true: If development teams don’t apply the right practices and tools, then the software is likely to be brittle, not soft and malleable.\nIf you want to prevent future technical debt, then give your development team the time to learn, apply, and improve the right development practices. In fact, you should expect that the development team creates product increments with the right quality. A great way to do this is to employ a Definition of Done that states code complexity limits and test coverage targets, and to only accept work results that fulfil this definition.\nNotes\n[1] Technical debt is a concept originally suggested by Ward Cunningham and nicely explained by Martin Fowler. Thanks to Yves Hanoulle for encouraging me to write about it.\n[2] I recommend that you add software quality to your KPIs and routinely track it. Quality is leading indicator: If it is decreasing, then you know that changing the product will become more and more difficult unless you do something about it. Knowing if and how much technical debt is building up helps you be proactive and avoid nasty surprises.\n ","url":"https://www.romanpichler.com/blog/technical-debt-and-product-success/?replytocom=40782"},{"date_scraped_timestamp":1710925626060,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2725"},{"date_scraped_timestamp":1710925607980,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2736"},{"date_scraped_timestamp":1710925603799,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2739"},{"date_scraped_timestamp":1710925599474,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2741"},{"date_scraped_timestamp":1710925598574,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2744"},{"date_scraped_timestamp":1710925763336,"host":"www.romanpichler.com","page_title":"The Lean Product Backlog - Limit Variation and Prevent Overburden","text":"\n \n Published on 23rd July 2010\n \n \n \n \n \n \n \n Many product backlogs are too long, detailed and complex. This is in stark contrast to what the product backlog should be: a simple artefact listing the outstanding work to bring the product to life. This blog post discusses lean techniques to make the backlog concise and focussed by avoiding variation and overburden. \n Limit Unnecessary Variation\nVariation, also called unevenness, prevents a smooth flow of work. While not all variation in the product backlog is bad — the size of its items should vary depending on their priority to minimise waste, for instance — reducing unnecessary variation helps create a lean backlog and a lean workflow:\nStandardise the techniques for describing product backlog items. Choose user stories to capture functional requirements and operational qualities such as performance and robustness requirements, for instance. Agree on a common way to describe usability requirements such as sketches, wire-frames or mock-ups.\nUse a sprint goal. The sprint goal summarises the desired outcome of the sprint, and moves the Scrum team a step closer toward the release of the product. A shared sprint goal ensures that everyone is working toward a common goal. It minimises variation by limiting the type of requirements worked on in a given sprint, for instance, by choosing items from the same theme. This facilitates close teamwork and can increase velocity.\nEnsure that the high-priority items have roughly the same size and favour small items – items that can be transformed into a part of the product increment within a few days. This reduces variation, improves the progress tracking within the sprint, and prevents defects by allowing the product owner to provide just-in-time feedback on the work results. Note that this approach works best when the team uses agile development practices including story-driven development.\nCreate a steady cadence by using fixed-length releases. Time box your projects: Identify the window of opportunity based on the product vision and the product backlog, and freeze the release date. Take Salesfore.com, a leading provider of on-demand customer relationship management services. The company releases a product update every four months. As a consequence, Salesforce.com experienced an amazing increase in the number of features delivered while drastically reducing its lead-time for new functionality. Note that a fast, steady cadence supports other measures including minimising the inventory in the product backlog.\nPrevent Overburden\nAs long as people work crazy hours, and as long as projects and teams are overwhelmed by the amount of work, the removal of waste and variation is ineffective. Waste and variation are likely to creep back in unless we limit the amount of work to the capacity and capabilities of the organisation. Let’s assume we try to eliminate defects but the project still suffers from overburden. Chances are that quality problems reappear since the project members still feel pressured and are overworked. In fact, overburden is a major source of waste including work-in-progress, waiting and delays, task-switching, and defects.\nTo eliminate overburden, let the product backlog evolve based on customer and user feedback. View changing requirements as a competitive advantage and leverage the feedback together with the project progress to decide which functionality is implemented. Encourage the team to pull only as many items into the sprint as they can transform into a product increment in a sustainable way. Ensure that the high-priority items are ready: They should be clear, testable and feasible. This avoids that the team overlooks tasks and pulls too much work into the sprint. And last but not least, make high-priority items small. This allows the team to optimise its work utilisation. It also avoids the danger of missing tasks – which is a common issue with large stories.\n ","url":"https://www.romanpichler.com/blog/the-lean-product-backlog-variation-and-overburden/"},{"date_scraped_timestamp":1710925556613,"host":"www.romanpichler.com","page_title":"The Product Portfolio Matrix","text":"\n \n Published on 6th June 2017\n \n Last Updated on: 22 Jan 2024\n \n \n \n \n \n \n The product portfolio matrix is a handy tool that helps you make the right product portfolio decisions. This post explains how you can effectively apply it to manage a portfolio of digital products. \n The Matrix Reloaded\nThe product portfolio matrix, also called growth–share and BCG matrix, wants to help you achieve the right blend of young and established products in order to maximise the overall value a portfolio creates. The matrix categorises products as question marks, stars, cash cows, and pets (also known as dogs). The picture below shows the grid with its four quadrants and product types; cash cows are represented by the dollar sign and pets by a cross.\nQuestion marks are products with high growth that don’t yet deliver significant business benefits—be it generating revenue, selling other products or services, enhancing the brand equity, or saving money. [1] Stars show high growth and deliver the desired benefits. Cash cows are products characterised by low growth, but they offer plenty of business benefits. Pets, finally, exhibit low growth and offer few benefits.\nWhen you apply the product portfolio matrix to the offerings in an established company, you’d like to see a healthy, balanced portfolio with enough question marks and stars that have the potential to become cash cows. You also need sufficient cash cows that generate the desired business benefits at a comparatively low cost and are therefore able to help fund the development of new products, question marks, and stars. Finally, you’d like to minimise the number of pets, as they incur cost but deliver only limited benefits.\nFrom Question Mark to Cash Cow\nThe quadrants of the portfolio matrix form an interesting relationship: Products start out as question marks. If they are to become successful, they must develop into stars and then morph into cash cows. Both development steps require effort, time, and money. You may have to change or enhance the features, user experience, and architecture of the product; you may have to adjust the business model and opt for different marketing and sales strategies; and some products require a pivot—think of Youtube, which started out as a dating website, and Flickr, which was an online game before it became a photo-sharing website.\nOnce a product has become a cash cow, it is able to offer the desired business benefits at comparatively low cost, as existing features are largely incrementally enhanced. A revenue-generating product is now most profitable (hence the term cash cow). Eventually, though, cash cows will lose their ability to provide business benefits and become pets. These products provide few benefits but still consume money to maintain them. The following picture shows the desired development sequence from question mark to pet.\nAs every successful product will become a pet and eventually die, it is crucial that you are able to replace ageing cash cows with stars and stars with question marks. At the same token, you must invest enough in new product development initiatives to generate new question marks—assuming that you want to grow organically.\nYour product portfolio therefore requires regular adjustments, and portfolio management should be a common activity. As a rule of thumb, review your product portfolio once per quarter and initiate the necessary changes.\nProduct Portfolio Matrix and Product Life Cycle\nAs you may have noticed, the development sequence discussed above is correlated with the product life cycle: Question marks tend to be products in the introduction stage; stars are products in growth; cash cows are mature offerings; and pets are declining products. The picture below illustrates this relationship.\nNote that the picture above does not account for life cycle extensions—prolonging the life expectancy of a product by adding new features, optimising existing ones, creating variants, or taking it to a new market or market segment, for instance. Such a measure extends the product’s status as a star and prevents it from prematurely becoming a cash cow.\nAvoid these Common Mistakes\nIn theory, the development from question mark to pet and retirement should be straight forward and result in a healthy portfolio. But in practice, I see companies make three common portfolio management mistakes: focussing too much on stars and cash cows, not retiring pets, and clinging on to unsuccessful question marks.\nDon’t Focus too much on Stars and Cash Cows\nThe first mistake is focussing too much on cash cows and stars and neglecting question marks and new product development initiatives, something particularly bigger companies are prone to in my experience. This is due to their tendency to optimise structures and processes for managing existing, successful assets, which makes it hard to deal with the amount of innovation and risk present in new and young products. But focusing too much on stars and cash cows leads to an unbalanced, ageing portfolio that stifles future growth, as shown in the picture below.\nTo prevent such a portfolio, invest 25% of your budget in brand-new products and question marks, and ensure that the teams have the right environment to quickly experiment, fail, and learn. [2]\nDon’t Keep Pets for too Long\nThe second mistake is clinging on to pets even if their benefits are rapidly declining. You should, of course, do the opposite: retire products that are no longer sufficiently beneficial. Take the iPod Classic, Apple’s original and iconic MP3 player. The product was rightly discontinued in 2014 after it had experienced a continued decline in sales.\nDon’t Cling to Question Marks\nThe third mistake, finally, is to over-invest in question marks and to hold on to them for too long: Not every question marks will become a star. Some just die prematurely. Take, for example, Google Wave, a product that combined e-mail, instant messaging, and wikis. Wave was discontinued about a year after its launch in 2009. It never experienced stardom and died as a question mark.\nThe following picture shows that retirement is not the only exit point in the portfolio matrix but that products may have to be discontinued as question marks.\nTo avoid over-investing in your question marks, ensure that all products in your portfolio have clear business goals and use the right KPIs to track product performance. If the latter stays flattish even though you have made significant changes to your product, then pivot or discontinue it early like Google did with Wave.\nNotes\n[1] I have tweaked the original product portfolio matrix by using business benefits instead of market share on the horizontal axis. When Bruce D. Henderson developed the matrix in 1970, he focused on revenue-generating products; digital products, as we know them today, did not exist. But many digital offerings do not directly generate revenue—take, for example, Amazon Kindle and Google Chrome. Instead, they provide different types of benefits to their companies, such as, help sell another product or service (Kindle books), collect data to learn more about user behaviour and build new products (Chrome), and tie the user into the company’s ecosystem (both products). Substituting market share with benefits makes the product portfolio matrix applicable to all digital products.\n[2] Bansi Nangji and Geoff Tuff recommend in their article “Managing Your Innovation Portfolio” that companies should invest about 10% in disruptive or transformational initiatives and about 20% in incremental or adjacent ones. As a life cycle extension counts as an adjacent innovation, 25% makes a good rule of thumb for new development initiatives and question marks in my opinion.\n ","url":"https://www.romanpichler.com/blog/balance-your-portfolio-with-the-product-portfolio-matrix/"},{"date_scraped_timestamp":1710925559983,"host":"www.romanpichler.com","page_title":"The Product Strategy Cycle","text":"\n \n Published on 3rd November 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n Despite its importance, product strategy is not always effectively practiced. One of the key issues I encounter in my work is that strategy and execution are not aligned but rather disjointed. To address this issue, I have developed an iterative process called the product strategy cycle. The cycle systematically connects strategy and execution so that the former guides the latter and insights gained from the tactical work help evolve the product strategy. In this article, I explain how you can use the cycle to join up product strategy, product roadmap, KPIs, product backlog, and development work, and I discuss the role stakeholders and development team members play in making effective strategic product decisions. \n \nListen to this article:\nEnter the Cycle\nTraditionally, strategy and execution are often viewed as separate, sequential pieces of work that are carried out by different people. For example, a product manager might determine the product strategy and one or more development teams might be tasked with executing it. But as long as innovation, change, and risk are present, this approach is ineffective. Instead, strategy and execution have to be closely connected: The former should not only guide execution, but execution should inform strategy changes and help adapt the strategy.\nBased on this insight, I have come up with the product strategy cycle shown in the picture below. It’s a model of an iterative process that systematically links the product strategy with the product roadmap, the product backlog, the development work, and the key performance indicators (KPIs).\nIn the picture above, the process starts at the top of the cycle by creating a new strategy, either for a brand-new product or an existing one. In the latter case, a new strategy might be required to extend the product’s life cycle, for example, by addressing a new market or market segment. An effective product strategy should capture the product’s target group, value proposition, standout features, and business goals.\nBefore you proceed further, you should validate your new strategy and address key risks and assumptions in order to maximise the chances of achieving product success. For example, the market segment you have chosen might be too big and heterogenous, the value proposition might not be compelling enough, or the business goals might not be feasible. Identifying and addressing the key risks in the product strategy is best done iteratively, as I explain in more detail in my book Strategize. I have therefore placed a small cycle next to “Product Strategy” in the picture above.\nOnce you’ve addressed the key risks and you are confident that you have chosen the right needs, market, standout features, and business goals, you can take the next step and derive a product roadmap from the strategy. I view the roadmap as a product plan that describes how you intend to implement the strategy and which specific benefits or outcomes the product should provide over the next, say, 12 months, based on the needs and business goals stated in the product strategy. I call these outcomes product goals. Sample product goals are acquiring new users, increasing engagement, removing technical debt to future-proof the product, and generating revenue.\nWith an actionable product roadmap in place, move on and stock your product backlog. To do so, choose the next product goal stated on the product roadmap, determine the features and functionality required to meet it, and capture them in the backlog. Then create just enough ready product backlog items to be able to start the upcoming sprint and develop the actual product. As an iterative process is usually best suited to create a new product or a major product update, I’ve added another little cycle between “Product Backlog” and “Product” in the picture above. \nAfter development has started, measure the development progress, for instance, by using a release burndown chart. When an initial or new version of the product has been released, use the KPIs to measure the product performance. These should include the metrics required to determine if the product goal chosen has been met and additional indicators that help you assess how your product is doing and if the strategy is working. Examples of the latter are engagement, retention, product quality, team motivation, and in the case of a revenue-generating product, revenue and cost.\nUse the KPIs and the development progress data to review the product strategy and the product roadmap, and change them as appropriate. This might involve making smaller, incremental adjustments. But it might also require you to pivot, to significantly change the strategy in order to make the product successful. Take YouTube as a well-known example. The product pivoted from a dating website to a video-sharing platform.\nYou have now completed the cycle and started another one.\nInvolve the Right People\nSystematically connecting strategy and execution is a key factor to establish an effective product strategy practice. But it is not enough. The best product strategy is useless if the stakeholders and development team(s) do not buy into it and are not prepared to implement the decisions that it captures.\nTo maximise the chances that people understand and support the strategic product decisions, I recommend that you involve the key stakeholders and development team representatives in creating and validating the product strategy, developing the product roadmap, tracking the KPIs and development progress, and updating the plans. Inviting people to contribute to strategic decisions makes it more likely that they understand and support them. What’s more, this allows you to leverage their expertise, which makes it more likely that you will make the right decisions. If you work on a larger product and in a scaled environment, include the product people who work with you, for example, the feature owners.\nA great way to engage the key stakeholders and development team members is to run a collaborative workshop, be it online or in the office. Ask your Scrum Master or another experienced facilitator to help prepare the workshop and facilitate the session. This includes establishing ground rules, selecting a helpful decision rule like consent, and ensuring that everybody is heard, and nobody dominates. (You can find more advice on collaborative decision-making in my book How to Lead in Product Management.)\nInvolving the stakeholder and development team members in the decision-making process puts collaboration at the centre of the strategy cycle, as the picture below shows. \nFinal Thoughts\n“All models are wrong, but some are useful,” as George Box once observed. Every model is an abstraction of reality. It therefore simplifies or ignores certain aspects and leaves out some details. This is also true for the process that I have described in this article. In reality, things are a little bit more complicated.\nThere are two aspects I’d like to draw your attention to: First, you should measure the development progress, as soon as the dev team has started to transform the product backlog items into a product increment. Once you have enough data to see a clear trend—which tends to be the case after two to three sprints—check if the product goal can be met on time and on budget. If that is not the case, then you might have to adjust the product roadmap, which might even trigger an adjustment of the product strategy. Similarly, if your product backlog experiences significant changes, as you find out, for instance, that a key feature is not required or has to be replaced, you should consider the impact on the product roadmap and update it as soon as possible.\nSecond, you should not forget to engage in continuous strategizing, which includes frequently monitoring new trends and the competition. As I have suggested before, spend at least half a day per week carrying out continuous discovery and strategy work including reviewing relevant trends and keeping an eye on the competition. This ensures that you do not miss any threats and opportunities and that you can respond to changes early rather than reacting to them with your back against the wall.\n ","url":"https://www.romanpichler.com/blog/the-product-strategy-cycle/"},{"date_scraped_timestamp":1710925546455,"host":"www.romanpichler.com","page_title":"The Scrum Product Owner Role on One Page","text":"\n \n Published on 1st November 2010\n \n Last Updated on: 13 Jan 2023\n \n \n \n \n \n \n The product owner is a product management role that emerged in Scrum in the late 1990ies. But many organisations still struggle to effectively apply it. In this article, I offer an overview of the role including its authority and responsibility. \n \nAuthority and Responsibility\nA product owner in Scrum is responsible for maximising the value a product creates. The role has to ensure that the product offers the desired value to the users and the customers, as well as to the company that develops and provides it.\nTo fulfil this responsibility, a product owner has to be empowered to own a product in its entirety—to make the necessary tactical and strategic product decisions. In other words, a Scrum product owner has to have the final say on the key decisions, from setting the product vision and determining the product strategy to developing the product roadmap and prioritising the product backlog.\nIn practice, however, Scrum product owners are not always sufficiently empowered. A widespread misunderstanding is that they should focus on delivery and execution, write user stories, and ensure that a development team does a good job. But it is impossible to take responsibility for the value a product creates without having the authority to make the necessary strategic decisions.\nIt’s worthwhile to note that there is another product owner role, the SAFe product owner. This role is focused on the tactics and does not have full ownership of a product. While both roles are called product owner, they differ significantly and have little in common. It’s therefore important to clearly distinguish them, as I explain in the article Six Types of “Product” Owners.\nCommon Tasks\nHere is a list of six common tasks that help a product owner maximise the value of their product:\nCarry out (continuous) discovery and strategizing work. This includes connecting with users and customers; performing competitive analysis; and monitoring market trends.\nCreate and update product plans like a product strategy and a product roadmap.\nUpdate, prioritise, and refine the product backlog. Break larger product backlog items into smaller ones so that they are ready for the next sprint. \nAttend meetings including product strategy review meetings as well as sprint planning, sprint review, and sprint retrospective meetings.\nCollect and evaluate feedback and data on the latest product increment and measure the product performance using the right key performance indicators (KPIs).\nA common mistake I see Scrum product owners make is to neglect the discovery and strategy work—sometimes because they are not empowered to take care of them, but often, because these tasks are not as urgent as breaking epics into more detailed user stories to keep the team moving forward.\nBut if you deprioritise the strategic work, you might overlook a market development, get caught out by a competitor, and find yourself struggling to catch up. I therefore recommend that as a rule of thumb, you spend at least half-a-day per week on product discovery and strategy-related tasks, be it interviewing users, reviewing the latest performance data, or monitoring the competition.\nCollaboration\nYou might be wondering how a single Scrum product owner can carry out all the tasks I mentioned, and how the individual is able to make the right product decisions. The answer is: by collaborating with the right people—the key stakeholders, one or more development teams, a Scrum Master, and possibly other product people in case if the product is too big to be successfully managed by a single product owner.\nThe key stakeholders are those individuals that have an interest in the product and whose contributions are required to provide the product. For a commercial product, a key stakeholder might be a marketer, sales rep, and customer service team member.\nA development team in Scrum is a cross-functional, self-managing group with up to nine members. For end user-facing products, the team usually consists of UX/UI designers, architects, programmers, testers, and other roles that are required to design, develop, test, document, and deploy product increments.\nI find it helpful to involve the key stakeholders and at least some development team members in the discovery and strategizing work. For instance, invite the individuals to quarterly strategy reviews where you inspect and adapt the product strategy and roadmap. Additionally, ask the stakeholders to regularly attend the sprint review meetings, at least once every month, as a rule of thumb.\nCarry out the product backlog work together with the development team members. This includes updating and prioritising the backlog and breaking larger items into smaller ones. Some development teams are even happy to carry out part of the refinement work on their own.\nFinally, let the Scrum Master take care of process and organisational issues so that you can focus on managing the product, as the Scrum product owner.\nArtefacts\nCommon artefacts a product owner creates and updates include the following:\nProduct vision and product strategy\nProduct roadmap\nBusiness model and financial forecast/business case\nPersonas or other user models\nProduct goal\nProduct backlog\nDesirable Skills\nIn order to succeed, Scrum product owners require the right skillset: leadership, strategic, and tactical skills, as the following picture illustrates.\nLeadership skills include empathy, vision, active listening, decision-making, stakeholder management, and product ethics; strategic skills include product strategy and product roadmap, business model and financial forecast, KPIs, market research and validation, and product discovery; tactical skills, finally, include product backlog prioritisation and management, personas, user stories, product validation techniques, and technical understanding. \nAcquiring these skills takes time, dedication, and a supportive management. But without the right skills, it will be difficult to maximise the value a product creates.\n ","url":"https://www.romanpichler.com/blog/one-page-product-owner/"},{"date_scraped_timestamp":1710925754185,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=20214"},{"date_scraped_timestamp":1710925745415,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=127975"},{"date_scraped_timestamp":1710925637440,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=134910"},{"date_scraped_timestamp":1710925646882,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=16108"},{"date_scraped_timestamp":1710925642159,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=126173"},{"date_scraped_timestamp":1710925646774,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=16107"},{"date_scraped_timestamp":1710925546566,"host":"www.romanpichler.com","page_title":null,"text":null,"url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3148"},{"date_scraped_timestamp":1710925674488,"host":"www.romanpichler.com","page_title":"Elements of an Effective Product Strategy","text":"\n \n Published on 19th May 2015\n \n Last Updated on: 4 Apr 2023\n \n \n \n \n \n \n Creating a successful product requires attention to the details, from getting the user interaction and the visual design right to providing the right functionality and using the right technologies. With so much focus on the nitty-gritty, it’s easy to no longer see the wood for the trees. This is where the product strategy comes in. It helps you manage your product proactively and it prevents you from getting lost in the details. This post discusses what an effective product strategy is and how it benefits you. \n \nThe Three Elements of an Effective Strategy\nProduct strategy is about imagining the future of your product: What offering will it become? Who will it benefit? How will it create value? It’s a high-level plan that helps you realise your vision or overarching goal. More specifically, the product strategy should describe who the product is for and why people would want to use and buy it; what the product is and what makes it stand out; and what the business goals are and why it is worthwhile for your company to invest in it, as the following picture shows.\nIn the picture above, the market describes the target customers and users of your product, the people who are likely to buy and to use it. The needs comprise the main problem your product solves or the primary benefit it provides. Think of a product like Google Search or Bing that solves the problem of finding information on the Internet. Compare it to a product like Facebook that allows you to stay in touch with family and friends.\nThe key features and the differentiators are those aspects of your product that are crucial to address the main problem or create the primary benefit and that make make it stand out from the crowd. Don’t make the mistake of creating a mini product backlog or a wish list. Instead focus on the three to five key aspects that make people choose it over competing offers. Take, for example, the first iPhone with mobile Internet, iPod-like digital music player, and touch screen as its key features; or the Google Chrome browser with its focus on speed, safety, and simplicity.\nThe business goals capture how your product is going to benefit your company. Is it going to generate revenue, help sell another product or service, reduce cost, or increase the brand equity? Being clear on the business goals helps you to select the right key performance indicators (KPIs) and measure your product’s performance.\nTake the iPhone and the Google Chrome browser mentioned earlier. While the iPhone currently generates the largest portion of Apple’s revenue at the time of writing, the Chrome browser does not earn any money for Google. But it allows the company to control the way people access the Internet and it has reduced Google’s dependency on third-party browsers such as Mozilla Firefox and Microsoft Edge. Both are important business benefits.\nA handy tool to capture your product strategy is my Product Vision Board, shown in the picture below. You can download it from romanpichler.com/tools/vision-board or by clicking on the image.\nThe Product Vision Board above captures the vision at the top. The four sections underneath it describe the product strategy. You can find more information on how to use the tool in the article The Product Vision Board and the video Introduction to the Product Vision Board.\nStrategy Focus and Inflection Points\nThe product strategy is not a static, fixed statement or document that you create for a new product. It changes as your product grows and matures. The following picture shows the product life cycle with four key events: launch, product-market fit, life cycle extension, and end of life.\nThe strategy for a new product should first help you get to launch, then achieve product-market fit (PMF), and finally sustain the growth of your product. Think, for instance, of the changes Apple has made to the iPhone since its launch in 2007 to keep it attractive and preserve its growth, from adding apps to changing the its size and offering variants.\nOnce the growth starts to stagnate you have reached another strategic inflection point: You can either extend your product’s life cycle, for instance, by rejuvenating it or taking it to a new market, or you let it mature and eventually decline and die.\nAs your product evolves and changes, you should review and adjust the product strategy on a regular basis, at least once a quarter as a rule of thumb. This will help you proactively manage your product, guide the work of the stakeholders and development teams, and maximise the chances of achieving product success.\nThe Product Strategy in Context\nIf the product strategy describes the key elements required to develop a success product as I suggested above, then where are the vision and the product roadmap? My product strategy model in the picture below shows how I relate the artefacts.  \nIn the model above, the vision is the ultimate reason for creating the product, the positive change it should bring about as I describe in more detail in my post “8 Tips for Creating A Compelling Product Vision”. If you think of the strategy as a path to the vision, then the vision guides the strategy.\nSay I want to create an app that helps people become aware of what and how much they eat. The vision could be to help people eat healthily, and the strategy might be to create an app that reduces the risk of developing type-2 diabetes. But that’s not the only way to attain my vision. If it turns out that the app is not a great idea, I could pivot and write a book on healthy eating, for instance, while still following my vision.\nAs the picture above shows, the product strategy provides the input for the product roadmap. The roadmap states how the strategy is implemented and describes how the product is likely to grow. The two work in tandem: The roadmap states how you intend to implement the product strategy and the specific and measurable goals or outcomes your product should create in the coming months.\nFor example, I might derive the following product goals from product strategy of my healthy-eating app and capture it on the product roadmap: Help the users understand their eating habits and acquire an initial user base; help the users improve their eating habits and grow the user base; and help the users get fitter and generate revenue in form of in-app purchases. These goals show how the product is likely to grow and the specific outcomes it will provide.\nThe product roadmap, finally, creates the context for stocking and updating the product backlog, as I describe in more detail in the article The Product Roadmap and the Product Backlog.\n ","url":"https://www.romanpichler.com/blog/elements-definition-product-strategy/?replytocom=2616"},{"date_scraped_timestamp":1710925493847,"host":"www.romanpichler.com","page_title":"Empathy in Product Management","text":"\n \n Published on 16th August 2022\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n I was recently asked at a product management conference what superpower product people should have. I didn’t have to think twice and replied, “empathy.” This article explains why empathy is particularly important in product management and how you can strengthen your ability to empathise even with seemingly difficult stakeholders, customers, and team members. \n \nListen to this article:\nWhat is Empathy and What is It Not?\nEmpathy is our capacity to understand other people’s feelings and needs, to take the perspective of another person. Empathy entails a warm-hearted, open, and kind attitude. This does not mean, though, that you must like the other person and that you must be happy and smiley all the time—nor does it mean sugar-coating messages, only telling people what they want to hear, and putting up with issues. The opposite is true: You can empathically address unhelpful and inappropriate behaviour, as the following example shows.\nImagine that John is a sales rep and a key stakeholder who hardly ever attends the product strategy workshops you’ve invited him to. Instead, he requests product roadmap changes by talking directly to you. You should then consider asking John to change his behaviour and attend the strategy sessions to share his change requests. But act in an empathic way: Find out first what’s going on with John and try to understand why he missed the meetings. It might be that he is overworked and short of time or that there is an ongoing conflict with one of the other stakeholders that makes it difficult for him to participate in the workshops. At the same time, be frank. Don’t beat around the bush but make a clear and specific request once you’ve found out what drives John’s behaviour.\nNote that it’s easy to confuse projection with empathy: The former means making assumptions about what the person should feel according to some preconceived ideas—for example, believing that someone who speaks loudly wants to dominate and take over a meeting. Empathy, however, implies developing an understanding of what is really going on for the other person. In the example just mentioned, the individual might have an odd communication habit and a general tendency to speak loudly, or the person might raise their voice because the individual is upset, not because they want to dominate.\nWhy is Empathy Important in Product Management?\nWhile empathy is a fundamental human quality, there are three reasons that make it particularly valuable for product people. First, empathy is the foundation for effective leadership. It creates trust and psychological safety, and it allows you to influence others and encourage change. That’s key for product people who lack transactional power, who are not the boss of the stakeholders and development teams, but still have to guide and align the individuals to achieve product success. \nTo put it differently, becoming more sensitive to other people’s feelings and needs will increase your ability to lead them. Note, though, that the empathy you show must be authentic. If you pretend to care or if you empathise only to get someone to do something, people will sooner or later realise what is going on and they are likely to lose trust in you.\nSecond, empathising with users and customers helps you develop a deeper understanding of their needs. While we have more data and more powerful analytics tools available today than ever before, I find that reaching out to selected users and customers with respectful curiosity and genuine warm-heartedness—for example, by observing how they get a job done and talking to them about their experience—is crucial to truly understand what they want and need. This, in turn, enables you to make the right product decisions, which makes it more likely to offer a successful and ethical product.\nThird, showing empathy towards yourself and cultivating self-compassion helps you be a happier person. It strengthens your ability to empathise with others, and it avoids the risk of overlooking your own needs and, for instance, regularly working too hard—which is an easy mistake to make, given that most product people have a demanding job. But being overworked and stressed is counterproductive. It can lead to a drop in productivity and motivation, and it can harm your mental health. Practised correctly, self-compassion will help you balance your own needs and the needs of others so that neither are neglected. \nHow Can You Strengthen Your Empathy?\nWe all have the ability to empathise. But how strong it is, varies significantly. Not everyone we meet is a highly empathic person. What’s more, it is easy to empathise with someone we like and who we agree with. But if we are dealing with a “difficult” stakeholder, customer, or team members, developing an open, warm-hearted attitude can be challenging. The following four techniques will help you increase your capacity to empathise with others.\nPractise Active Listening\nListening is not only crucial to have a successful conversation. It is key to understand someone’s feelings and underlying needs. To achieve this, listening has to take on an active, engaging quality. You have to listen with the intention to understand the other person, no matter if you like or dislike the individual and if you agree or disagree with their views. This requires you to give your full attention to them, develop a genuine interest in what they have to say, be respectfully curious, and cultivate an open mind—which I’ll discuss in the next section in more detail.\nWhat’s more, you should listen not only to what is being said, but also pay attention to the body language including voice pitch and volume, facial expressions, and gestures. These often reveal the person’s feelings, for example, if someone speaks loudly and has a red face, they are upset or excited, no matter how carefully they mince their words. Feelings, in turn, are gateways to the underlying needs, interests, and motives. To discover them, consider using open-ended, non-directive questions. You might say, for instance, “Can you please tell me why this is important to you?” You can find more guidance on how to listen effectively in my article Listening Practices for Product People and in my book How to Lead in Product Management.\nCultivate Curiosity and Open-mindedness\nAttentively listening to someone and empathising with them is difficult if you are strongly attached to preconceived ideas and beliefs. For example, if John, the sales rep mentioned earlier, has come up with unhelpful suggestions for product roadmap changes in the past, then it is easy to label him as incompetent and annoying and to no longer pay full attention to what he says.\nBut this does not only reduce your ability to understand and connect with the individual. It also risks ignoring a suggestion that might turn out to be a good idea. It is therefore helpful to develop an open, curious mind and take a real interest in what the other person has to say, how the other person is feeling, and what their underlying needs are. This does not mean, of course, that you cannot or should not have any opinions. But do hold your views lightly and be willing to challenge them.\nWalk in the Other Person’s Shoes\nEmpathising with someone requires the ability to take the perspective of the other person, to see things through their eyes. You can achieve this by walking in the individual’s shoes and sharing their experience.\nYou might, for instance, shadow users to better understand how they get a job done and what they might be struggling with; you might visit selected customers with John, the sales rep mentioned earlier, to learn more about his job and the challenges and pressures he is facing—as well as the customers you visit; or you might pair with one of the product people on your team to find out why they struggle to select the right KPIs for their product and how you can best help them.\nSharing someone’s experience can truly be an eye opener. It can help you cultivate an open, receptive mind and better understand people’s feelings and needs.\nPractise Self-compassion\nIt’s hard to empathise with others and cultivate an open, warm-hearted attitude if you are not kind to yourself. To be more self-compassionate, follow these four recommendations: \nFirst, don’t expect to always succeed and get everything right. Don’t beat yourself up when you make a mistake; don’t be overly self-critical and have unrealistic expectations of yourself. Recognise that mistakes and failure are part of developing new skills as well as bringing new products and features to life. As Albert Einstein said, “A person who never made a mistake never tried anything new.” Look at yourself with kindness without being complacent and ignoring any shortcomings you might have.\nSecond, don’t sacrifice your own needs but look after yourself at work. Practise sustainable pace, stick to standard working hours, and take regular breaks. Consider delegating some tasks. For example, ask the development team members to refine (some of) the user stories and carefully choose the meetings you attend. Additionally, focus on your product role and don’t take on responsibilities that are not part of your job, such as, coaching a development team or teaching Scrum to the stakeholders. Make sure that you get the support you need and that you have, for instance, an effective Scrum Master at your side. Otherwise you are likely to become overworked or neglect important, non-urgent duties such as product strategy work—neither of which is desirable. \nThird, make regular reflection part of your work. Allocate thirty minutes in your calendar towards the end of each work week and ask yourself the following three questions, which are based on my book How to Lead in Product Management:\nWhat did I get done this week? Which challenges and difficulties did I encounter? What did I learn?\nHow am I feeling right now? How did my moods and energy levels develop during the week?\nWhat changes do I want to make next week so I can be more productive and happier at work?\nFourth, consider meditating to develop a heightened awareness of how you are feeling. For example, are you relaxed and content, or are you tense and stressed? If you find that you are getting increasingly tense, then this allows you to investigate why this is and make the necessary changes, for example, stop working extra hours. Noticing your mental states without judgement and blame will not only help you understand yourself better and be more effective at work. It will also increase your self-compassion and mental wellbeing.\n ","url":"https://www.romanpichler.com/blog/empathy-in-product-management/"},{"date_scraped_timestamp":1710925570676,"host":"www.romanpichler.com","page_title":"Empowering Development Teams","text":"\n \n Published on 3rd September 2019\n \n Last Updated on: 9 Feb 2023\n \n \n \n \n \n \n An empowered development team owns its work, is authorised to make the right decisions, and is able to work independently. Empowered teams are happier, create better products, and allow you, the person in charge of the product, to spend more time on product discovery and strategy. This article shares five tips to help you empower your development teams. \n \nShow People that You Care\nEmpowering development teams starts with taking a sincere interest in the individuals, attentively listening to their ideas and concerns, and empathising with them. This shows that you care and value people’s perspective; it builds trust; and it gives the team members the confidence to step up and take ownership. \nIf people don’t feel safe, they may shy away from accepting additional authority and only do what their job description requires. In the worst case, empowerment is seen as a trick to make development teams do more work and to blame them if things don’t go to plan.\nCreate Autonomy through Shared Goals \nTo help your team take ownership and work autonomously, establish shared goals. A good example are sprint goals: A sprint goal captures the desired outcome of a sprint and is agreed by product owner and development team. Having a sprint goal in place enables the team to decide what needs to be done and how the work is performed. \nIn order to create shared goals, involve the team members in the decision-making process. Use collaborative decision-making techniques, such as deciding by consent, to secure people’s buy-in. Don’t try to persuade or pressurise teams to accept a goal. Otherwise, the members are unlikely to take ownership, and they may not care if the goal is met or not. \nAt the same token, hold people accountable for meeting goals—assuming that they have agreed to them. Be grateful for people’s effort and goodwill and acknowledge the challenges the team may have encountered. But provide clear feedback and do not allow people to sidestep or ignore shared goals.\nLet the Team Own the Solution\nI commonly find that product people believe that they must precisely describe the product functionality and spoon-feed their development teams with detailed user stories. While this approach may be appropriate when a team does not sufficiently understand the user needs and lacks user story skills, it should not become a habit. Instead, you should help your development team grow, acquire the relevant knowledge, and let people take full ownership of the solution or, if that’s not possible, the product details. \nA great way to do this is to include the team members in product discovery and UX work and allow them to observe and interact with users. Additionally, involve the development team in the product backlog work and teach people how to formulate and refine user stories. This may increase your workload initially. But in the long run, it will reward you with a more autonomous and motivated team, and more time to take care of product strategy and discovery.\nWhile giving people ownership of the solution is important, it is not enough to empower a development team: If a team is held back by dependencies, working autonomously is impossible. You should therefore ensure that your development team owns the software it develops—be it an entire product or a product part like a feature or component—and that it has enough people with the right skills onboard. This might require adjusting the team setup, for example, moving from component to feature teams, as well as cross-skilling team members or adding new people to the team, for instance, hiring a new UX designer.\nEncourage Self-organisation\nAn agile development team should take full ownership of their work. This includes planning and tracking the work and identifying impediments. But it also means learning to effectively collaborate, constructively deal with conflicts, and make joint decisions. While it’s the Scrum Master’s responsibility to support self-organisation, there are a number of things you can do:\nEnsure that you establish shared goals that clearly describe the desired outcome of a sprint, as discussed above.\nDo not interfere with the work of the team during the sprint. This includes not assigning tasks and criticising individuals, and not changing the sprint goal once it’s been agreed. \nActively participate in the sprint retrospective. Offer constructive feedback, address issues and concerns, and help resolve them.\nBe aware that it takes time for a group of people to become a self-organising team and that the learning process may involve setbacks and mistakes. Newly formed development teams tend to find it hard, for example, to reliably meet their commitments. You may consequently have to be patient and allow the team to use the first few sprints to learn how much work they can be accomplish in a sprint. \nGive the Team the Opportunity to Learn and Develop\nFinally, encourage a growth mindset amongst the team members and give people the opportunity to learn new skills, and experiment with innovative tools and technologies, for instance, by allocating some learning and development time in every sprint or scheduling hack days. \nWhile this leaves the team with less time to progress the product, it boosts people’s motivation. What’s more, it avoids the risk that the team is so busy cranking out new features every sprint that new technologies are overlooked and opportunities to further improve the product are missed. \n ","url":"https://www.romanpichler.com/blog/empowering-development-teams/"},{"date_scraped_timestamp":1710925590442,"host":"www.romanpichler.com","page_title":"Establishing an Effective Product Strategy Process","text":"\n \n Published on 2nd October 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n Developing a successful product is not down to luck or trying hard enough. Instead, product success starts with making the right strategic decisions. But as product people, we are often so preoccupied with the tactics—be it dealing with an urgent support request or writing new user stories—that we sometimes no longer see the wood for the trees. In the worst case, we neglect the strategic work and end up with an unsuccessful product. To avoid this pitfall, you should establish an effective product strategy process, as I discuss in this article. \n \nWhy a Product Strategy Process Matters\nAn effective product strategy process should ensure that a valid product strategy and an actionable product roadmap are always available—that a shared and valid approach to achieving product success is available at anytime, as the picture below illustrates.\nIn the picture above, the product strategy describes how a visionary, inspirational goal is attained. It includes the product’s value proposition, market, stand-out features, and business goals. The product roadmap shows how the product strategy is put into action by stating dates, measurable goals, and selected features. It provides the context for making the right tactical decisions including prioritising and managing the product backlog.\nHaving a valid strategy and actionable roadmap available at all times requires two complementing strategizing approaches, a timeboxed and continuous one, as I explain below.\nTimeboxed Strategizing\nWhenever you create a brand-new product or make significant changes to an existing one, you will benefit from creating and validating a new product strategy. This is best done as part of a dedicated strategizing period. This results in an innovation process like the one shown in the picture below.\nPlease note that the picture above depicts strategizing and product development as sets of overlapping activities rather than distinct phases or stages: Carrying out some development activities like UX design and high-level architecture as part of the strategy work sets up the development work and avoids having to use a sprint 0.\nAs it’s hard to correctly determine upfront how much time will be required to carry out the necessary strategy work, for example, observing and interviewing users, testing prototypes, and validating pricing assumptions, I like to time box the work. If you are not sure which time box is right for you, then start with one month and hold weekly review meetings where you assess the progress and decide if and how to continue.\nIn addition to allocating enough time for the strategy work, I find it helpful to adopt a collaborative approach. Bring together the right people and form a product team. You will need development team representatives like a user experience (UX) designer, developer, and tester, key stakeholders such as a sales rep, marketer, and support person, and a Scrum Master, as the following picture shows.\nA collaborative approach offers you several benefits: It leverages the knowledge and creativity of the dev team and stakeholders, creates a shared understanding, and builds strong buy-in. This reduces risk that the development team members and stakeholders don’t understand or support the product strategy. \nDon’t forget, though, that you lead the strategizing effort. This includes making a decision if no consensus can be reached. The other product team members should help you create and validate the new product strategy, and the Scrum Master/coach facilitates the process.\nMake sure that the people involved in the strategizing work continue to be involved as the focus shifts to developing and delivering the new product or features. The development team reps should continue to work on the development team; the stakeholders should continue to play their respective roles and be involved in reviewing and adjusting the strategy.\nContinuous Strategizing\nAs helpful as it is to create a product strategy, it is not enough. The world doesn’t stand still; markets and technologies change; new competitors emerge. It is therefore important that you regularly assess if your strategy is still working:\nReview the product performance using the appropriate key performance indicators. Analyse the data collected to understand how your product is doing. Do the metrics show a positive, flat, or negative trend? What conclusions can you draw from the analysis? What would help your product perform well?\nLook for new market trends. Are there any new technology, regulatory, or social developments, for example, machine learning, GDPR, and gig economy? Do they impact your product? Do they offer an opportunity to innovate, add, remove, or enhance features, or create a brand-new product? Talking to users, attending trade shows and conferences, and participating in the online communities can help you spot new trends.\nKeep an eye on the competition. Are your competitors launching new products or features? Are there new market entrants? Should you respond to the changes? If so, which actions are appropriate? Job postings will help you guess your competitors’ plans. Reviewing their products will tell you if your product is still sufficiently differentiated.\nFollow developments at your own company: Are there any changes to the business strategy? And if so, what are the consequences for your product? Are important stakeholders less engaged? Is their interest and support weakening?\nTo help you effectively carry out the work above, I recommend the following:\nBlock at least one hour per day in your calendar for strategic work.\nSchedule collaborative strategy reviews on a regular basis—once per quarter, as a rule of thumb.\nCarrying out strategic work on a daily basis helps you avoid nasty surprises such as a competitor offering a new killer features. It makes it more likely that you recognise early warning signs like declining sign-up rates, increasing churn, or growing number of support calls. This allows you to be responsive and take actions early.\nIn addition to the continuous strategy work, the quarterly reviews assess the product strategy and product roadmap taking into account longer timeframes and larger trends. By involving development team representatives and key stakeholders—ideally, the same people who helped you create the current product strategy—you leverage people’s collective creativity and knowledge, create alignment, and mitigate the risk that the individuals don’t support the strategy changes.\nWhile scheduled strategy reviews are helpful, you should, of course, not wait for the next review if your daily strategy work shows that there are developments that need to be urgently discussed with the dev team and stakeholders. Instead, hold the next collaborative review as soon as possible.\nMaking It Stick\n“In theory, there is no difference between theory and practice; but in practice, there is,” Yogi Berra once said. I find this insight is particularly applicable to product strategy: Many organisations are great at the tactical level but not at systematically creating, reviewing, and adapting the product strategy. This has two common causes:\nLack of empowerment.\nProduct people being too busy.\nUnfortunately, not all companies recognise that strategic responsibilities are a mandatory part of a product person’s job. I have seen more than one business where product people were great product backlog caretakers but lacked the authority and knowledge to make strategic product decisions. If that’s the case for you, then I recommend two things: Lobby for more management support and educate yourself. The more you know about product strategy, the easier it will be for the decision-makers to trust you to make strategic product decisions.\nAdditionally, product people sometimes take on too many responsibilities. A common mistake is to perform Scrum Master duties, like facilitating teamwork and looking after the development process, for example. This makes a demanding job even more challenging and it increases the workload. You should therefore ensure that you focus on your actual job, say no to other duties, and free up enough time for strategy work. Don’t allow urgent tactical tasks to take up all your time but make strategy work a high priority.\n ","url":"https://www.romanpichler.com/blog/establishing-an-effective-product-strategy-process/"},{"date_scraped_timestamp":1710925672302,"host":"www.romanpichler.com","page_title":"Every Great Product Owner Needs a Great Scrum Master","text":"\n \n Published on 26th March 2014\n \n Last Updated on: 14 Nov 2023\n \n \n \n \n \n \n The Scrum product owner and the Scrum Master are two separate roles that complement each other. To do a great job, product owners need a strong Scrum Master at their side. Unfortunately, I find that there is often a lack of Scrum Masters who can support the product owner. Sometimes there is confusion between the roles, or there is no Scrum Master at all. This post explains the differences between the two roles, what product owners should expect from their Scrum Master, and what the Scrum Masters are likely to expect from them. \n \nProduct Owner vs. Scrum Master\nThe product owner and Scrum Master are two different roles that complement each other. If one is not played properly, the other suffers. As the Scrum product owner, you are responsible for product success—for creating a product that does a great job for the users and customers and that meets its business goals. You therefore interact with users and customers as well as the internal stakeholders, the development team, and the Scrum Master, as the following diagram shows.\nThe grey circle in the picture above describes the Scrum Team consisting of the product owner, the Scrum Master and the cross-functional development team.\nThe Scrum Master is responsible for process success—for helping the product owner and the team use the right process to create a successful product, and for facilitating organisational change and establishing an agile way of working. Consequently, the Scrum Master collaborates with the product owner and the development team as well as senior management, human resources (HR), and the business groups affected by Scrum, as the following picture illustrates:\nSucceeding as a Scrum product owner requires the right skill set, time, effort, and focus. So does playing the Scrum Master role. Combining both roles—even partially—is not only very challenging. It also makes your job as the product owner even more demanding. This risks neglecting some of your core responsibilities or sacrificing sustainable pace and with it, your wellbeing. Therefore, do not take on Scrum Master duties, at least not on a continued basis.\nWhat the Product Owner should Expect from the Scrum Master\nAs a Scrum product owner, you should benefit from the Scrum Master’s work in several ways. The Scrum Master should coach the dev team so that the team members can build a great product, facilitate organisational change so that the organisation leverages Scrum, and help you do a great job. The following table details the support you should expect from the Scrum Master:\nTeam Coaching\nHelp the development team collaborate effectively and manage their work successfully so that they can make realistic commitments and create product increments reliably.\nEncourage the team to participate in product backlog refinement.\nEnsure that the team has a productive work environment.\nOrganisational Change\nWork with senior management, HR, and other business groups to implement the necessary organisational changes required by Scrum.\nEducate the stakeholders about Scrum and explain their role in progressing the product.\nResolve role conflicts such as product owner vs. product manager and product owner vs. project manager.\nProduct Owner Coaching\nHelp the product owner choose the right product management techniques and tools.\nSupport the product owner and tackle empowerment issues.\nFacilitate decisions and help the product owner, stakeholders, and dev team members reach an agreement.\nThe Scrum Master supports you as the product owner so that you can focus on your job–making sure that the right product with the right user experience (UX) and the right features is created. If your Scrum Master does not or cannot provide this support, then talk to the individual, and find out what’s wrong.\nDon’t jump in and take over the Scrum Master’s job. If you don’t have a Scrum Master, explain to your management sponsor and to your boss why you need a qualified Scrum Master at your side. Taking on the Scrum Master role would cause you to be overworked or neglect some of your core responsibilities, neither of which is desirable.\nWhat the Scrum Master should Expect from the Product Owner\nIt takes two to Tango, as the saying goes. The table below describes the service the a Scrum product owner should provide in more detail:\nStrategic Direction\nProvide a vision, product strategy, and product roadmap to the development team that describes where the product is heading.\nInvolve (some of) the team members and the key stakeholders in the product strategy work.\nFormulate a product goal for the near to mid-term.\nProduct Discovery Guidance\nProactively work on the product backlog. Update it with new insights and ensure that there are enough ready items. Involve the team members in the work.\nProvide direction and make prioritisation calls.\nInvite the right people to sprint reviews and choose the right techniques to validate product decisions, for instance, invite selected users the review meeting and carry out a usability test.\nCollaboration\nBe available for questions and support the development team.\nBuy into the process and attend the sprint planning, sprint review, and sprint retrospective.\nEngage the stakeholders but don’t shy away from making tough decisions; say no to some ideas and requests\n ","url":"https://www.romanpichler.com/blog/every-great-product-owner-needs-great-scrummaster/"},{"date_scraped_timestamp":1710925558216,"host":"www.romanpichler.com","page_title":"Everything You Need to Know about Product Portfolio Strategy","text":"\n \n Published on 22nd January 2024\n \n Last Updated on: 26 Jan 2024\n \n \n \n \n \n \n Products often don’t exist in isolation. Instead, they are part of a product portfolio. Think of Word, Excel, and PowerPoint, which belong to Microsoft Office. Such a portfolio benefits from having a dedicated strategy—a product portfolio strategy. But what information should it contain? Which template can you use to describe it? How does it relate to the overall product portfolio management work? And who should create and update the strategy? Read on to find out my answers. \n \nListen to the audio version of this article:\nWhat Is a Product Portfolio Strategy and Why Does It Matter?\nA product portfolio strategy is a high-level plan that helps you maximise the value a group of products creates. It achieves this by setting overarching goals for the entire portfolio. These guide and align the strategies of the portfolio members, as Figure 1 illustrates.\nFigure 1: The Product Portfolio and Product Strategy Using Microsoft Office as an Example\nIn Figure 1, the strategies of the individual products—Word, PowerPoint, and Excel—implement the Office strategy. Their visions, target groups, needs, standout features, and business goals must comply with the overall portfolio strategy.[1]\nProduct Portfolio, Product Family, and Product Line—What’s the Difference?\nA product portfolio is a group of products. These might be end-user-facing or internal ones like a software platform, for instance; they might directly generate revenue or support commercial offerings. Larger companies often have several portfolios; early-stage startups, in contrast, usually have a singleton one—it consists of just one offering.\nA product family is commonly defined as a group of related products. You can therefore view it as a cohesive product portfolio—a portfolio whose members have related value propositions and/or business goals, for example, Adobe Creative Cloud and Microsoft Office.\nA product line is a set of product variants. You can think of Microsoft Visio as a product line, as it is offered in three versions at the time of writing—basic, standard, and advanced. Another example is YouTube, which is available in three variants—standard, premium, and kids.\nWhich Specific Information Should the Portfolio Strategy Contain?\nAn effective product portfolio strategy should contain five elements—an overarching vision that describes its purpose, the positive change it should bring about; the markets and market segments the portfolio serves; the overall value it creates for the users and customers; the business benefits it helps achieve; and the type of products it contains with the capabilities that set them apart from competitors.\nTo make this more concrete, let’s explore how the Microsoft Office strategy might be captured.[2]\nFigure 2: A Sample Product Portfolio Strategy\nIf you are familiar with my work on product strategy, you’ll recognise the structure I’ve used in Figure 2: It is based on the Product Vision Board—the tool I’ve developed to capture a product vision and a product strategy. This means that you can apply my strategy approach not only to individual products but also to your product portfolio.\nTo get started, create your own Portfolio Vision Board by downloading and adapting the Product Vision Board or by recreating it in your favourite tool. Please make sure, though, that you state the author and source of the Product Vision Board as well as the CreativeCommons BY-SA license on your derived portfolio board—like I did in Figure 2. If you haven’t worked with the Vision Board, then read the article The Product Vision Board and watch the video Product Vision Board Introduction.\nBut despite the structural similarity between a portfolio and a product strategy, there is an important difference: Due to its nature, a portfolio strategy has to be bigger and less specific than a product strategy—it covers several products and not just a single one. This means that its target group, needs, standout features, and business goals are significantly less specific than those in a product strategy.[3]\nHow Does the Product Portfolio Strategy Direct the Product Strategies?\nNow that we understand which information a portfolio strategy should contain, we can take a closer look at how it guides the strategies of the products it contains using Office as an example. The Word, PowerPoint, and Excel visions have to either support the Office vision or, which is my preference, they inherit it. This way, they share the same purpose—“to enable individuals and organisations to get things done.”\nAdditionally, the target groups of Word, PowerPoint, and Excel have to be subsets of the portfolio target group. Similarly, the needs captured in the individual strategies have to help meet the needs in the portfolio; the standout features of Word, PowerPoint, and Excel have to address the needs stated in the Office strategy; and their business goals have to help achieve the portfolio ones. Figure 3 illustrates this relationship.[4]\nFigure 3: The Product Strategy Implements the Portfolio Strategy\nFollowing this approach ensures that the portfolio and product strategies are closely aligned. To put it differently, the portfolio strategy sets the stage for the product strategies; it guides and constrains the strategic decisions of the portfolio members.\nHow do Product Portfolio Strategy and Product Portfolio Management Relate?\nAs its name suggests, product portfolio management is the process of managing a group of products. This includes analysing a product portfolio using a tool like the Product Portfolio Matrix, creating and updating a product portfolio strategy, and adjusting the portfolio. The latter includes harmonising the strategies and roadmaps of the portfolio members, resolving dependencies, coordinating major releases (if required), as well as adding and removing products.\nAs this description shows, simply creating a product portfolio strategy is not enough. You also have to establish an effective portfolio management approach. Part of this process should be regular portfolio strategy reviews. I recommend holding them every three months and considering the portfolio performance, changes in the competitive landscape and business strategy, new trends, and modifications of the strategies of the portfolio members.\nThe product portfolio strategy is therefore far from being a fixed plan. Just like a product strategy, it is best understood as being malleable and changeable. As Dwight D. Eisenhower famously said, “Plans are nothing; planning is everything.”\nWho Creates and Manages the Product Portfolio Strategy?\nCarrying out portfolio management and creating and evolving a portfolio strategy requires expertise and time. To ensure that the work gets done, you have two options:\nFirst, use a dedicated product manager. The individual should have a track record of successfully managing products similar to the ones contained in the portfolio. Additionally, they‘ll benefit from having the right leadership skills, be able to guide a group of product people, collaborate with senior stakeholders, and engage with senior management.\nSecond, ask the head of product to carry out the portfolio management work in addition to their other duties—as long as the individual has the necessary expertise and does not become overworked.\nNo matter, which option you choose, it would be a bad idea if a single person made all portfolio decisions on their own. This would waste the knowledge and creativity of the people working on the individual products. What’s more, it might cause poor alignment and weak buy-in. I therefore recommend a collaborative approach that involves the following individuals:\nThe product portfolio manager (who might be the head of product);\nThe individuals managing the products contained in the portfolio;\nDevelopment team reps which might include a UX designer (for end-user-facing products), an architect/programmer, and a tester/QA engineer.\nKey stakeholders, for example, a sales rep, marketer, and customer support team member.\nThese individuals form a product portfolio team like the one shown in Figure 4.\nFigure 4: The Product Portfolio Team\nThe team in Figure 4 is similar to a product team but it operates at a higher level. What’s more, the portfolio team should not only create a portfolio strategy but also collaboratively review and adjust it on a regular basis.\nTo staff the team, I recommend asking the dev teams and various key stakeholders involved in progressing the individual products to nominate representatives. This ensures that the team members are motivated to help with the portfolio management work. Additionally, keep the team stable to facilitate trust-building and collaboration and avoid handoffs and loss of knowledge.\nHow Can You Get Started with a Product Portfolio Strategy?\nMy experience suggests that it’s usually best to first able to create and evolve a strategy for a single offering before you move up a level and employ a product portfolio strategy. Once you have established an effective product strategizing approach—which often is challenging enough—you’ll be in a great position to transfer your learnings onto the portfolio level.\nTo remind yourself of the advice shared, download the infographic below by clicking on the image.\nNotes\n[1] The article is based on my work with different clients in different industries using different product portfolios. I use Microsoft Office, officially called Microsoft 365 at the time of writing, as a well-known example of a product portfolio, which you hopefully can relate to—even if you use an alternative like Google Workspace or Apple iWork. Note that it’s unknown to me how Microsoft manages the Office suite, and I don’t claim that the company uses an approach like the one described in this article.\n[2] Note that the sample strategy shown in Figure 2 is based on my research; it is not an official description of the Office strategy employed at Microsoft.\n[3] You therefore cannot apply the checklist I have developed for the Product Vision Board to the Portfolio Vision Board.\n[4] Figure 3 uses a single product strategy for simplicity’s sake.\n ","url":"https://www.romanpichler.com/blog/product-portfolio-strategy/?replytocom=175940"},{"date_scraped_timestamp":1710925561628,"host":"www.romanpichler.com","page_title":"Four Product Success Factors","text":"\n \n Published on 7th December 2021\n \n \n \n \n \n \n \n Our ultimate goal as product people is to achieve sustained product success: to ensure that our products do a great job for their users and customers and that they generate value for our businesses on a continued basis. While achieving product success cannot be reduced to a simple formula, there are four factors that have a profound impact on it, as I discuss in this article. \n \nListen to this article:\nThe Four Factors Explained\nTo achieve lasting success, a product must fulfil the following four conditions. First, it has to address a specific need that a group of people have. Second, it has to be feasible to develop it. Third, it has to generate sufficient business benefits to justify developing it. Fourth, it must not cause any harm to its users, the wider society, and the planet. In other words, desirability, feasibility, viability, and ethicality have to be met. They truly are the cornerstones of product success, as the picture below illustrates.\nLet’s look at the four success factors in more detail. \nDesirability is probably the most important factor. If people don’t need or want to use a product, it will fail. To be desirable, a product has to solve a specific problem or offer a tangible benefit. Take the example of Sonos, a wireless hi-fi system that allows people to enjoy music by providing easy access to a range of streaming services. It’s simple and convenient to use, and it offers a decent sound quality. Products like the Sonos system are sometimes called vitamins, as they provide a nice-to-have benefit, similar to vitamin supplements. Compare this to a product like Apple’s AirTags, which address the issue of finding keys and other misplaced items. Such a product is also referred to as a painkiller, as it addresses a problem or pain point. But no matter how a product is classified, it must create value for its users—or it is doomed.\nFeasibility implies that it is possible to design and build the product: the technologies required exist or can be developed. Additionally, enough people with the right skills are available or can be recruited. If, for example, developing the product requires the application of advanced machine learning algorithms, then you’d have to explore if appropriate machine-learning frameworks exist, or if it’s possible to develop the algorithms in house.\nViability means that developing and providing the product is viable from a business perspective. The product therefore has to create enough business benefits to justify spending money on it. These may include generating revenue, reducing cost, increasing productivity, and strengthening the brand. Examples of revenue-generating products are Google Search, which generates money through ads, and Microsoft Word, which is monetised through subscriptions (as part of the Office suite). Contrast them with products like the Google Chrome browser and Microsoft Edge, which offer different business benefits: they allow the companies to control how users access the Internet, tie them to their respective ecosystems, and make it more likely that they interact with revenue-generating offerings.\nEthicality, finally, states that a product must not cause any harm to people and planet: It must not reduce people’s mental wellbeing, for example, by getting them hooked or by offering content that promotes misinformation, self-harm, or violence. Additionally, an ethical product does not contribute to climate change and does not damage the environment by how it is developed, provided, and—if it includes hardware and plastics—manufactured, delivered, and disposed of. To achieve this, you will benefit from a business model that is fair to all parties and from making ethically sound design and programming decisions, for instance, by avoiding the use of dark patterns and mitigating machine learning biases.\nThe first three factors were—as far as I know—originally suggested by Tim Brown in his book Change by Design. He describes them as competing constraints that must be balanced to innovate successfully. But as Brown notes, this could result in “dreaming up alluring but essentially meaningless products destined for the local landfill—persuading people … ‘to buy things they don’t need with money they don’t have to impress neighbours who don’t care.’” What’s more, the impact digital products can have on people’s mental health makes it compulsory in my mind to add ethicality as a fourth success factor. On the positive side, an ethical product increases the chances of achieving lasting product success, and it reduces the risk that the reputation of the company suffers, as some tech companies have had to experience in recent years.\nApplying the Success Factors\nKnowing which factors influence product success is helpful. But it’s even better to use them when you make strategic product decisions. To see how this can be done, let’s explore how the success factors can be applied to the product vision board.\nThe board captures the vision and strategy of a product, and it consist of five sections: vision, which describes the ultimate reason for developing and providing the product; target group, which captures the users and customers; needs, which states why people would want to use and possibly pay for the offering; product, which describes what kind of product it is, what its standout features are, and if it is feasible to develop it; and finally, business goals, which lists the business benefits the product should generate.\nThe following picture visualises the recommendations above and shows how the factors map onto the five sections of the product vision board. (You can download the template by clicking on the image below or this link.)[1]\nDesirability applies to the target group and needs sections. It encourages you to choose a market or market segment that is large enough and to find a need that is strong enough so that people are likely to use the product.\nEthicality affects the vision, needs, product, and business goal sections. You should therefore select a vision that describes a positive change, a change that does negatively impact people and planet. Ensure that addressing the needs is truly beneficial for the users. Pick standout features that don’t hook people or harm them in any other way and make ethical design and technology decisions. Finally, choose business goals that encourage a fair business model as mentioned above.\nViability impacts the product and business goal sections. You should ensure that the product generates tangible business benefits so it’s justifiable to develop it. Check that the benefits are achievable and that you have identified the right business model to generate them. Additionally, select standout features that set your product apart from competing offerings and that make it clear to prospective users and customers why they should choose your product.\nFeasibility applies to the product section. It encourages you to check if it is technically feasible to develop the product, if the people and technologies required are available or that they can be hired and acquired, respectively.\nApplying the four factors along the lines described above can help you discover assumptions and risks in your product strategy. For example, you can use ethicality to ask yourself if addressing a need carries the risk of negatively impacting the users’ mental health; and you can use feasibility to explore if you are in position to develop a new or updated product within a realistic time frame and budget. In other words, the factors can guide the strategy validation work, which I explain in more detail in my book Strategize.\nNote\n[1] Sabine Canditt has suggested adding an additional column to the product vision board to make ethicality more prominent. If this suggestion resonates with you, then I recommend that you try it out.\n ","url":"https://www.romanpichler.com/blog/four-product-success-factors/"},{"date_scraped_timestamp":1710925626017,"host":"www.romanpichler.com","page_title":"Growth Mindset in Product Management","text":"\n \n Published on 3rd July 2018\n \n Last Updated on: 22 Sep 2022\n \n \n \n \n \n \n Learning is crucial for us product people. As our products change and eventually mature, we must change the way we manage them. As our jobs change, and we have to grow into them and acquire new skills. Additionally, product management is a comparatively young profession that is still evolving; new models and techniques emerge. This article discusses how embracing a growth mindset helps you succeed as a product professional. \n Embrace a Growth Mindset\nLearning something new requires the right mindset or attitude. If you believe that you lack talent or are not smart enough, then you make it hard—if not impossible—for yourself to acquire new knowledge, skills, and behaviours. For example, I never used to think myself as somebody who is good at writing, and I wasn’t particularly good at it at school. But with effort, resilience, and patience, as well as the guidance from others, I have managed to become a reasonably skilled writer.\nThe same is true for my product management expertise: Acquiring it has taken me many years, making plenty of mistakes, learning from other product people, and reading more books and articles than I can remember. I certainly don’t feel that I am done yet. I continue to learn new things and deepen my understanding.\nNow, you might say that’s just a sign that I lack talent. But achievement requires effort, and the better we want to become at something, the more effort is required. I remember once asking my saxophone teacher how he became so good, and he simply replied, “practicing eight hours per day”. Charlie Parker, one of the most famous and arguable best saxophonists ever, took this further and practiced up to 15 hours per day.\nI am not suggesting that innate talent doesn’t exist, but its role is often overemphasised. This leads to a fixed mindset, where people see themselves as good or bad at something—be it writing, singing, drawing, or product management—and they believe that there is not much they can do about it. But the opposite is true: A “person’s true potential is unknown (and unknowable)” and “it’s impossible to foresee what can be accomplished with years of passion, toil, and training”, as Carol Dweck—who coined the term growth mindset—writes in her aptly named book Mindset.\nInstead of labelling yourself and thinking that you are talented, smart, or clever (or possibly the opposite), see yourself as malleable and adaptable. With the right effort, you will learn new skills and deepen existing ones, you will develop and grow. By doing so, you adopt a growth mindset.\nAppreciate Failure and Make the Right Effort\nLearning a new skill can be fun and easy. But it can also be very challenging. Often, it involves stepping outside your comfort zone and making mistakes. Think of what it was like to learn to ride a bicycle, for example. I remember crashing numerous times until I was able to stay upright on the bike, riding wobbly and tentatively at first and slowly getting better over time.\nThe same holds for product management: When you create a product strategy for the first time, for instance, you are likely to make plenty of mistakes. You may not use the right research and validation techniques; your target group may be too big and heterogenous; the value proposition may not be concise and compelling; the standout features of your product may not be terribly exciting; and the business goals may be unmeasurable. But that’s OK—as long as you are able to recognise that you made a mistake and you are willing to learn from it.\nTherefore, don’t let mistakes discourage you. See failure as a necessary part of the learning journey rather than something bad that should be avoided. Be patient, don’t put yourself under pressure, don’t try to force success, and don’t beat yourself up if you don’t succeed. I can be very self-critical when I learn a new skill, for instance. I can have thoughts like “I am no good at this” and “I’ll never get it” when I make a mistake and struggle. While it’s normal to have doubts, acting on those thoughts would be giving in to a fixed mindset. Instead, practice self-compassion, reflect on your learning approach, and have faith in your ability to develop and grow. With the right effort you will get better. It might just take a little while.\nCultivate an Open Mind\nBelieving in our ability to learn and grow sounds like common sense. So why don’t we always show a growth mindset? An important reason is our attachment to what we know and who we think we are.\nIf we are aware of it or not, we tend to be fond of the knowledge and skills that we have acquired; and the more we know, the more expertise we have on a given subject, the more attached and less open to new insights and change we usually are. If you’ve successfully done strategy work for your product across different life cycle stages, for example, then you are likely to be convinced that your approach, your way of working is right. If a colleague uses new or different techniques, then it is easy to dismiss them. You know what works best for your product after all. But do you?\nTo take full advantage of a growth mindset, cultivate an open mind. To do so, hold your knowledge, views, and beliefs lightly and don’t take them too seriously. Realise that learning something new often requires letting go of existing ideas, knowledge, and behaviour. What’s more, views are relative, and there is no one right way. People have different preferences and needs, and different circumstances call for different approaches. What works well for your product may not be the best approach for another offering or a different context. Don’t let your knowledge, skills, or beliefs define who you are. Otherwise they will hold you back, and you won’t be able to fulfil your true potential.\nDeveloping an open mind provides you with an inner agility. It makes it easier to leverage mistakes and learn from difficult feedback, as you are less concerned with being right; it counteracts mental biases like the tendency to look for data that confirms your views (confirmation bias); and it facilitates collaboration: With an open mind, you will be more appreciative of other people’s ideas and perspectives.\nFoster Your Learning Capacity\nA great way to cultivate a growth mindset and open mind is to learn a new skill, for example, learning to draw or paint, sing, play an instrument, take up yoga, or another form of exercise. For example, I have benefitted a lot from (re-) learning to play the saxophone—after not having played it for more than 20 years. This has taught me not only about playing a wind instrument and music in general, but more importantly, about myself including how driven and impatient I can be. It has helped me see how valuable failure is in order to progress: It’s impossible to get better at playing an instrument without challenging yourself and making mistakes. But I have also learnt to be patient and not wanting to achieve too much too quickly. Otherwise I will frustrate myself and slow down the learning process.\nAnother way to avoid a fixed mindset is to collaborate with others. For instance, invite a colleague to one of your roadmapping workshops or sprint review meetings, or prioritise the product backlog together. This will challenge some of your views and beliefs, help you reflect on your own practice, and offer the opportunity to pick up new approaches and techniques. It is also a great opportunity to learn something about yourself. Are you, for example, critical of the other person’s work and quick to exercise judgement? Are you pleased for the individual or envious when a colleague is better at something?\nFinally, try to make regular reflection part of your work, and cultivate mindfulness. This will allow you see more clearly what you hold dearly and what you are attached to. It will help you better understand your defaults, tendencies, and preferences. This is the first step for developing your product management practice and yourself.\n ","url":"https://www.romanpichler.com/blog/growth-mindset-in-product-management/"},{"date_scraped_timestamp":1710925718017,"host":"www.romanpichler.com","page_title":"How Agile Has Changed Product Management","text":"\n \n Published on 2nd February 2021\n \n \n \n \n \n \n \n As the Manifesto for Agile Software Development celebrates its 20th anniversary, I take a look at how agile practices have influenced and changed product management. I discuss the benefits that have been achieved and the challenges that still remain. \n \nListen to this article:\nOnce Upon a Time in Waterfall Land\nBefore the advent of agile frameworks like Scrum, a product person—the product manager—would typically carry out the market research, compile a market requirements specification, create a business case, put together product roadmap, write a requirements specification, and then hand it off to a project manager. The latter would work with one or more development teams to get the specification implemented.\nDuring the development phase, the product manager would be only loosely involved, typically attending a project steering meeting and possibly issuing change requests. Otherwise, the individual would hope that the requirements were implemented as specified. Only once the product was close to being finished would the product manager return to the project and prepare the release of the product.\nThis sequential, waterfall-based approach used to work when there was little change and innovation, when product managers could correctly predict what the users needed and describe the detailed product functionality upfront. But it is less suited to create complex digital products.\nYou can also access the content of this article on my YouTube channel.\nThe Brave New Agile World\nAs agile practices have become more widely adopted, the processes used to develop products have significantly changed: Product people and development teams now tend to collaborate much more closely. Dev teams have become cross-functional consisting of UX designers, architects, programmers, testers, and other roles. Products are developed using iterative-incremental processes like Scrum. Requirements are no longer detailed and frozen before development starts but they emerge. An increasing number of organisations have moved away from organising around projects and have started to embrace a product-led approach.\nEarly user feedback, frequent solution validation: We now have the ability to collect early and frequent user and customer feedback, which helps us validate our ideas and update our plans accordingly. This has increased the chances of creating a product with the right UX and the right features.\nReduced time-to-market: We can now release new products and features more quickly. This is enabled by a closer, ongoing collaboration with cross-functional development teams, shifting from written documentation to face-to-face conversations, and using techniques such as user stories that reduce overhead—when applied correctly.\nBetter product quality and improved adaptability: The quality of our products has improved through the application of agile development practices like emergent design, test-driven development, and continuous integration. This has allowed us to adapt the product more quickly and to respond to user feedback more easily.\nBetter requirements: As product people, we are no longer solely responsible for coming up with the correct requirements. Instead, the dev team members actively participate in the product backlog refinement work and help us identify the necessary changes and capture new product backlog items. This leverages the team members’ creativity and expertise, creates a shared understanding, fosters collective ownership, improves the quality of the requirements, and ultimately results in better products.\nTransparent development progress: We can see the development progress more clearly and make corrections early if required: The progress is now based on working software rather than a detailed, Gantt chart-based project plan. This mitigates the risk of discovering late that the product cannot be shipped on time or that some features were implemented incorrectly.\nImproved alignment: Stakeholders and development teams are now better aligned through the use of regular collaborative workshops like sprint reviews. This creates a shared understanding and leads to greater commitment: Asking people about their perspectives and involving them in the process of making product decisions increases the likelihood that the individuals will support the decisions.\nMotivated productive teams: Last but not least, self-organising development teams tend to be more motivated and productive compared to traditional ones, as they are able to determine themselves how much work can be done in a given period, decide who carries out a specific piece of work, and agree on how the team members collaborate.\nOld and New Product Management Challenges\nWhile agile methods have given us plenty of benefits, a number of product management challenges still persist. These were not caused by agile practices, as far as I can tell. Agile has made them more visible, though, and it has exacerbated some of them. Let’s look at the key challenges that remain.\nLack of empowerment: When coining the Scrum terms, Ken Schwaber and Jeff Sutherland chose the term product owner instead of product manager in order to emphasise the level of authority and empowerment a product person requires—especially in an agile context where collaboration is valued, and stakeholders and dev teams regularly contribute to product decisions.\nUnfortunately, a lack of empowerment is still a common issue: Product people often don’t have the necessary authority to make strategic product decision, shape the strategy, and own the roadmap. Consequently, they are in danger of playing a tactical product role and being product backlog managers and user story writers rather than owning the product in its entirety and being able to maximise the value it creates.\nConfusion about roles and responsibilities: Even 20 years after the Manifesto for Agile Software Development was conceived, agile roles like product owner and Scrum Master are not always clearly understood, let alone effectively applied. As indicated above, product owners are sometimes mistaken for product backlog managers and stakeholder pleasers instead of the individuals who are in charge of a product and whose decisions the entire organisation must respect, as the Scrum Guide puts it.\nLack of direct interaction with users and customers: Customer collaboration is one of the four values in the agile manifesto. Nevertheless, it’s not uncommon for me to meet product people who don’t have direct access to users and customers. Instead, they solely rely on quantitative data and feedback from sales, which makes it hard to empathise with the users and customers and to fully understand their needs. This, in turn, reduces the chances of offering a product that does a great job for its target audience and generates the desired business benefits.\nProduct strategy is poorly practiced: The most beautiful user stories are useless if it’s not clear who the users are and why they would want to use the product. Acquiring this information requires focused product strategy work. Unfortunately, product strategy aren’t always effectively practiced. This is not helped by the fact that agile approaches like Scrum do not offer any tools and techniques to help product owners understand if a product should be developed. Fortunately, a number of tools and techniques have emerged in recent years that help product people with their product strategy work including my product vision board and GO product roadmap.\nLack of sustainable pace: “The sponsors, developers, and users should be able to maintain a constant pace indefinitely,” states the Manifesto for Agile Software Development. Ironically, working at a healthy, sustainable pace can be particularly challenging in an agile context: Product people have to regularly interact with development teams in order to update the product backlog, agree on sprint goals, answer questions, and provide feedback on product increments in addition to all the other product management duties. Being overworked, however, has a negative impact on our productivity and mental health. Luckily, there are a number of practical measures you can take to achieve sustainable pace. These include not covering other people jobs on a continued basis—like acting as a stand-in Scrum Master—and having the courage to decline stakeholder requests. Please see my article “Sustainable Pace in Product Management” for more guidance.\nLooking into the Crystal Ball\nSo where do we go from here? How will product management change over the next 20 years, and which role will agile methods play—if any?\nWithout having a crystal ball at my disposal, I believe that the future of product management will be shaped by our ability to address the product management challenges mentioned above. I sincerely hope that in 20 years from now, empowerment will no longer be a significant issue, product roles will be better understood and more effectively applied, and product strategy will always be practiced by anybody who manages or owns a product. I also believe that agile methods will continue to enrich product management, alongside other influences that have emerged in the last few years including Lean Startup and business modelling. \nWhile there is still plenty of work to be done, I am optimistic about the future of product management and agile.\n ","url":"https://www.romanpichler.com/blog/how-agile-has-changed-product-management/?replytocom=125677"},{"date_scraped_timestamp":1710925716771,"host":"www.romanpichler.com","page_title":"How Agile Has Changed Product Management","text":"\n \n Published on 2nd February 2021\n \n \n \n \n \n \n \n As the Manifesto for Agile Software Development celebrates its 20th anniversary, I take a look at how agile practices have influenced and changed product management. I discuss the benefits that have been achieved and the challenges that still remain. \n \nListen to this article:\nOnce Upon a Time in Waterfall Land\nBefore the advent of agile frameworks like Scrum, a product person—the product manager—would typically carry out the market research, compile a market requirements specification, create a business case, put together product roadmap, write a requirements specification, and then hand it off to a project manager. The latter would work with one or more development teams to get the specification implemented.\nDuring the development phase, the product manager would be only loosely involved, typically attending a project steering meeting and possibly issuing change requests. Otherwise, the individual would hope that the requirements were implemented as specified. Only once the product was close to being finished would the product manager return to the project and prepare the release of the product.\nThis sequential, waterfall-based approach used to work when there was little change and innovation, when product managers could correctly predict what the users needed and describe the detailed product functionality upfront. But it is less suited to create complex digital products.\nYou can also access the content of this article on my YouTube channel.\nThe Brave New Agile World\nAs agile practices have become more widely adopted, the processes used to develop products have significantly changed: Product people and development teams now tend to collaborate much more closely. Dev teams have become cross-functional consisting of UX designers, architects, programmers, testers, and other roles. Products are developed using iterative-incremental processes like Scrum. Requirements are no longer detailed and frozen before development starts but they emerge. An increasing number of organisations have moved away from organising around projects and have started to embrace a product-led approach.\nEarly user feedback, frequent solution validation: We now have the ability to collect early and frequent user and customer feedback, which helps us validate our ideas and update our plans accordingly. This has increased the chances of creating a product with the right UX and the right features.\nReduced time-to-market: We can now release new products and features more quickly. This is enabled by a closer, ongoing collaboration with cross-functional development teams, shifting from written documentation to face-to-face conversations, and using techniques such as user stories that reduce overhead—when applied correctly.\nBetter product quality and improved adaptability: The quality of our products has improved through the application of agile development practices like emergent design, test-driven development, and continuous integration. This has allowed us to adapt the product more quickly and to respond to user feedback more easily.\nBetter requirements: As product people, we are no longer solely responsible for coming up with the correct requirements. Instead, the dev team members actively participate in the product backlog refinement work and help us identify the necessary changes and capture new product backlog items. This leverages the team members’ creativity and expertise, creates a shared understanding, fosters collective ownership, improves the quality of the requirements, and ultimately results in better products.\nTransparent development progress: We can see the development progress more clearly and make corrections early if required: The progress is now based on working software rather than a detailed, Gantt chart-based project plan. This mitigates the risk of discovering late that the product cannot be shipped on time or that some features were implemented incorrectly.\nImproved alignment: Stakeholders and development teams are now better aligned through the use of regular collaborative workshops like sprint reviews. This creates a shared understanding and leads to greater commitment: Asking people about their perspectives and involving them in the process of making product decisions increases the likelihood that the individuals will support the decisions.\nMotivated productive teams: Last but not least, self-organising development teams tend to be more motivated and productive compared to traditional ones, as they are able to determine themselves how much work can be done in a given period, decide who carries out a specific piece of work, and agree on how the team members collaborate.\nOld and New Product Management Challenges\nWhile agile methods have given us plenty of benefits, a number of product management challenges still persist. These were not caused by agile practices, as far as I can tell. Agile has made them more visible, though, and it has exacerbated some of them. Let’s look at the key challenges that remain.\nLack of empowerment: When coining the Scrum terms, Ken Schwaber and Jeff Sutherland chose the term product owner instead of product manager in order to emphasise the level of authority and empowerment a product person requires—especially in an agile context where collaboration is valued, and stakeholders and dev teams regularly contribute to product decisions.\nUnfortunately, a lack of empowerment is still a common issue: Product people often don’t have the necessary authority to make strategic product decision, shape the strategy, and own the roadmap. Consequently, they are in danger of playing a tactical product role and being product backlog managers and user story writers rather than owning the product in its entirety and being able to maximise the value it creates.\nConfusion about roles and responsibilities: Even 20 years after the Manifesto for Agile Software Development was conceived, agile roles like product owner and Scrum Master are not always clearly understood, let alone effectively applied. As indicated above, product owners are sometimes mistaken for product backlog managers and stakeholder pleasers instead of the individuals who are in charge of a product and whose decisions the entire organisation must respect, as the Scrum Guide puts it.\nLack of direct interaction with users and customers: Customer collaboration is one of the four values in the agile manifesto. Nevertheless, it’s not uncommon for me to meet product people who don’t have direct access to users and customers. Instead, they solely rely on quantitative data and feedback from sales, which makes it hard to empathise with the users and customers and to fully understand their needs. This, in turn, reduces the chances of offering a product that does a great job for its target audience and generates the desired business benefits.\nProduct strategy is poorly practiced: The most beautiful user stories are useless if it’s not clear who the users are and why they would want to use the product. Acquiring this information requires focused product strategy work. Unfortunately, product strategy aren’t always effectively practiced. This is not helped by the fact that agile approaches like Scrum do not offer any tools and techniques to help product owners understand if a product should be developed. Fortunately, a number of tools and techniques have emerged in recent years that help product people with their product strategy work including my product vision board and GO product roadmap.\nLack of sustainable pace: “The sponsors, developers, and users should be able to maintain a constant pace indefinitely,” states the Manifesto for Agile Software Development. Ironically, working at a healthy, sustainable pace can be particularly challenging in an agile context: Product people have to regularly interact with development teams in order to update the product backlog, agree on sprint goals, answer questions, and provide feedback on product increments in addition to all the other product management duties. Being overworked, however, has a negative impact on our productivity and mental health. Luckily, there are a number of practical measures you can take to achieve sustainable pace. These include not covering other people jobs on a continued basis—like acting as a stand-in Scrum Master—and having the courage to decline stakeholder requests. Please see my article “Sustainable Pace in Product Management” for more guidance.\nLooking into the Crystal Ball\nSo where do we go from here? How will product management change over the next 20 years, and which role will agile methods play—if any?\nWithout having a crystal ball at my disposal, I believe that the future of product management will be shaped by our ability to address the product management challenges mentioned above. I sincerely hope that in 20 years from now, empowerment will no longer be a significant issue, product roles will be better understood and more effectively applied, and product strategy will always be practiced by anybody who manages or owns a product. I also believe that agile methods will continue to enrich product management, alongside other influences that have emerged in the last few years including Lean Startup and business modelling. \nWhile there is still plenty of work to be done, I am optimistic about the future of product management and agile.\n ","url":"https://www.romanpichler.com/blog/how-agile-has-changed-product-management/?replytocom=125721"},{"date_scraped_timestamp":1710925477604,"host":"www.romanpichler.com","page_title":"How to Choose the Right KPIs for Your Product","text":"\n \n Published on 13th April 2021\n \n Last Updated on: 19 Jun 2023\n \n \n \n \n \n \n A key challenge of working with KPIs is to select the right indicators: There are so many different metrics to choose from including daily active users, net promoter score, and profit, to name just a few. What’s more, senior managers and stakeholders can have strong views on which indicators should be used. This article helps you select the metrics that really matter and are truly helpful for your product. \n \nListen to this article:\nWhat are KPIs?\nKey performance indicators (KPIs) are metrics that measure how your product is doing. Effective KPIs help you understand if your product is creating the desired value for the users, the customers, and the business. Without KPIs, you end up guessing how well your product is performing. It’s like driving a car with your vision blurred: You can’t see if you are heading in the right direction or getting closer to your destination. You might have a hunch, but you don’t know if it is correct. Using KPIs and collecting the relevant data helps you balance intuition with empirical evidence. This increases the chances of making the right decisions and achieving product success.\nA Goal-directed Approach to Choosing KPIs\nTo select the right KPIs, I recommend taking the following three steps: First, use the user and business goals in the product strategy to select an initial set of indicators. Then take into account the product goals on the product roadmap to discover additional KPIs. Finally, choose further indicators to assess the health of your product and team. This, of course, assumes that you have a validated product strategy and a realistic product roadmap in place. If that’s not the case, then I recommend creating those two plans first.\nAs you may have noticed, I suggest using a goal-directed approach to identify the right indicators. I am not a big fan of “standard” KPIs, for example, customer acquisition cost (CAC), churn, and number of active users for SaaS products. While it’s helpful to be aware of the indicators that may be commonly used for the type of product you manage, it would be a mistake to blindly adopt them. Employing user, business, and product goals to guide the selection of KPIs avoids this mistake and it ensures that your indicators are relevant and helpful, as the following image shows. You can download the infographic by clicking on the picture.\nStep 1: Take Advantage of the Product’s User and Business Goals\nTo select the right KPIs, start with the needs and the business goals in the product strategy. Then consider how you can tell if they have been met. \nSay I want to offer a product that reduces the blood sugar levels of individuals who have type-2 diabetes and that generates £50k of revenue within the first 12 months of launching the app. I would then ask myself how I can measure that the product creates the desired user and business value. To determine the former, I might choose user feedback, customer satisfaction, and referral rate as the key performance indicators. To understand the latter, I might select monthly recurring revenue (MRR).\nNote that this approach assumes that valid user and business goals are available. In other words, the goals should be part of a validated product strategy—a strategy whose key assumptions and risks have been successfully addressed. This might have involved observing target users, interviewing them, carrying out competitor research, and using throw-away prototypes, to name just a few strategy validation techniques.\nStep 2: Use Product Goals to Discover Additional KPIs\nIn addition to deriving KPIs from the user and business goals, I like to use the product goals I have captured on the product roadmap in order to discover additional indicators. A product goal is a specific and measurable benefit or outcome your product should achieve, typically in the next two to three months. What’s more, every product goal should be aligned with the user and business goals in the product strategy, as I explain in more detail in my article “Product Goals in Scrum.”\nSay the goal of my initial product (MVP) is to allow the users to better understand their eating habits and acquire an initial user base. I would then look at the first part of this goal and ask myself if I need to introduce a new indicator. As I’ve already chosen user feedback, customer satisfaction score, and referral rate, I would not add another metric at this stage. But the second part, acquire an initial user base, would require the introduction of a new KPI in order to understand if the acquisition goal has been met. To do so, I might measure market share, for instance, by tracking the product’s position in the appropriate app store.\nStep 3: Add Health Indicators\nMeasuring how well your product is doing at meeting its user, business, and product goals is great. But it is not enough. Let’s say that my new product is meeting its revenue targets, that the user feedback is excellent, and that customer satisfaction and referral rates are high. This suggests that it is performing well, and there seems to be no reason to worry. \nBut if the team motivation is declining—as people are being overworked or stressed—or if the code quality is deteriorating—as bugs are accumulating and the code complexity is increasing, alarm bells should go off. These indicators suggest that achieving product success will be much harder in the future, due to an increase in technical debt, higher absenteeism or turnover rate. \nIt is therefore helpful to add metrics that measure how healthy your product and team are and that allow you to spot important warning signs early on so you can be proactive and respond to them in a timely manner—instead of reacting to them with the back against the wall. These indicators include product quality, schedule variances, which is the ability to meet product goals on time and budget, team motivation, team knowledge and skills, and stakeholder engagement.\nLess is More\nHaving been involved in product management for 20 years, I sometimes marvel at how much our profession has changed for the better. This includes the analytics tools we have available today. These powerful tools usually generate more data for us than we can handle. And herein lies the issue: There is no point in measuring everything that can be measured.\nUsing more KPIs than necessary and analysing data that provides no value is a waste of time. In the worst case, you act on irrelevant data and make wrong decisions. Think of driving a car. A small number of indicators are helpful for safely getting to your destination, including how fast you are travelling and how much battery/fuel is left. If the car dashboard continuously showed a range of other data, such as tyre pressure or ABS status, it would be harder to take in the relevant information and make the right decisions while driving. \nTherefore, limit the number of KPIs you use. Carefully select them by using the factors discussed above, and regularly review and adjust them. Don’t make the mistake of allowing powerful stakeholders to dictate KPIs to you. Instead, explain to them how effective product KPIs are derived, and consider inviting them to the next product strategy workshop in order to collaboratively determine the right KPIs.\n ","url":"https://www.romanpichler.com/blog/how-to-choose-the-right-kpis-for-your-product/?replytocom=115794"},{"date_scraped_timestamp":1710925589061,"host":"www.romanpichler.com","page_title":"How to Choose the Right Product Validation Technique in Scrum","text":"\n \n Published on 23rd April 2014\n \n \n \n \n \n \n \n Scrum employs the product demo as its default technique to understand if the right product with the right features is developed. While a product demo can be very effective, it can also be limiting. Like any research and validation technique, demoes have their strengths and weaknesses. This article provides an overview of alternative validation methods so you can choose the one that is best suited for your product. \n Feedback and Data in Scrum\nCollecting feedback and data is a vital aspect of Scrum. It enables you to learn if the right product with the right features is created. Scrum employs a three-step process to achieve this: A product increment is created, which is then exposed to the users, the customers, and the other stakeholders. This generates feedback and data, which triggers product backlog changes, as the following picture shows.\nTo leverage this process, the techniques used to gather the data and validate the product are crucial. If you use the wrong method, you are likely to collect wrong or insufficient data and draw the wrong conclusions. While there is a range of techniques available, Scrum recognises only one: the product demo, which is performed in the sprint review meeting.\nBut this does not mean that you should or cannot employ another technique! The opposite is true: The sprint demo may or may nor be right for product. Additionally, using a single data collection method over an extended period of time is usually a mistake. Every technique has its strengths and limitations, and none is always appropriate. You should hence choose the one that is most helpful for your product and combine complementing techniques.\nFive Helpful Techniques\nTo help you choose the right method, I have compiled five techniques in the table below. I discuss each technique in the following sections.\nTechnique\nDescription\nStrength\nWeakness\nProduct demo\nDemo the latest product increment. Listen to the feedback, and ask open questions.\nTest limited functionality: Helps people imagine what using the product would be like. Feedback is available immediately.\nFeedback is based on what users hear and see; danger of influencing users.\nUsability test\nUnderstand how users perform a task in a controlled environment such as a lab.\nUnderstand if users employ the product as anticipated. Possibly collect data using analytics software. Data is available immediately.\nArtificial environment: users do not use the product “in the wild”; observer effect.\nRelease\nRelease the software to a group of target users and collect data using analytics.\nFind out how the product is used in its target environment. Reach a larger test group. Run A/B tests.\nDoes not explain why users employ the product in a certain way. Can take time to collect enough data.\nDirect Observation\nObserve users employing the product preferably in its target environment.\nUnderstand how users interact with the product.\nCan be time consuming; danger of observer effect and bias.\nSpike \nCreate an executable prototype to address an architecture or technology risk.\nUnderstand if an architecture or technology choice is feasible.\nCan lead to an over-engineered solution.\nProduct Demo\nAs its name suggests, the product demo presents the latest product increment to the appropriate users, customers, and internal stakeholders. The presenter explains how the users would employ the product to get a job done. Product demos are particularly valuable in the early sprints, as they allow you to get immediate feedback on limited functionality and very small increments: By wrapping the increment in a story, people can imagine what it would be like to use the product.\nThis strength is also a major weakness: The feedback is based on what people see and hear, not on their actual experience of using the product. What’s more, the presenter can influence the users inappropriately by talking up the product or asking closed questions, and powerful individuals like a senior manager can influence the views of the group. My post “Tips for an Effective Product Demo” shares more tips and tricks on employing product demoes effectively.\nUsability Test\nA usability test allows you to understand how users interact with your product. Usability testing takes typically place in a controlled environment such as a meeting room or lab. Target users are asked to perform a task using the latest product increment, which may be a paper prototype or executable software. You then observe and record how people employ the product, and you can end the test with asking the participants about their experiences and impressions. It is often possible to conduct the test in the sprint review meeting.\nWhile a usability test quickly generate real user data, the artificial environment and the observation can cause the users to act differently compared to working with the product in “the wild”, that is, in the environment in which the product will be used, for instance, at home, at work, in the car, on the train. This is where the next technique comes in.\nRelease\nReleasing software means giving a group of target users access to an early version of the product and asking them to use it in its target environment. The usage data is then recorded by an analytics tool, for instance, Google Analytics. The product is now employed in its target environment, and a larger test group can be employed, which reduces the risk of collecting data that is not representative for the market segment targeted. With the right analytics software, you can also collect data such as who interacts with which product feature when and how often, and which variant of a feature people prefer (A/B test).\nOn the downside, the technique cannot explain why people use a certain feature, or why they don’t. Additionally, there is a delay: It takes people time to download, install, and start using the latest increment before enough data is available to draw the right conclusions. In a Scrum context, this means that you either have to postpone the next sprint or continue with a different feature to mitigate the risk of moving in the wrong direction.\nIf you primarily use releases then your sprint review meeting changes: It is now used to synch the internal stakeholders and review the project progress rather than to validate the product.\nDirect Observation\nDirect observation means watching users carefully as they use the product to perform a task in its target environment. This helps you understand how people interact with the product and use its features. It also allows you to debrief with the user and to learn about the user’s experience whilst interacting with the product.\nThe main drawback of observations that they can be time consuming particularly if you want to observe more than a few users. Users may also act differently with somebody watching them (observer effect), and your own biases may interfere with you ability to see clearly.\nSpike\nSpikes are prototypes to test an architectural or technology-related assumption, for instance, that Enterprise JavaBeans will be able to deliver the desired performance. They are usually cheap to create, generate the relevant knowledge quickly, and allow you to see if you can meet critical nonfunctional requirements.\nSpikes become problematic if you employ them too much, if you worry more about how to build the product than why and what to build. If this happens the result is in an over-engineered product and a solution-centric mindset rather than a user-centric one. I once met a team that had been building spikes for nearly two years without having to show any shippable code. Telling them to stop it and think about the users was quite shocking for them.\nChoosing the Right Technique\nAll the techniques discussed have their strengths and weaknesses. While you should always choose the technique that helps you meet your sprint goal and validate the increment effectively, I find it a helpful rule of thumb to use product demos, usability tests and spikes in the early sprints, and releases and observation in the later sprints, as the following picture illustrates.\nThe diagram above tries to balance the strengths and weaknesses of the different techniques, and it corresponds to a risk-driven approach where the key risks and critical assumptions are tackled in the early sprints. (For more info assumptions, risks and learning in Scrum see my post “Get Your Focus Right: Learning and Execution in Scrum“.)\nWhichever techniques you choose, don’t make the mistake to rely on a single technique for an extended period of time. Every technique has its benefits and drawbacks, and no single technique is perfect. Combine qualitative and quantitative techniques, for instance, releases and observation, to leverage their respective strength and mitigate their weaknesses. Don’t be shy to experiment with different techniques to find out what works best for your product, and use the sprint retrospective to review their effectiveness.\n ","url":"https://www.romanpichler.com/blog/beyond-product-demo-validation-techniques-in-scrum/"},{"date_scraped_timestamp":1710925699086,"host":"www.romanpichler.com","page_title":"Is Scrum Right for Your Product?","text":"\n \n Published on 19th September 2016\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n Scrum offers a powerful way to develop products. In fact, it is often seen as the standard way to create digital products, and I have met more than one company where the product managers were suddenly told to be agile and do Scrum. But like every process, Scrum has its benefits and limitations. Is it the right approach to develop and grow your product? Or would you be better off using an alternative? \n When is Scrum Most Helpful?\nA process like Scrum is a great fit for your product when it is brand-new or young, and when you extend its life cycle, as shown in the picture below. This means that not every product will benefit from Scrum: Products that are maturing or declining won’t benefit from Scrum—at least not to the same degree.\nThe picture above shows the traditional, bell-shaped product life cycle curve with three key events: launch—the product first becomes available; achieving product-market fit (PMF)—your product is ready to serve the mainstream market; and end of life—you decide to discontinue the product. Note that your product’s actual trajectory may differ significantly from the one above: it may be much steeper or flatter. To to leverage the product life cycle model, you have to define the business benefits your product delivers and then track them over time. For revenue-generating products, revenue is commonly used, for example. But if your product exists to sell another product or service, then the number of active users might be the appropriate metric.\nThe younger your product is, the more it is likely to benefit from Scrum. Why? When working on a brand-new product, trying to achieve PMF, or struggling to keep the product growing, you typically face many unknowns and a substantial amount of uncertainty and change. You may not fully understand the value it should create for its users and customers, the features and user experience (UX) it should provide, the business goals it should serve and the business model it should use, and the technologies that should be used to develop it.\nScrum is a great fit at this stage: Your product will benefit from an iterative, cyclic process that allows you to quickly test an assumption, address a risk, generate new insights, and come up with new ideas. This accelerates learning and mitigates the risk of developing the wrong features, providing the wrong UX, and applying the wrong technologies, as I describe in more detail in my post The Scrum Cycle.\nBut as your product grows and eventually matures, the amount of uncertainty and change gradually declines. After achieving PMF, you usually understand how to meet the user needs, and know how to develop, market, and sell the product to the mainstream market. Your focus tends to switch to penetrating the market and fending off competitors by keeping your product attractive and refining it. This typically results in smaller, often incremental product changes. A good example is the latest iPhone 7, where Apple largely optimised existing features like camera and battery life. Scrum consequently becomes less helpful at these life cycle stages: The development team members are often no longer required to work together towards a shared goal to test an assumption or to deliver a piece of functionally.\nIf, however, you decide to revitalise a maturing product and extend its life cycle, for instance, by taking it to a new market or unbundling a bigger feature, you usually face a significant amount of uncertainty and change. In the picture above, the life cycle extension is shown by the arrow that reverses the ageing process of the product and takes it back into the growth stage. In this case, Scrum becomes helpful again!\nIf you are in doubt if you should use Scrum or not, consider how much uncertainty is present in your product. Do you understand how to address the market needs and solve the users’ problem? Do you know how to develop, market, and sell the product? And more specifically, can the users confidently tell you which functionality they require and which aspects of the product need to be improved? Do you mainly provide incremental enhancements or bug fixes? Are the architecture and technologies fit for purpose and stable? Are you regularly struggling to agree on a shared, meaningful sprint goal? If the answer to these questions is yes, then Scrum is probably not the best framework for your product. To gain more clarity, use the next sprint retrospective to investigate if your process is still helpful, or if you should switch to an alternative.\nWhat’s the Alternative?\nOnce your product no longer exhibits a significant amount of uncertainty and risk, is growing steadily, or has started to mature, a Kanban-based process may be the right choice, as the following picture illustrates.\nUnlike Scrum, Kanban does not regard protected, goal-driven iterations as mandatory. You can use it to implement an agile process with the flexibility to work on different items and release them individually at different times. This is particularly handy for incremental enhancements and bug fixes and to quickly test smaller ideas.\nI therefore suggest that process follows product: You should choose the process that is best suited to provide a successful product—a product that does a great job at creating value for the users and for the business. There is no one right way, no silver bullet. Neither Scrum nor any other framework is always the best fit. As a consequence, you may well have to adjust and change your process across over time. Use the retrospectives to regularly enquire if your current process is fit for purpose and adapt and change it as appropriate.\nMix and Match\nThe picture above seems to suggest that you face a stark choice—either Scrum or Kanban. But that’s just a simplification to help you choose your primary process. You can, of course, combine Scrum and Kanban. You may decide, for example, to apply Scrum to develop new features and Kanban to fix bugs, as I describe in my post Succeeding with Innovation and Maintenance. Finally, you can also use Kanban for product strategy validation activities, as I recommend in my book Strategize.\n ","url":"https://www.romanpichler.com/blog/is-scrum-right-for-your-product/"},{"date_scraped_timestamp":1710925540653,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3153"},{"date_scraped_timestamp":1710925517812,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3154"},{"date_scraped_timestamp":1710925525292,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3150"},{"date_scraped_timestamp":1710925506920,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=140766"},{"date_scraped_timestamp":1710925533069,"host":"www.romanpichler.com","page_title":"Leading Through Shared Goals","text":"\n \n Published on 6th February 2018\n \n Last Updated on: 19 Oct 2023\n \n \n \n \n \n \n Ensuring that development teams and stakeholders are moving in the same direction is crucial to achieving product success. But aligning people can sometimes feel like herding cats. In the worst case, they go off in different directions and create work results that don't fit together. In this article, I describe my framework for setting effective goals to help you guide and align the stakeholders and the development teams. \n Overview of the Goal-setting Framework\nThe framework I have developed uses four different types of goals: product vision, user and business goals, product goal, and sprint goal, as the following image shows. You can download the framework below by clicking on the picture below.\nThe goals in the framework above describe the outcomes you want to achieve. What’s more, they are systematically linked—they inform each other. Let’s take a look at them in more detail.\nThe Product Vision\nThe first and possibly most powerful goal is the product vision. It describes the ultimate reason for creating a product and the positive change it should bring about. A sample vision I like to use is “healthy eating.” This example shows that the vision is best captured as a brief statement or slogan.\nWhat’s more, an effective vision inspires people; it provides motivation and purpose. As the vision is a big, hairy, audacious goal, it cannot be measured. In fact, you might never fully realise your vision. That’s okay, as long as it acts as the product’s true north that provides continued guidance. To learn more, watch the following video:\nThe User and Business Goals\nA user goal describes a problem users want to see addressed or a benefit people want to gain, for instance, “reducing the risk of developing type 2 diabetes.” A business goal states the benefits the company developing and providing the product wants to achieve. This might be diversifying the business, opening up a new revenue stream, or developing the main brand.\nWhatever user and business goals you choose, make sure that they are clear. It would be a mistake, for example, to state “improve people’s eating habits.” This user goal is too vague. Working with specific user and business goals offers better alignment and allows you to select the right key performance indicators. These help you understand if the product is creating the desired value and if you are making progress towards the goals.\nProduct Goals\nWith user and business goals in place, you can take the next step and determine specific product goals. Each goal should be a step towards meeting the user and business goals, and it should describe a specific and measurable benefit or outcome, for example, acquiring users, increasing engagement, generating revenue, or removing technical debt to future-proof the product. I find that product goals are especially valuable to align stakeholders and communicate the impact you want to achieve with your product in the coming months.\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nSprint Goals\nThe last goal in my framework is the sprint goal. Achieving this goal should move you closer towards meeting the overarching product goal. Each sprint goal is therefore a step towards a product goal.\nWhen setting a sprint goal, make sure that it states the desired outcome of a sprint, for example, “find out if users are willing to share personal information,” “test integration with leading smart scales,” or “finish the dashboard to release a first version and learn from the feedback.”\nI recommend that you derive the sprint goal from the product goal and that you state it on the sprint backlog or task board. This ensures that each sprint moves you closer towards the overarching product goal. (If your development team does not use Scrum, then it might still be helpful to agree on weekly or fortnightly goals that direct the work of the team members.)\nThe Connections between the Goals\nAs you may have noticed, the goals in my framework are connected. The vision guides the selection of the user and business goals, which help you choose the right product goals; and a product goal is broken over time into several sprint goals. This way, the vision ultimately guides product delivery.\nAs you move from the product vision to the sprint goal, the objectives become more and more focused and describe increasingly shorter time frames. A vision might cover the next five to ten years. A sprint goal, however, lasts only two to four weeks.\nHowever, the connections in my framework are not only top-down. They are bidirectional and also work bottom-up. If one or more sprint goals cannot be met, the product goal might have to be adjusted. If you struggle to achieve the product goals you have set, you may have to change the user and business goals. Consequently, you’ll have to keep your goals in sync. To achieve this, you should regularly review them. Inspect and adapt user, business, and product goals at least once per quarter.\nThe DecisionsGoals and Product Management Artefacts\nI need to point out that the goals in my framework don’t exist on their own. Instead, they are related to product management artefacts. I like to capture the vision together with the product strategy, and the strategy should contain the user and business goals.\nA handy tool to capture the vision, user, and business goals is my Product Vision Board, which you can download from my website and by clicking on the images below for free. State the user goals in the “Needs” section and the business goals in the “Business Goals” one.\nThe product goals are best captured on an outcome-based, goal-oriented roadmap like my GO Product Roadmap. Simply use the “Goal” row to state the product goals.The sprint goal, finally, can be captured on the sprint backlog or task board. This way it is visible and directs the work of the development team members. To create effective, outcome-based sprint goals, use my sprint goal template.\nWhat about OKRs?\nYou might be wondering if and how my framework is connected to OKRs—to objectives and key results. OKRs are a goal-setting method, which was originally developed at Intel in the 1970ies and has become increasingly popular in recent years. My framework states the type of goals you should have in place to achieve product success—but it does not prescribe how you formulate them. You can therefore use OKRs to express the goals in my framework.\nHaving said this, I am not a big fan of using OKRs in product management, though. I prefer to work with visual tools like my Product Vision Board and GO Product Roadmap, as I explain in more detail in the article OKRs in Product Management.\nBut no matter which method you choose, the important thing is that you set the right goals—that’s what’s going to help you most in offering a great product and achieving product success.\nGetting to Shared Goals\nIt’s great to know what goals are helpful to direct and align the development team and stakeholders. But it’s not enough. The individuals involved in developing and providing the product must support the goals to move together in the same direction. Otherwise, people are likely to follow their own goals; orchestrating everyone’s efforts will become very difficult, if not impossible.\nThe best way to achieve strong-buy in is to actively involve the right people in the goal-setting process. I like to bring together the development team members and key stakeholders and run collaborative workshops with them: a strategizing workshop to come up with a meaningful, inspiring vision everybody believes in and a product strategy that contains the right user and business goals; a roadmapping workshop that identifies realistic product goals using the product strategy as an input; joint product strategy and roadmap review meetings to update or change to the strategy and roadmap; and sprint planning meetings that establish meaningful and realistic sprint goals. (Note that stakeholders don’t participate in sprint planning meetings in Scrum. Instead, they are invited to offer feedback on the latest product increment in the sprint review meetings.)\nBringing together the right people allows you not only to generate strong buy-in; it also leverages their collective knowledge and creativity, and establish meaningful goals—goals that are worthwhile to pursue. But a collaborative approach also carries the risk of friction and conflict. In the worst case, powerful individuals (HIPPOs) might hijack the process and dictate goals.\nTo mitigate these risks, I recommend that you involve an experienced coach like a Scrum Master, who sets the ground rules, facilitates the workshops, and ensures that everybody is heard, and nobody dominates. Additionally, make sure that you apply the right decision rule. For example, you might want to use unanimous agreement to set the vision and consent to choose the right product goals. Watch the video below for more guidance.\nBe careful, though, that you don’t make the mistake of trying to please people and brokering a weak compromise. Don’t be afraid to say no when appropriate. At the same time, value people’s ideas and appreciate their concerns even if you don’t agree with them. When you care about the individuals and understand their perspectives and needs, they are more likely to support the goals even if they don’t fully agree with it.\n ","url":"https://www.romanpichler.com/blog/leading-through-shared-goals/?replytocom=3149"},{"date_scraped_timestamp":1710925537083,"host":"www.romanpichler.com","page_title":"Leading without Being the Boss: Tips for Product People","text":"\n \n Published on 6th December 2022\n \n Last Updated on: 5 May 2023\n \n \n \n \n \n \n As the person in charge of the product, you have a rewarding but challenging job. A key challenge is leading the stakeholders and development teams without being their boss, without being able to tell people what to do. In this article, I offer my advice on how to overcome this challenge, guide the individuals, and create value together. \n \nListen to the audio version of this article:\nThe Need for Guidance and the Lack of Transactional Power\nProduct success is not something you can achieve on your own as a product manager or Scrum product owner. Instead, you rely on the contributions and the support of the key stakeholders, the development team members, and possibly other product people who help you manage a large product. For example, a marketer has to create the marketing strategy, and the development teams have to design and build the product.\nWhat’s more, all deliverables must fit together to achieve the desired outcome. For instance, the marketing strategy, the user experience (UX) design and technology choices have to align to successfully acquire new users, increase conversion, or meet another product goal. Consequently, the stakeholders, development teams, and product people require guidance and alignment—they must all move together in the same direction and work on the same overarching goals, as the picture below illustrates.\nOn top of everything, you are usually not the boss, and the individuals in the picture above don’t report to you. You therefore lack transactional power: You cannot tell people what to do and make them follow your decisions, and you typically cannot offer a bonus, pay raise, or other incentive. To make things worse, some of the stakeholders might be more senior than you. How can you then effectively guide and align them?\nInfluence and Trust as Leadership Building Blocks\nEffectively leading others requires that they trust you. To trust someone means to have faith in the person, believe that their intentions are good, feel safe in their presence, and be comfortable to speak one’s mind.\nOnce you have earned someone’s trust, the person will be open to your suggestions and advice. This, in turn, enables you to influence the individual and help them achieve the desired product outcome.\nIf the opposite is true, and someone doesn’t trust you, then they are unlikely to follow your lead. They will be inclined to do what they believe is right. This may result in people moving into different directions and producing deliverables that don’t create the desired value. Gaining the trust of the stakeholders, dev teams, and other product people is therefore vital so you can effectively align and guide them and achieve the desired outcomes.\nIt’s important for me to point out that effective leadership must be based on the intention to support the people you want to lead, not on the desire to control or manipulate anyone. The influence you exercise should therefore be a positive one, see my article Should Product People be Servant-Leaders?\nWhat’s more, there is not one right way to lead. For example, groups that haven’t worked together require a different leadership approach compared to those that have developed into a closely knit unit, as I discuss in more detail in the article How to Choose the Right Product Management Leadership Style.\nMeasures to Build Trust with Stakeholders, Dev Teams, and Other Product People\nAs trust is crucial to lead without being the boss, it’s important that you take the right steps to earn the trust of the stakeholders, the development team members, and other product people. The following nine measures will help you with this.\nEmpathise\nTake a kind and warm-hearted interest in the people you want to lead, their views, feelings, and needs, as well as the goals they want to achieve. This allows you to better understand them, and it shows the individuals that you care about them, which encourages them to trust you. Attentively listening to people with an open mind and getting to know them will help you empathise, as I discuss below. You can find more guidance on empathy in my article Empathy in Product Management.\nGet to know people\nLearn about the individuals’ job role with its specific demands and challenges, their backgrounds, family situations, and interests to better understand why somebody thinks and acts in certain ways. This, in turn, increases your ability to empathise and to earn the trust of the person. There are many ways how you can get to know people and build effective relationships. These include having informal chats over a cup of coffee or at lunch as well as organising team building activities.\nPractise active listening\nGive people your full attention and listen with the intention to understand when you are in a conversation with the stakeholders, development team members, and your product management colleagues. This makes people feel valued, and it encourages them to be open and trustful with you. You can find more guidance on active listening in my article Listening Practices for Product People.\nCultivate an open mind\nBe respectfully curious and open-minded. Don’t prematurely judge an idea or reject an individual’s concern. Be grateful for someone’s contribution, even if you disagree. This shows people that you value their ideas and that you are interested in their views and needs. Additionally, it makes it more likely that you’ll receive everything that is being said instead of suffering from confirmation bias and ignoring information that does support your views and ideas.\nSpeak and act with integrity\nBe truthful and do what you say. Honour your commitments and don’t make promises you cannot keep. Admit if you are wrong. This tells people that you are honest, reliable, and trustworthy.\nInvolve people in product decisions\nYou might do this, for example, by running collaborative product strategy reviews. Be transparent, share the relevant information, and appreciate the individuals’ suggestions—without making the mistake of saying yes to every idea. Practising collaborative decision-making shows that you value people’s input and care about their views and needs. Additionally, it increases their commitment to implement the decisions, as I discuss in more detail in the article Making Effective Product Decisions.\nBe supportive and offer help\nWhenever that’s possible and appropriate. For example, make time during the sprint to answer urgent questions from the development team members. Ensure, though, that you help people become self-sufficient as quickly as possible, address any underlying issues, and don’t take on additional roles. \nIt would be a mistake, for instance, to keep answering questions during the sprint instead of involving the team members in the product backlog refinement work and helping them acquire the appropriate knowledge. Similarly, it would be wrong to fill a vacant Scrum Master role and carry out the role’s tasks like organising sprint meetings and coaching the development teams.\nDeepen your expertise\nThe better you are at product management and the more you know about the market and users of your product, the greater the chances are that people will agree with your suggestions, trust your advice, and follow your lead. Becoming a t-shaped product professional and using a learning roadmap to develop your skills will help you with this.\nSecure the right management backing\nWhen management supports and trusts you, others are more likely to do the same. Conversely, it’ll be harder to lead the stakeholders and development team members when you lack management sponsorship. If that’s the case for you, explore how you can earn management’s trust. The measures discussed above should help you with this.\nAdditionally, consider asking your Scrum Master to help you address the issue, especially if product management is new to the organisation or if its maturity is low. Remove impediments and facilitating organisational change should be part of the Scrum Master’s job, as I discuss in more detail in the article Why Product Owners Need Effective Scrum Masters.\n ","url":"https://www.romanpichler.com/blog/leading-without-being-the-boss-tips-for-product-people/"},{"date_scraped_timestamp":1710925482126,"host":"www.romanpichler.com","page_title":"Leveraging New Technologies: 3 Tips for Product People","text":"\n \n Published on 3rd May 2023\n \n Last Updated on: 10 Oct 2023\n \n \n \n \n \n \n Change seems to be the only constant when it comes to software technology. Over the last ten years, microservices, cloud-based computing, augmented reality, blockchain, the Internet of Things, machine learning, and artificial intelligence have emerged—to name just a few new technologies. But as product people, we are often so busy with getting new and enhanced features delivered that we risk overlooking new tech trends and being overtaken by competitors. In this article, I share three tips that help you spot new and potentially disruptive technologies early on so you can take full advantage of those that will benefit your product. \n \nListen to the audio version of this article:\nMake Time to Keep up with Technology Trends\nAs new technologies come and go, it’s important for you—the person in charge of the product—to stay on top of the developments. You should be aware of new trends, be able to make an informed guess if they are likely to impact your market and product, and decide if a technology needs to be further investigated. This usually doesn’t require in-depth technical skills like being able to write code or understand how a specific machine learning framework is used. But you should take an interest in software technology, and you should have a basic understanding of how your product is currently built.\nTo make this more concrete, let me give you a specific recommendation: Spend 30 minutes per week on discovering new software trends and learning more about those that might affect your product. You can do this, for example, by reading technology newsletters, listening to tech podcasts, and talking to development team members, especially those who have a sound understanding of software architecture and technology.\nEncourage Regular Technology Research and Experimentation\nIt’s not uncommon for me to see development teams who work flat out to enhance features and offer new ones. But if that’s all they do, if there is no time to explore new technologies, then you take a big risk: The development team members may not have the skills to take advantage of an emerging technology.\nSay that a competitor product just started offering personalised recommendations, and you’d like to be able to do the same. You talk to the development team, and the team members suggest that machine learning is likely to be the right solution. But if nobody has had time to learn about the technology in general and research specific machine learning frameworks, you’re probably months away from offering a similar feature. Instead of giving your product the edge, you’ve been leapfrogged by a competitor—a situation you most certainly want to avoid.\nIt is therefore important that you give the development team members the necessary time to discover and explore new technologies, build prototypes, and understand if and how a technology is likely to benefit your product or possibly threaten it. As a rule of thumb, development teams should be able to spend at least one day per month on technology research and experimentation. The following four measures will help you with this.\nGold cards: Development teams set aside time in a sprint for technology research and prototyping by adding dedicated, so called “golden” cards to the sprint backlog.\nResearch sprints: You focus an entire sprint on technology exploration. You might vary the sprint length and possibly use a shorter, say, one-week iteration. This can be helpful to tackle a more complex challenge like researching and testing different machine learning frameworks.\nHackathons, also referred to as hack days: People come together for one or more days to collaboratively explore new ideas and create prototypes. Facebook’s Like button was conceived in this way, for example.\n20 percent rule: Developers can take up to one day a week to experiment with new ideas and acquire new skills. The Google Chrome browser and Gmail were created this way, for instance.\nUse the approach that works best for your team and organisation. Be supportive and don’t expect that every experiment will be a success. Instead, be prepared to experience plenty of failures where the team learns that a technology is not useful for your product, at least not in the near future. See the exploration work as a way to future-proof your product and mitigate the risk of missing out on an opportunity. This will not only benefit your product. It will also have a positive impact on team morale and productivity.\nAdapt the Product Strategy to Respond to New Technologies\nFinally, you should systematically assess the impact of a new technology on the product strategy and determine if it has to be changed. A new technology might help you capture more market share, for example, and it might extend the life cycle of your product. Think about how smartphones have evolved over the years to stay desirable, for instance, by introducing AI-enabled virtual assistants and face recognition.\nI recommend that you assess the strategic impact of a technology in the form of regular, collaborative product strategy reviews. Hold these workshops at least once every three months and invite development team members and key stakeholders to them. Answering the following four questions will help you understand if a strategy change is needed:\nWill the technology help you address an existing need in a better way? Or will it help you satisfy a new one?\nWill it better serve an existing target group, or will it help you reach out to a new market or market segment?\nWill the technology help you better differentiate your product? Will it help you create new standout features or strengthen existing ones?\nWill it affect the business goals? Will it, for instance, require a bigger investment and reduce profitability or will it increase revenue and drive down cost?\nTo correctly answer these questions, you must have spent the necessary time to scout new technology trends, and maybe more importantly, the development team members must have had the opportunity to carry out the relevant research and experimentation work. \nDon’t forget that you want to play a proactive game where you respond to technology opportunities and threats early on—instead of being reactive and driven by what your competitors do.\n ","url":"https://www.romanpichler.com/blog/leveraging-new-technologies-tips-for-product-people/"},{"date_scraped_timestamp":1710925541689,"host":"www.romanpichler.com","page_title":"Listening Practices for Product People","text":"\n \n Published on 4th February 2019\n \n Last Updated on: 19 Jul 2022\n \n \n \n \n \n \n Listening to users, customers, stakeholders, and dev team members is crucial for product people. It helps us build rapport, generate new insights, and make inclusive decisions. Unfortunately, we can so preoccupied with our own ideas or busy updating and convincing others that we forget to attentively listen to the individuals we communicate with. This article shares 12 techniques to help you improve your listening habits and become even better at understanding others. \n Listen to Understand, not to Answer\n“Most people do not listen with the intent to understand; they listen with the intent to reply,” wrote Steve Covey in his book The 7 Habits of Highly Effective People. It’s true: We often listen with a specific goal in mind, with the intention to reply, to share our perspective, or to convince the other person. As a consequence, we don’t pay full attention to what the other person is saying or filter what is being said; we only hear what supports our view. We obtain partial or selected pieces of information, which can cause us to draw the wrong conclusions and get the wrong end of the stick. To avoid these issues, start by taking a sincere interest in the individual and what the person has to say. Make a conscious effort to listen to understand, not to reply, correct, or criticise.\nGive the other Person Your Full Attention\nAs the person in charge of the product, you are likely to have many duties that compete for your time and attention. It can therefore be tempting to glance at your phone or smart watch to see if an urgent message has arrived while listening to someone. But instead of multi-tasking, minimise any distractions, switch off your devices or close the appropriate applications, and give your full and undivided attention to the other person. Being attentive increases the chances that you receive all the information and take in everything the individual says. It also makes the speaker feel valued and respected. Consequently, the individual is likely to be more trustful and open with you.\nListen for Facts, Feelings, and Needs\nWhen you communicate with people, you may find that you listen for the facts—what is being said. For example, the issues some users experience with the latest version of your product. While facts are undoubtedly important, you shouldn’t stop there. Listen also for what is not being said—the emotions and needs of the other person, as Andrea Cohen et al. recommend in their book Practicing the Art of Compassionate Listening. Feelings, such as excitement, enthusiasm, frustration, or sadness, tell you how a person is while speaking. They often manifest themselves in the individual’s body language. Raised voice and a red face are likely to indicate that the person is angry, for example. Needs are the underlying motives we have when we speak. They refer to our intentions and goals and describe why we say what we are saying. Therefore, don’t just take what someone says at face value. Consider how the person is feeling and why she or he is sharing the piece of information. What are the individual’s interests and concerns? What’s really going on here? If you are unsure or want to find out more, ask clarifying questions.\nStay Intentionally Silent\nMany people, including myself, are uncomfortable with tolerating silence in conversations. I can be in a rush to conclude the conversation without being fully aware of it; or I might be enjoying it so much that I don’t want to stop. But silence is often necessary to encourage the other person to continue to talk and share something that might be uncomfortable or difficult. To create the necessary space, take three deep breathes or count to ten before you speak giving the individual enough time to finish without feeling rushed. Additionally, being silent for a few seconds allows you to let what you have heard sink in and become aware of how you are before you answer.\nListen with an Open Mind\nAs the person in charge of the product, you may have strong views of what needs to be done to progress your product. While it’s great to have ideas and opinions, try to hold them lightly and make an effort to listen with an open mind. Don’t immediately judge and dismiss something you don’t like or agree with. Try to be receptive and appreciative of the other person’s perspective even if you initially consider it to be wrong. Otherwise, it will be difficult to receive all the information and understand the individual’s needs and interests. You might even discover that some of your preconceived ideas were wrong or find alternatives that are even more appropriate.\nPay Attention to the Individual’s Body Language\nPaying attention to non-verbal information—like voice pitch and volume, gestures, facial expressions, and eye movement—is important: It expresses the speaker’s feelings and it helps you understand the individual’s interests. In fact, studies have found that over 60% of face-to-face is communication done non-verbally. For example, if somebody tells you that she fully supports your product roadmap but rolls her eyes or pulls a face, you know that the person is not being sincere. The individual either wants to make a joke and be jovial—or criticise and belittle the plan.\nAsk Clarifying Questions\nAsking clarifying questions ensures that you have correctly understood what was said, and it encourages people to provide more information. You might say, for instance, “Can you please give me an example of what you mean?” Asking questions can also make people feel appreciated and build strong relationships: They signal that you are listening and are interested in what the individual has to say. What’s more, questions can encourage people to come up with answers themselves. This leverages their creativity and it generates buy-in and shared ownership in a solution or course of action.\nBe careful, though, which questions you ask. Avoid closed questions, as they carry the risk of bias and manipulation by limiting the answers that are available, as well as leading questions. The latter encourage the answer you want to hear and manipulate the conversation. A question like “We have all agreed that the current strategy is the right way forward, don’t we?” strongly encourages people to support your view and not to challenge the strategy.\nBe Mindful of Your Own Emotions\nPay attention to how you are affected by what you are hearing. What is your emotional response? Do you feel pleased, flattered, surprised, overwhelmed, tense, irritated, upset, or angry, for example? Is your heart racing, are you shoulders tensioning, or is your throat getting dry? If so, why is that? Being mindful of your bodily sensations and becoming aware of your emotions helps you avoid reacting in an unskilful way—saying something you will later regret or using harsh, hurtful speech.\nMaintain Eye Contact\nTurn your body towards the speaker, look directly but respectfully at the person, and establish eye contact—unless that’s socially unacceptable, of course. This signals that you are paying attention and are interested in what the other person has to say, and it helps you take in the person’s body language.\nDon’t Interrupt the Other Person\nIf you are anything like me, then you may find it hard to be patient and allow the other person to finish before sharing your perspective. But interrupting the speaker is not only impolite. It can make the individual feel insecure, rejected, hurt, or even angry. As a consequence, the individual will be less receptive to what you have to say or even reject your response in an attempt to retaliate—no matter how factually correct your answer may be.\nListen with Kindness\nSuccessful communication does not only exchange information; it establishes a shared understanding, connects people, and builds strong relationships. To leverage the latter, listen to the other person with kindness: Try to develop a positive, warm-hearted attitude towards the individual. This might feel natural when you find the other person likeable. But if you dislike her or him, you might feel aversion or even ill-will. While that’s a common reaction, negative feelings make it hard to listen with an open mind and empathise with the individual. To overcome a negativity bias, bring to mind the person’s positive traits. Think of the good things the person has said or done. Additionally, separate opinion and individual. A difficult stakeholder may have a brilliant idea; and an opinion you strongly disagree with doesn’t make the individual a bad person.\nDon’t Take S***t\nWhile listening attentively, kindly, and with an open mind is helpful, it is important that you take good care of yourself. If you are patiently listening but find it increasingly hard to bear what you are hearing, then consider switching the topic or ending the conversation. For example, you might find that the other person is badmouthing colleagues or personally attacking or insulting you. Alternatively, you might find it upsetting what the person is saying and need time to deal with it. In these cases, it is best to stop the conversation and continue at a later point in time.\nBut leave a difficult conversation without making things worse, without accusing, blaming, or insulting the other person or retaliating in any other way. This will make it easier to restart the conversation and repair the relationship, if necessary.\n ","url":"https://www.romanpichler.com/blog/listen-to-understand-listening-practices-for-product-people/"},{"date_scraped_timestamp":1710925552266,"host":"www.romanpichler.com","page_title":"Make Your Product Stand Out with the Strategy Canvas","text":"\n \n Published on 12th January 2017\n \n \n \n \n \n \n \n Few products are ground-breaking innovations with zero competition. Chances are that alternatives for your product exist. You should therefore ensure that your product stands out from the crowd and that people have a compelling reason to choose it over competing offerings. The Strategy Canvas is a great tool to achieve this, as I explain in this post. \n The Strategy Canvas\nThe Strategy Canvas was developed by Kim and Mauborgne, the authors of Blue Ocean Theory. It was originally intended as a business strategy tool to discover new markets. Luckily, the canvas can also be applied to individual products, as the following example illustrates.[1]\nThe Strategy Canvas above ranks the first iPhone against its rivals, including the Nokia N95 and the BlackBerry Curve. The horizontal axis of the canvas captures the key factors companies compete on to provide their products. In the example above, there are twelve factors, which range from offering different models to stylish design.\nThe vertical axis of the Strategy Canvas describes the offering level, the degree to which the competitors offer the factors. Video, for instance, was not offered on the original iPhone but it was provided by its competitors; a camera was available on the first iPhone but it’s quality was inferior compared to the competition; but its media player was better, and the iPhone offered two new factors, a touch screen and a stylish design.\nBy assessing the degree to which the iPhone and the competitor products fulfil the twelve factors, two lines are created. The dark one represents the value curve of the smartphone industry in 2007; the light one the first iPhone.\nWhen comparing the two lines, we see that the they diverge. This means that the first iPhone was clearly differentiated. Apple achieved this by removing certain features, such as physical keyboard, stylus, and video; reducing some, including voice quality and e-mail integration; and improving others, for example, mobile Internet and media player. Additionally, the two new factors—the touch screen and stylish design—gave the phone a significant competitive advantage and helped Apple disrupt the mobile-phone market.\n[1] The sample canvas is based on Disruptive Product Innovation Strategy: The Case of Portable Digital Music Players.\nApplying the Canvas to Your Product\nBefore applying the Strategy Canvas, you should be clear on your product’s value proposition—the main problem it solves or the primary benefit it provides—and the market segment you want to serve. I capture these pieces of information using my Product Vision Board. (The canvas therefore complements the board in my approach.) Additionally, you should know who your main competitors are.\nStart creating the canvas by determining the key factors. Make sure you choose those factors that define the current standard in your market and are used to advertise and sell products, rather than the ones that favour your own product. Product reviews and test reports can help you discover the right factors, since they compare a product against the expected standard. Additionally, limit the number of factors you use to about ten. This creates focus and avoids an overly complex canvas.\nWith the key factors in place, rank the competing offerings and your own product taking into account the degree to which they fulfil the factor. This is not meant to be a scientific exercise but based on the information you have collected whilst identifying the key factors. Consider if a factor is fulfilled not at all, hardly, to some extent, or fully, and rank the products accordingly.\nWith the scores in place, represented as dots or circles, connect them to create the value curves. Think about joining up the curves of the competitors to create clarity, as I did in the Strategy Canvas above. While this carries the risk of overlooking some details, it simplifies the canvas and makes it easier to see where the main opportunities are for making your product stand out.\nIf the value curve of your product is too close to the curve of the competition, then you haven’t differentiated your product sufficiently. You will subsequently find it hard to explain to your users and customers why they should choose your product. What you would like to see instead is a value curve that significantly diverges from the industry standard, like the white-dotted one in the Strategy Canvas above. This is achieved by eliminating, reducing, and raising the appropriate key factors, and by creating new ones. The Eliminate-Reduce-Raise-Create Grid can help you with this.\nUse the Strategy Canvas not only for brand-new products. Regularly check if an existing product is still adequately differentiated or if the competition has caught up with it. Take the iPhone. If we consider how the smartphone market has changed since the launch of the iPhone, we see that the competitors have matched the original iPhone’s features. Trying to stay ahead of the competition, Apple has introduced and raised several factors over the years, including the ability to install third-party apps, the number and size of iPhone models, the battery life, and the camera and video capabilities.\n ","url":"https://www.romanpichler.com/blog/make-your-product-stand-out-with-the-strategy-canvas/"},{"date_scraped_timestamp":1710925724973,"host":"www.romanpichler.com","page_title":"Making Unanimous Product Decisions","text":"\n \n Published on 24th February 2017\n \n \n \n \n \n \n \n Unanimity is a powerful approach to take advantage of the collective wisdom of the stakeholders and development team members and generate strong buy-in and shared ownership of a decision. But it can be challenging to apply, and if used incorrectly, it can create mediocre results. This post helps you leverage unanimity to make successful product decisions. It explains when and how to use it, and it discusses common traps and how to avoid them. \n Benefits and Limitations\nDeciding by unanimity means that everyone required to make the decision agrees with it. Applied correctly, it results in better decisions and it creates strong buy-in and shared ownership. It is particularly helpful when the stakes are high and you have to make a high-impact or complex product decision, for example, if you should pivot, create a product variant to address new market segment.\nBut unanimous agreement is certainly not a silver bullet. Do not use it if:\nYou face an emergency and a decision must be made quickly, for instance, when you are in danger of missing a critical release date;\nThe decision is low impact and no big deal;\nThe people who need to contribute to the decision are not able or willing to collaborate, for example, the individuals cannot meet face-to-face.\nIf that’s the case, choose a different decision rule instead, for example, consent, majority vote, or product person decides after discussion.\nTo take full advantage of unanimity, you require a collaborative mindset, a collaborative decision-making process, and a tool to help you understand if you have found a solution that everyone agrees with.\nMindset\nTo reach unanimous agreement, people must understand each other’s perspectives and feel and think together. This, in turn, requires that everybody involved in making the decision is heard and listened to. What’s more, people must have an open mind and let go of their preconceived notions and ideas, appreciate other people’s ideas, and jointly look for opportunities to discover with new, better ideas.\nIf the individuals cling to their ideas and believes, if they think that they know best and that their ideas should win, or if they act in selfish ways and want to get the best deal for themselves or their department, then the group will struggle to reach unanimity.\nAs the person in charge of the product, you should lead by example and demonstrate the right attitude, be collaborative and appreciate ideas even if they sound unconventional. You will also benefit from involving an experienced Scrum Master, coach, or facilitator who helps you with setting the ground rules and facilitates the discussion.\nProcess\nDeciding by unanimity can take time and involve an element of struggle, particularly when you make a complex decision: Everyone required to contribute to the decision must have the opportunity to equally share their ideas and perspectives, and the group members must share diverse perspectives. Only after that’s happened can you start looking for common ground and convergence. The picture below depicts this approach, which is based on the book The Facilitator’s Guide to Participatory Decision-Making.\nAt the start of the decision-making process depicted above, you want to encourage people to generate different ideas and share diverse perspectives using free-flowing open discussion or structured brainstorming, for example. Suspend judgment at this stage and don’t criticise the ideas. You want to generate plenty of diverse suggestions before you evaluate them.\nResist the temptation to prematurely reach agreement. Otherwise you may end up with a mediocre solution based on familiar options and weak buy-in. In the worst case, you experience design by committee where people broker a weak compromise—which is the opposite of what a unanimity-based product decision should deliver!\nEnsure that everybody fully participates and don’t allow individuals to dominate. Otherwise you won’t be able to leverage the collective creativity and knowledge of the group, and the decision-making process might get highjacked by the HIPPO and the decision dictated.\nOnce everybody has been heard, take the next step. Encourage people to understand each other’s perspectives and motivations and look for common ground. This is likely to involve some struggle, as some individuals—possibly yourself—may still be attached to their ideas. Give them time to let go and embrace other people’s suggestions. Consider testing some of the ideas by running experiments—be it observing or interviewing users or exposing prototypes to them. Sort ideas into categories, distinguish opinions from facts, and summarise key points. A great solution often combines elements of different ideas, and it can significantly vary from what you had in mind at the beginning of the process. Finally exercise judgement using the data that you have collected and come to agreement.\nParticipating in this process can be difficult: it requires that people tolerate ambiguity, constructively deal with conflict, let go of their own ideas, and embrace someone else’s suggestion. Choose a safe, comfortable environment; don’t rush the process and allow for enough time; and involve a skilled ScrumMaster or coach who helps you guide people through the process.\nAgreement Scale\nOne of the challenges of an unanimity-based approach is to understand if you have found an inclusive solution and reached unanimous agreement, or if you need to continue the process and do more work. An agreement scale helps you with this.\n5\n4\n3\n2\n1\nI whole-heartedly endorse it\nI endorse it\nwith minor reservations.\nIt’s not great but I can support it\nI don’t support it.\nI have serious disagreements.\nThe scale above shows five gradients of agreement. The range from whole-hearted endorsement to serious disagreement. You can use more gradients if you wish to, but I find that in practice five, the options above are sufficient.\nWith your scale in place, ask everyone to express how much they agree. A technique commonly used on an agile teams is the fist of five. Individuals express their agreement by showing the appropriate number of fingers, for example, five fingers for whole-hearted endorsement and one finger for veto. An alternative I like to use is asking people to dot-vote and stick or draw a dot underneath the appropriate number, which nicely visualises the group’s level of agreement.\nIf everybody whole-heartedly endorses the proposed decision, then you have unanimous agreement. That’s great but often not necessary. I find that it is OK when some people agree with minor reservations. But if several individuals are neutral (gradient three) or can’t support it, then you should continue the discussion and look for a solution that everyone can agree with.\nIf you find that this is taking too long and you are running out of time, then I recommend changing the decision-making rule. Switch to consent or majority vote to speed up the decision-making process or make the decision as the person in charge of the product based on the input you have received so far. Bear in mind, though, that these two approaches will not generate the same benefits as unanimity, and don’t forget to clearly communicate the change to the group.\n ","url":"https://www.romanpichler.com/blog/consensus-based-product-decisions/"},{"date_scraped_timestamp":1710925493459,"host":"www.romanpichler.com","page_title":"Making Unanimous Product Decisions","text":"\n \n Published on 24th February 2017\n \n \n \n \n \n \n \n Unanimity is a powerful approach to take advantage of the collective wisdom of the stakeholders and development team members and generate strong buy-in and shared ownership of a decision. But it can be challenging to apply, and if used incorrectly, it can create mediocre results. This post helps you leverage unanimity to make successful product decisions. It explains when and how to use it, and it discusses common traps and how to avoid them. \n Benefits and Limitations\nDeciding by unanimity means that everyone required to make the decision agrees with it. Applied correctly, it results in better decisions and it creates strong buy-in and shared ownership. It is particularly helpful when the stakes are high and you have to make a high-impact or complex product decision, for example, if you should pivot, create a product variant to address new market segment.\nBut unanimous agreement is certainly not a silver bullet. Do not use it if:\nYou face an emergency and a decision must be made quickly, for instance, when you are in danger of missing a critical release date;\nThe decision is low impact and no big deal;\nThe people who need to contribute to the decision are not able or willing to collaborate, for example, the individuals cannot meet face-to-face.\nIf that’s the case, choose a different decision rule instead, for example, consent, majority vote, or product person decides after discussion.\nTo take full advantage of unanimity, you require a collaborative mindset, a collaborative decision-making process, and a tool to help you understand if you have found a solution that everyone agrees with.\nMindset\nTo reach unanimous agreement, people must understand each other’s perspectives and feel and think together. This, in turn, requires that everybody involved in making the decision is heard and listened to. What’s more, people must have an open mind and let go of their preconceived notions and ideas, appreciate other people’s ideas, and jointly look for opportunities to discover with new, better ideas.\nIf the individuals cling to their ideas and believes, if they think that they know best and that their ideas should win, or if they act in selfish ways and want to get the best deal for themselves or their department, then the group will struggle to reach unanimity.\nAs the person in charge of the product, you should lead by example and demonstrate the right attitude, be collaborative and appreciate ideas even if they sound unconventional. You will also benefit from involving an experienced Scrum Master, coach, or facilitator who helps you with setting the ground rules and facilitates the discussion.\nProcess\nDeciding by unanimity can take time and involve an element of struggle, particularly when you make a complex decision: Everyone required to contribute to the decision must have the opportunity to equally share their ideas and perspectives, and the group members must share diverse perspectives. Only after that’s happened can you start looking for common ground and convergence. The picture below depicts this approach, which is based on the book The Facilitator’s Guide to Participatory Decision-Making.\nAt the start of the decision-making process depicted above, you want to encourage people to generate different ideas and share diverse perspectives using free-flowing open discussion or structured brainstorming, for example. Suspend judgment at this stage and don’t criticise the ideas. You want to generate plenty of diverse suggestions before you evaluate them.\nResist the temptation to prematurely reach agreement. Otherwise you may end up with a mediocre solution based on familiar options and weak buy-in. In the worst case, you experience design by committee where people broker a weak compromise—which is the opposite of what a unanimity-based product decision should deliver!\nEnsure that everybody fully participates and don’t allow individuals to dominate. Otherwise you won’t be able to leverage the collective creativity and knowledge of the group, and the decision-making process might get highjacked by the HIPPO and the decision dictated.\nOnce everybody has been heard, take the next step. Encourage people to understand each other’s perspectives and motivations and look for common ground. This is likely to involve some struggle, as some individuals—possibly yourself—may still be attached to their ideas. Give them time to let go and embrace other people’s suggestions. Consider testing some of the ideas by running experiments—be it observing or interviewing users or exposing prototypes to them. Sort ideas into categories, distinguish opinions from facts, and summarise key points. A great solution often combines elements of different ideas, and it can significantly vary from what you had in mind at the beginning of the process. Finally exercise judgement using the data that you have collected and come to agreement.\nParticipating in this process can be difficult: it requires that people tolerate ambiguity, constructively deal with conflict, let go of their own ideas, and embrace someone else’s suggestion. Choose a safe, comfortable environment; don’t rush the process and allow for enough time; and involve a skilled ScrumMaster or coach who helps you guide people through the process.\nAgreement Scale\nOne of the challenges of an unanimity-based approach is to understand if you have found an inclusive solution and reached unanimous agreement, or if you need to continue the process and do more work. An agreement scale helps you with this.\n5\n4\n3\n2\n1\nI whole-heartedly endorse it\nI endorse it\nwith minor reservations.\nIt’s not great but I can support it\nI don’t support it.\nI have serious disagreements.\nThe scale above shows five gradients of agreement. The range from whole-hearted endorsement to serious disagreement. You can use more gradients if you wish to, but I find that in practice five, the options above are sufficient.\nWith your scale in place, ask everyone to express how much they agree. A technique commonly used on an agile teams is the fist of five. Individuals express their agreement by showing the appropriate number of fingers, for example, five fingers for whole-hearted endorsement and one finger for veto. An alternative I like to use is asking people to dot-vote and stick or draw a dot underneath the appropriate number, which nicely visualises the group’s level of agreement.\nIf everybody whole-heartedly endorses the proposed decision, then you have unanimous agreement. That’s great but often not necessary. I find that it is OK when some people agree with minor reservations. But if several individuals are neutral (gradient three) or can’t support it, then you should continue the discussion and look for a solution that everyone can agree with.\nIf you find that this is taking too long and you are running out of time, then I recommend changing the decision-making rule. Switch to consent or majority vote to speed up the decision-making process or make the decision as the person in charge of the product based on the input you have received so far. Bear in mind, though, that these two approaches will not generate the same benefits as unanimity, and don’t forget to clearly communicate the change to the group.\n ","url":"https://www.romanpichler.com/blog/unanimity-based-product-decisions/"},{"date_scraped_timestamp":1710925563516,"host":"www.romanpichler.com","page_title":"Market Segmentation Tips","text":"\n \n Published on 25th March 2015\n \n \n \n \n \n \n \n Identifying the right customers and users for your product is key to its success: It determines the value proposition and the user experience, it influences the business model and the technologies used. This post helps you reflect on your market segmentation practice and pick up some new tips. \n What is Segmentation?\nMarket segmentation is like eating cake: Instead of trying to eat the whole cake at once and possibly creating mess or choking on it, we cut out a neat slice. Segmenting the market and dividing it into distinct groups allows you to create focused products with a compelling value proposition and a great user experience. Your segments should be clear-cut so that they do not overlap. What’s more, each segment should be homogenous and the people within it should respond to your product in the same way.\nLet’s say that I wanted to create an app that helps people eat more healthily. The product could benefit a diverse group including individuals who want to lose weight as well as people who live with a medical condition such as diabetes. Trying to please everyone at once is not only challenging. It carries the risk of not satisfying anyone. Instead, I should focus on a specific market subset or segment.\nHow you segment the market is important: The segments define who the customers and the users are. While there are different ways to divide the market, you face two basic choices: You can primarily use customer properties such as age or gender or the benefit that your product provides.\nSegmentation by Customer\nCustomer properties that are commonly used to divide the market include:\nDemographics such as age, gender, marital status, occupation, education, and income.\nPsychographics including lifestyle, social class, and personality.\nBehavioural attributes like usage patterns, attitudes, and brand loyalty.\nRegions such as Europe, Middle East and Africa (EMEA) and Asia-Pacific (APAC).\nIndustries or verticals, for instance, automotive, education, finance, and healthcare for business markets (B2B).\nCompany size such as small and medium-sized enterprises (SME) for B2B products.\nLet’s take my healthy eating app as an example. To segment the market, I could choose demo- and psychographic attributes and define my target segment as men, aged 20-30, who are single, work long hours, and eat out frequently.\nWhile the attributes listed above differ, they have something important in common: They all focus on the customer, be it a consumer or a business.\nSegmentation by Benefit\nAn alternative approach is to segment the market using the benefit the product provides or the problem it addresses. This suggests that you first and foremost consider people’s needs and the job they need to get done.\nFor instance, if the main benefit of my healthy eating app is to help people understand better how much they eat, then there are two groups that may benefit from it: people who would like to lose weight; and people who want a more precise way of determining their calories intake such as athletes and people with diabetes. The first group could contain single men aged 20-30 with poor eating habits. But it could equally include married women with small kids who want to lose weight but don’t have the time or energy to follow a strict diet or to exercise regularly.\nWhich Approach should you Choose?\nWith different market segmentation approaches available to you, how can you tell which ones is right? My answer is simple: Whenever you do something new – be it creating a new product or taking it to a new market, then segment by benefit first. Once you have created the initial benefit-based segments, refine them by using demographics and other customer properties.\nThis approach reduces the risk of overlooking people who are likely to benefit from your product and of creating misaligned segments that don’t correspond to reality. Take my healthy eating app. If I had created segments primarily based on demo- and psychographics, I probably would have overlooked athletes and women with children as target customers.\nAvoid these Two Common Mistakes\nWhichever way you segment the market, avoid the following two mistakes: First, don’t blindly follow predefined segments. I have seen product managers clinging to existing customer-based segments while trying to create breakthrough products. Unsurprisingly, the outcomes were rather poor.\nSecond, don’t discard an idea because it does not fit into predefined market segments. Otherwise you may miss out on opportunities to create new products and new markets. Take the first iPhone, which launched in 2007, as an example. Apple disregarded the traditional distinction between consumer and business smartphones. Instead the company created a product that offered “the Internet in your pocket” and appealed to consumers and business users alike.\n ","url":"https://www.romanpichler.com/blog/market-segmentation-tips-for-product-managers/"},{"date_scraped_timestamp":1710925762578,"host":"www.romanpichler.com","page_title":"Mindfulness Tips for Product Managers and Product Owners","text":"\n \n Published on 21st October 2016\n \n Last Updated on: 19 Jul 2022\n \n \n \n \n \n \n As product managers and product owners, we are busy people with a diverse range of responsibilities. This makes it all too easy to hurry from one meeting to the next, to try to accomplish several things at once, and to get lost in the busyness of our work. Unfortunately, this approach is not only unproductive, it also affects our wellbeing. Mindfulness offers a different path: becoming more aware of what we do and how we do it so we can make better decisions and be more creative. This post shares six practical mindfulness tips to help you work better and feel happier. \n What is Mindfulness?\nMindfulness means paying attention to the present moment, to what is actually happening. It helps us become more aware of what we think and feel, and how we are—content, tense, relaxed, stressed, happy, angry, indifferent, restless, worried, or calm.\nBut what’s the big deal? Surely all of us know how we are. But do we really? I find I can be so busy and caught up in activities, thoughts, and emotions that I am not (fully) aware of how I am and what’s going on in my mind and around me. Here is a simple test: Close your eyes and gently observe your breath. Chances are that your concentration is quickly interrupted by a thought or feeling, such as, “I must not forget to look at the latest analytics data,” or “I wish the sales guys were less pushy”.\nI find that if I am preoccupied with thoughts and ideas, likes and dislikes, then this colours my perception of reality. When I am happy and content, everything seems OK—even an nagging problem with my website isn’t that bad and can wait. But when I am discontent, tense, or tired, small things can seem big and bad. The website issue is now a major disaster that must be resolved immediately.\nMindfulness helps me respond in an appropriate, skilful way. It reduces the risk that I misjudge things and take the wrong actions. Practising mindfulness has been very beneficial for me personally and for my work.\nWhy is Mindfulness Beneficial for Product People?\nMindfulness provides a number of well-known benefits, such as, improved creativity, productivity, and wellbeing, and it has become popular at companies like Apple, Google, and Nike. I find that mindfulness is particularly helpful for product managers and product owners. There are two main reasons for this:\nFirst, we have a demanding, multi-faceted job that requires us to carry out diverse tasks—from shaping the product strategy, providing input to the marketing collateral, analysing user data, to crafting user stories together with the development team. This broad range of duties combined with little or no power to tell others what to do, makes our work interesting and demanding. But it carries the risk of becoming restless and stressed, and in the worst case, fall ill or change jobs. Mindfulness helps us become aware of how we really are, so we can early adapt what we do and how we do it.\nSecondly, a major success factor for every product person is to develop empathy for the users and customers. If we do not care about the people who should benefit from the product, if we are not genuinely interested in solving one of their problems or providing a real benefit to them, we will struggle to offer a product that does a great job and becomes successful. Luckily, mindfulness practice strengthens our capacity to empathise with others—and ourselves. It teaches us to be calm, open and non-judgemental, qualities that I have found extremely useful when interacting with users and customers as well as internal stakeholders, such as, senior managers and sales reps.\nTip #1: Don’t Rush\nAs product managers and owners, we are prone to overcommitting and taking on too much work. With so many responsibilities, it seems logical to work as hard and fast as possible. But rushing from one task to the next and from one meeting to another is likely to reduce your productivity. As the old saying goes: Haste makes waste. If I rush things, then I am likely to make mistakes. What’s more, I get tense, restless, and stressed. This reduces my attention span and it negatively impacts my sleep. In the worst case, I am trapped in a downward spiral, getting more and more irritable and finding it increasingly hard to keep up with the demands at work.\nDo whatever you do purposefully and at a sustainable, healthy pace. Don’t cram too much into your day. If you feel that there is too much work, then prioritise ruthlessly and learn to say no. Focus on the most important tasks; delegate or postpone. The development team may be able to refine some of the user stories without you, for example. The sales team may not require a separate update on the new release, if you encourage them to attend the next sprint review meeting.\nA simple trick that helps me stop rushing is to walk mindfully, as you would when you go for a nice walk. Here is one example of how this has helped me: For a long time, I used to walk as quickly as possible from the airplane to passport control at Heathrow airport on the way back home from work trips. I was surprised when I finally realised that this saved me a couple of minutes but left me feeling exhausted and stressed. I consequently started to pay attention to my walking and slow down my pace even if others walk past me. I now feel more content and relaxed when I leave the airport and when I arrive at home.\nTip #2: Do One Thing at a Time\nIt can be tempting to task switch as a product manager or owner—to jump from one task to the next. This creates the illusion of getting more work done. But in reality, it reduces our productivity. Every time we start a new task, be it answering an email, talking to a colleague, looking at new analytics data, we need time to remind ourselves what has to be done and how to do it. This quickly adds up, particularly when we task-switch frequently. What’s more, I find working on several things tiring. If I do it a lot throughout the day, I get restlessness and find it hard to relax after work.\nTherefore, do one thing at a time, and don’t multi-task. Be present and fully engage in what you do—or don’t do it. A thing worth doing is worth doing well, as the old saying goes, even if it’s difficult and challenging.\nTo become better at fully engaging in what you do, try the following: Next time you have something to eat, just eat. Don’t distract yourself. Don’t look at the phone, computer, or television, but focus on eating. Eat slowly and mindfully. Notice what and how you eat, what the food tastes like, and how it satisfies your hunger. I find that it can be hard to withstand the temptation of looking at the news, Facebook, or Twitter while eating. But resisting this craving for stimulation and entertainment allows me to enjoy my food: it’s amazing how tasty a simple sandwich is when we eat mindfully.\nTip #3: Take Proper Breaks\nIt can be tempting to keep busy: There is usually plenty of work to do for us product people; being busy can make us feel useful and wanted; and getting things done can be exciting and rewarding. But if we are always “on”, if we work through our lunchtime and check work emails before we go to bed, for instance, then we won’t recover. We are stuck in a work bubble and in danger of running out of energy and creativity. I find it impossible to come up with new ideas and be creative when my head is full of all the other tasks I still need to do. Creativity needs space.\nMake sure that you step back from work from time to time and take proper breaks. Use your lunchtime to get away from work and your desk. Go for a walk, do some exercise, chat with colleagues (but try not to talk about work). Don’t check your phone late at night unless there is an emergency. Take a proper holiday and don’t read work emails, don’t take work-related calls, and don’t read work books. Let go, unwind, recharge, and get a fresh perspective on things. Work may be important, but don’t allow it to take over our life and define who you are.\nHere is a simple practice you can try: When I was working for Intel in the late 1990s, I noticed that some teams started work early but had a coffee break together mid-morning. This inspired me to do the same. I still have a proper coffee break half-way through my morning when I work from the office. I brew my own coffee and try not to think about work.\nTip #4: Keep an Open Mind\nAs knowledge workers, knowledge is a great asset for us and key to doing a good job. If we don’t have the right knowledge, we will struggle to be an effective product manager or product owner. But the more we know, the harder it can be to keep an open, curious mind. It’s easy to fall into the trap of thinking we know best, particularly if we are experts in what we do.\nHaving a closed mind and holding on to fixed views is a serious issue for us product people: it hampers our creativity and ability to innovate, and it prevents effective collaboration. We are in danger of ignoring valuable feedback and data if they don’t match our ideas. And we will struggle to run effective experiments and test new ideas, as we will be tempted to either reject any data that doesn’t support our view, or interpret the test results so that they confirm our opinion.\nHere is a practice that I find helpful to cultivate an open mind: When talking to users or customers, make an effort not to judge anything you hear. Listen patiently and calmly. Take in whatever is said—no matter if you agree, disagree, or are indifferent. While this sounds easy, I find that listening with an open mind can be challenging: I sometimes catch myself evaluating and judging what has been said, or getting bored and impatient. I then have to remind myself to relax, suspend judgement, and pay attention to the conversation. As an added benefit, this practice helps to neatly separate gathering data from analysing it, which is desirable to maximise learning.\nTip #5: Be Positive\nWe’ve probably all been there: The sales guys are pushy, the customers are demanding, the development team doesn’t deliver, the boss is impatient, and the latest release did not live up to its expectations. Work just sucks. As difficult as it may be at times, experiencing challenging situations and dealing with difficult people is part of our job: As product people we interact with people from different business units who can have competing ideas and interests.\nWhile it’s OK to feel a bit down at times and moan about work, dwelling on the negatives or holding grudges against individuals—the mean boss, the selfish sales rep, the horrible programmer—is neither healthy nor helpful. I am not suggesting that you should ignore the difficulties that present themselves. But I recommend that no matter how challenging things are, you should look for the positives, the healthy traits in people (without ignoring unhealthy habits and wrong behaviour). Developing a positive attitude will increase your wellbeing and make you an even more likeable person.\nA great way to foster a positive attitude is to cultivate gratefulness. Be grateful even for the little things, a colleague wishing you a good morning, a smile from a co-worker, the help you get from a dev team member to refine some user stories, the smell of a nice cup of tea, the sunshine on your face. There is so much goodness in this world. We just have to tap into it.\nTip #6: Meditate\nBefore I came in touch with Buddhism over 10 years ago and started to mediate, I thought meditation meant spacing out, not thinking of anything, and feeling nice, comfortable, and relaxed. While meditation can be pleasant and enjoyable, it’s certainly not about escaping from reality. The opposite is true: Meditation is a vehicle to experience things for what they are, to become more aware of our thoughts, emotions, and mental states. You don’t have to be a Buddhist to practice meditation: Today, many people use meditation outside of its traditional religious setting, and some companies have started to offer meditation rooms like Salesfore, for example. The company recently created meditation spaces in their new San Francisco office, according to Business Insider.\nMeditation nicely supports mindfulness practice. A common meditation technique is to patiently and gently observe the breath. This increases awareness, teaches patience, and highlights thoughts and feelings that come up and take us away from the breath. I certainly find meditation very helpful, and recommend that you try it, or if you are a practitioner, keep it up.\nDon’t strive for a pleasant meditation experience. Accept whatever you experience, even if it’s unpleasant mental states like restlessness, tension, or aversion. Only if we aware of what’s happening, what we think and feel, can we do something about it. What’s more, I find that my mind tends to settle and become calmer and more peaceful after a few minutes; negative thoughts and emotions tend to weaken and often disappear when I acknowledge but don’t engage in them.\nMake sure that you sit comfortably but upright when meditating. Sitting on the ground on a cushion works best for me. While it may be tempting to lie down, avoid this position: it is all too easy to fall asleep once you’ve started to relax, particularly when you meditate in the evening like I often do. Another posture that works well for me particularly for shorter meditations during the day is standing still.\nTo maximise its benefits, meditation should be done regularly. Like any exercise, regular short meditation sessions tend to be better than an occasional, long one. To sustain your meditation practice, make it part of your daily routine. Meditate in the morning, lunchtime and/or evening, depending on what is best for you. Start with 10 minutes and see how that works for you.\nThanks to Kathy G. Berkidge for inspiring me to write this post. \n ","url":"https://www.romanpichler.com/blog/mindfulness-tips-for-product-managers-and-product-owners/"},{"date_scraped_timestamp":1710925550546,"host":"www.romanpichler.com","page_title":"Prioritising a Product Backlog When Everything is Important","text":"\n \n Published on 2nd September 2020\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product backlog is an essential product management tool: It captures detailed product decisions and directs the work of the development team. The latter requires it to be prioritised or ordered. But how can you prioritise a product backlog when everything seems equally important? This article shares my answer. It recommends taking four steps to get to an effective, prioritised product backlog. \n \nListen to this article:\nStep 1: Ensure that you know who the product is for and why people will want to use it\nI’ll never forget the day when I suggested to the product manager of a brand-new healthcare product to prioritise its features. The individual looked at me slightly bewildered and replied, “I can’t. They are all high-priority.” \nPrioritisation requires deciding how important an item is. If everything is high priority, everything is equally important. This means in effect that nothing is a priority. But without clear priorities, the development team lacks direction, and there is only a slim chance of creating a successful product.\nA common root cause of not being able to prioritise a product backlog is a lack of understanding of who the users of the product are and what specific value it should create for them. I find it not uncommon that features are added to the product backlog because a senior stakeholder demands it (HIPPO syndrome) or someone thinks it is a good idea (“let’s brainstorm some user stories”). But a product exists to generate value for the users and for the company providing it. If it is not clear who the users are and why they would want to interact with the product, it will be hard to decide which items should be in the product backlog and how important they are. \nTo mitigate the risk of adding the wrong items to the product backlog, ensure that you have a validated product strategy in place, no matter if you look after a brand-new or as an existing product. Such a strategy should clearly state the following:\nThe users and customers of the product so that it is clear who will benefit from it and who won’t;The main problem the product should address or the primary benefit it should offer, or the main goal users will want to achieve with it;The three to five features that will make it stand out from the crowd;The specific benefits it should create for the business.\nLet’s look at a brief example and say that I want to create a product that helps people eat healthily. Then I could choose to address middle aged men who suffer from unhealthy eating habits and who don’t exercise enough. The benefit might be to reduce the risk of developing type-2 diabetes. The standout features might be to measure food sugar levels, analyse the user’s eating habits, and integrate with leading smart scales. The business goals, finally, might be to diversify my company and open up a new revenue stream.\nAdditionally, you should be confident that your strategy is correct, and you should have data to support your view. In other words, you should have addressed the key assumptions and risks in the product strategy, and you should have carried out the necessary validation work. A tool like my product vision board helps you capture and validate your product strategy.\nStep 2: Describe the outcome or benefit the product should create in the next few months\nHaving a product strategy in place is great, but it is not enough to effectively prioritise a product backlog. What’s required is a specific product goal that is connected to the strategy and creates the right context to decide which backlog items are more important and which ones are less.\nTo create such a goal, ask yourself which outcome or benefit your product should achieve in the next, say, three to six months. What are the desired user and business benefits you want to create? Make sure that this goal is in line with the product strategy and that it helps create the desired user and business benefits. An example based on the sample strategy above would be “help the users understand their eating habits and acquire an initial user base.” (Note that I have chosen a compound goal that captures the desired user and business benefits.)\nI like to take this idea further, derive several product goals from the product strategy for the next 12 months, and capture them on a product roadmap. This puts the goal chosen in context and communicates how the product is likely to evolve over a longer period. If you have a product roadmap, then ensure that it implements the overall product strategy. Consider reworking it so that it clearly states the desired outcomes your product should achieve.\nStep 3: Remove all items from the product backlog that do not support the desired outcome\nNext, use the product goal you have chosen to delete all items from the product backlog that do not serve it. While this approach might sound radical, it ensures that your backlog becomes concise and focused. It avoids having items on the backlog that are speculative and may not create value, and maybe even more importantly, it facilitates prioritisation.\nIf you believe that removing the product backlog items is going to be very difficult, if not impossible, then this may indicate that you lack the necessary empowerment and/or that the stakeholders do not buy into the overall product strategy and the specific product goal you have chosen. Involving the individuals in the decision-making process can help address both issues. This allows the stakeholders to voice their ideas and concerns, and it makes it more likely that they understand and support important product decisions. \nIf you plan to decide together with the stakeholders, then invite them to a meeting. Carefully prepare the session and choose a decision rule, for instance, consent. Additionally, ask your Scrum Master or another skilled facilitator to help run the meeting so that everyone is heard, and nobody dominates. (I offer more advice on securing stakeholder buy-in and decision-making in my book How to Lead in Product Management.)\nStep 4: Prioritise the remaining product backlog items\nNow prioritise the remaining product backlog items. I recommend that you prioritise a new or significantly changed product backlog initially by risk, taking into account the user, technology, and business-related risks. Assess all backlog items together with the development team and move those to the top that carry the highest risk. This approach accelerates learning and it avoids failing late when there are less options to change course. \nFinally, ensure that the high-priority items are “ready“, that the development team and you have a shared understanding of them, that the team can implement them in the next sprint, and that they are testable.\nThe Moral of the Story\nYou might be wondering what was up with the healthcare product I mentioned earlier. The prioritisation difficulties were indeed rooted in the lack of a clear and agreed product strategy and the absence of a clear, focused goal for the initial version. Consequently, the offering launched was more like a maximum viable product than a minimum one. Unsurprisingly, it pretty much bombed, which resulted in the company losing significant market share and people leaving the enterprise. \nAs this story shows, it is crucial to have an overall product strategy in place before you decide which functionality your product should offer and in which order it should be implemented. In other words, make sure that you create an effective product strategy first before you worry about the product details and that you systematically connect the product backlog to the strategy.\n ","url":"https://www.romanpichler.com/blog/prioritising-a-product-backlog-when-everything-is-important/"},{"date_scraped_timestamp":1710925660720,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2330"},{"date_scraped_timestamp":1710925664130,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2325"},{"date_scraped_timestamp":1710925658455,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2331"},{"date_scraped_timestamp":1710925662802,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2327"},{"date_scraped_timestamp":1710925662277,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2329"},{"date_scraped_timestamp":1710925667972,"host":"www.romanpichler.com","page_title":"Product Backlog Tips","text":"\n 10 Tips to Fully Leverage the Product Backlog\n Published on 2nd November 2016\n \n Last Updated on: 15 Feb 2023\n \n \n \n \n \n \n Working with the product backlog can be challenging, and many Scrum product owners wrestle with overly long and detailed backlogs. This article shares ten practical tips that help you take full advantage of your product backlog. \n \n1 Complement your Product Backlog with a Product Roadmap\nI find that the product backlog is best used to capture the product details. In this sense, it is a tactical tool that facilitates product delivery. If that’s the case, then you will benefit from completing your product backlog with a product roadmap. A product roadmap sketches the overall journey you want to take your product on.\nI like to work with goal-oriented product roadmaps, which contain product goals that describe the benefits or outcomes your product should create in the course of the next six to twelve months. This picture below illustrates this setup.\n2 Focus your Backlog with a Product Goal\nUse a product goal like acquiring users, increasing conversion, or future proofing the product by reducing technical debt to direct and focus your product backlog. Any items in the product backlog should help meet this goal. If that’s not the case, you should remove them. While this approach may sound radical, it will result in a concise product backlog that is comparatively easy to update and change\nIf you complement your product backlog with a product roadmap that contains the product goals your product should meet, as I recommended in tip #1, you can use the next goal on the roadmap and copy it into your product backlog. This nicely connects your product backlog and product roadmap.\n3 Start with a Short and Sketchy Product Backlog\nStarting with an incomplete product backlog with largely coarse-grained items is particularly beneficial when you create a new product or add new features. Collect the user and customer feedback on early product increments to decide which functionality should be implemented, to evolve the product backlog, and to refine its items. Note that is alright to have a longer, more detailed backlog when your product is mature and your focus is on incremental changes and bug fixes.\n4 Collaborate with the Development Team\nInvolve the development team members in the product backlog work, for example, by running collaborative product backlog workshops. This allows you to benefit from their knowledge and creativity and discover technical risks and dependencies. It also increases the understanding and buy-in of the team members and results in better, clearer requirements. Ask your Scrum Master to facilitate the sessions to help you focus on offering product leadership while ensuring that everyone is heard and nobody dominates.\n5 Prioritise the Backlog\nUse uncertainty and risk to decide how soon an item should be implemented. Addressing uncertain items early on allows you to test your ideas, to fail fast, and to learn how to continue. Complement risk with cost-benefit and take into account dependencies when necessary. If you struggle to prioritise your product backlog, see my article “Prioritising a Product Backlog When Everything is Important.”\n6 Get the Backlog Ready\nA key purpose of the product backlog is to direct the work of the development team: High-priority items are pulled into the sprint transformed into a product increment. To ensure that this can happen, you have to break larger items into smaller ones until they are ready for sprint planning: the items should be clear, feasible, and testable. This facilitates choosing a realistic sprint goal, and it helps the development team members do their work without having to constantly ask you for clarification during the sprint.\n7 Regularly Update the Product Backlog\nThe product backlog is not a static, fixed plan. Instead, it evolves based on the insights you gain from collecting user feedback and building the product. You should therefore regularly update and refine it together with the development team. \nAnalyse the feedback and data collected from exposing the latest product increment to the users and apply the new insights to the product backlog: remove and add new items, and update existing ones. This maximises the chances of building a product that users want, and it keeps the product backlog up concise and usable.\n8 Say No\nHave the courage to say no and decline ideas and requirements that do not help you meet the product goal and move you closer to realising the product vision. This ensures that your product has a clear value-proposition, and it prevents your product from getting bloated. If the idea or requirement is important but cannot be realised in the next months, then consider adding it to the product roadmap.\n9 Look beyond User Stories\nWhile user stories, and functional requirements in general, are important, they are usually not enough. Also consider the user interaction, the nonfunctional qualities of your product, and the user interface and capture them in your product backlog.\n10 Make your Product Backlog Visible and Easily Accessible\nAs the product backlog describes the outstanding work required to progress the product, it is important that everyone involved in the development effort has access to it. I therefore recommend using a product backlog tool that is easy to use and that facilitates collaboration.\nOne option is to use a paper-based product backlog that’s on the office wall—assuming that people are collocated. A tool like my Product Canvas can help you structure and visualise your product backlog.\n ","url":"https://www.romanpichler.com/blog/ten-product-backlog-tips/?replytocom=2316"},{"date_scraped_timestamp":1710925723350,"host":"www.romanpichler.com","page_title":"Product Ethics","text":"\n \n Published on 1st May 2019\n \n \n \n \n \n \n \n Digital products can have a significant impact on the users--from saving lives to exposing people to harmful content, encouraging unhealthy habits, and contributing to climate change. It is therefore important that we take responsibility for the ramifications of our products and make ethically sound product decisions. This article offers five guidelines to put product ethics in practice and create products that truly benefit their users. \n What is an Ethical Product?\nAn ethical product is an offering that does not cause any harm, neither to its users nor the planet.[1] The former includes negatively impacting the people’s mental wellbeing, for example, by encouraging addictive behaviour or promoting harmful information. The latter comprises contributing to climate change by developing and providing the product. As product people, it’s our job to ensure that our products are kind—that they are ethical and do not cause any harm. The following guidelines help you with this.[2]\nIntentions\nWe all have to earn a living and every business needs to find ways to monetise its product, be it by generating revenue directly or indirectly, increasing brand equity, reducing cost, or other means. What’s more, earning money with software is not easy. Many users expect that digital products are free or cost next to nothing. But as product people, we should first and foremost want to enrich people’s lives by offering products that truly benefit them—rather than being driven by the desire to advance our careers, reap financial rewards, or receive praise.\nIf we don’t put the users first, we are in danger of getting the balance wrong between enriching people’s lives and generating value for the business. In the worst case, we end up adopting practices that benefit the company and ourselves but are harmful for the users. This includes getting people hooked and encouraging them to spend as much time as possible using the product. Engagement then becomes a euphemism for addiction.\nPutting users first also makes sense from a business perspective in my mind: It is hard to build a great brand and sustainable business when a product has a negative impact on the users’ lives. Therefore, reflect on your motivation. Cultivate the intention of wanting to help people, to offer products that truly benefit them.\nMental Wellbeing\nSometimes, we take a rather superficial look at the user needs and forget to investigate how using our product can affect their mental wellbeing. Is it right to offer a product that harms the users’ mental health even if people would want to use it? For example, as helpful as an individual notification from a social media app might be, is it appropriate to constantly alert and disrupt the users, and risk to increase their restlessness and stress levels whilst reducing their attention span? Or is it acceptable to enable the distribution of content that receives plenty of views and comments but contains material that promotes self-harm, violence, or hatred? Personally, I don’t think so.\nIt is our responsibility as product people to care for the users’ mental wellbeing and mitigate the impact our product has on it. This does not require a degree in psychology. Taking a real interest in the users and cultivating a warm-hearted attitude towards them is usually enough. To do so, make an effort to regularly meet users, observe how people interact with your product, and listen to any ideas and concerns they might have. This helps you empathise with the individuals and at the same time, discover opportunities for enhancing your product.\nBusiness Model\nProducts are value-creating vehicles: They exist to generate benefits for the users and business. When digital products are offered for free, monetisation typically takes place in form of exposing users to ads and selling their data. But this only works if enough people sufficiently engage with the product. For example, while I have disabled most of the notifications on my Facebook account, I still regularly receive emails that encourage me to use the app, for example, by telling me “A lot has happened on Facebook since you last logged in. Here are some notifications you’ve missed from your friends.”\nWhile every company has to generate revenue in order to pay for developing and hosting a free digital product, encouraging addictive behaviour or selling user data, without the individual being fully aware of it, is not justifiable in my opinion—the risk of negatively impacting users’ lives is simply too high. The solution, in my mind, is to change the underlying business model and move away from monetising digital products through ads and data sales. Consider, for example, what has happened in online media in recent years: More and more people are willing to pay for online content, for reading articles online and listening to music via streaming services like Spotify. What’s more, if a product has a compelling value proposition, then you are usually able to monetise it without offering it (entirely) for free.\nDesign and Technology Choices\nProduct ethics extends to the details of the product, its design and technology choices. Therefore, ask your development team to make ethically sound decisions when designing and building the product. Discourage unethical practices like the use of dark patterns and encourage the application of calm technology. The designers on the team may well be aware of ethical product design principles. If that’s not the case, then suggest that individuals familiarise themselves with them.\nAdditionally, help the team become aware of algorithmic biases when using machine learning technology. If the data that is used to train the algorithms is biased, then your product’s recommendations will be biased too. Therefore, ask the team members to take proactive steps and design for fairness when building machine learning programs.\nAs design and implementation work can be absorbing, it is easy to forget about ethical design and technology choices. To mitigate this risk, discuss including ethical design and code criteria in the Definition of Done with the development team. This will ensure that ethical concerns are addressed in every single sprint.\nEnvironmental Impact\nLast but not least, consider the environmental impact of your product. Even though your product may be digital, it still consumes energy to be developed and hosted. In a talk at QCon London 2019, Jason Box and Paul Johnston shared the following estimates:\nIoT products will cause 3.5% of global carbon emissions by 2025 and 14% by 2040;\nThe ICT industry could use 20% of all electricity and produce 5.5% of all carbon emissions by 2025; and\nData centres were responsible for about 2% of carbon emissions in 2016, which was about the same as aviation.\nIf we ignore the impact of our products on the environment in general and specifically on climate change, we act irresponsibly. Therefore, choose a carbon-neutral provider like Azure and Google who can host your digital product in an environmentally sustainable way.\nAdditionally, reduce the amount of travel that occurs in order to develop the product, particularly flights, as these cause high carbon emissions. Personally, I’ve found that video calls can often make it unnecessary to travel. That’s not only good for the planet; it also helps your company save money.\nNotes\n[1] I am certainly not the first person to suggest that non-harming should be a central quality of an ethical product. See, for example, Mariah Hay’s talk “First, Do No Harm”. Non-harming also plays a key role in other professional ethics, maybe most notably the medical profession.\n[2] I’d like to thank Magnus Billgren, Chris Massey, and Hope Thomas for inspiring me to write about product ethics.\n ","url":"https://www.romanpichler.com/blog/product-ethics/"},{"date_scraped_timestamp":1710925689563,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=117903"},{"date_scraped_timestamp":1710925703834,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=67470"},{"date_scraped_timestamp":1710925698652,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=73246"},{"date_scraped_timestamp":1710925705803,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=67469"},{"date_scraped_timestamp":1710925686591,"host":"www.romanpichler.com","page_title":"Product Goals in Scrum","text":"\n \n Published on 9th March 2021\n \n \n \n \n \n \n \n The 2020 edition of the Scrum Guide introduced a new type of goal, the product goal. This article shares my recommendations to help you as the person in charge of the product set effective product goals. \n \nListen to this article:\nProduct Goals Defined\nThe Scrum Guide released in November 2020 states that “the product goal describes a future state of the product … [It] is the long-term objective for the Scrum team.” It also suggests that “the product goal is in the product backlog. The rest of the product backlog emerges to define ‘what’ will fulfill the product goal.” The product owner is accountable for “developing and explicitly communicating the product goal.” The entire Scrum team is “focused on one … product goal” at a time.\nIf this definition leaves you scratching your head, don’t worry. Scrum is a simple framework designed to facilitate the development of complex products. It does not intend to prescribe how the practices it offers should be applied. As a consequence, different people have suggested different ways to apply the product goal. Some view it as the product vision, others equate it to the product’s value proposition.\nI find, however, that a product goal is best used to describe a specific and measurable benefit or outcome a product should create in the course of the next two to six months. A sample goal might be to acquire users, increase conversion, generate revenue, or reduce technical debt. Such a goal aligns the stakeholders and development teams, and it directs their work.\nWhat’s more, I like to ensure that product goals are connected to the product strategy and its user and business goals. This helps me choose the right product goals and it ensures that meeting a product goal is a step towards creating the desired value for the users and the business, as figure 1 shows.\nFigure 1: The Product Goal in Context\nIn figure 1, the vision is the basis for choosing the user and business goals, and the latter create the context for determining the right product goal. At the same token, each product goal acts as the foundation for identifying helpful sprint goals. In other words, the goals are connected and form a cascading set of product-related goals.\nPlease see my article “Leading Through Shared Goals” and my book How to Lead in Product Management for more information how to effectively use the goals in figure 1, which includes securing the necessary buy-in from the stakeholders and development teams.\nBackground Story: Readers familiar with the history of Scrum—sometimes lovingly referred to as Scrumtorians—will undoubtedly know that it has contained sprint goals at least since 2002 and a (product) vision since 2004, even though the latter is not mentioned in the Scrum Guide. When I started to work with Scrum in 2004, I could not get my head around the question of how to systematically connect a big, inspiring vision to a tactical, short-term sprint goal. It took me years to come up with the set of goals in figure 1. In hindsight, the set looks disappointingly simple 😉\nYou can also access the contents of this article on my YouTube Channel:\nSample Goals\nTo better understand how the goals in figure 1 can be applied, let’s take a look at an example.\nFigure 2: Sample Goals\nIn figure 2, I first captured the vision “Help people eat healthily” and then used it to choose the user and business goals “Reduce the risk of developing type-two diabetes; create new revenue source.” In order to determine the right product goal, I asked myself, “What would be a first good step to meet the from the user and business goal?” I consequently chose the product goal “Help the users understand their eating habits and acquire an initial user base.” I then used this goal to determine the right sprint goal. I figured that finding out if users are willing to share personal information when activating the app would be the most important risk to address and hence should be the goal of the first sprint.\nNote that I chose to use a compound product goal in figure 2 that has a user part—help the users understand their eating habits and business—and a business one—acquire an initial user base. Both parts are closely connected: In order to acquire a user base, the product must offer tangible value to the users, and a first step to help people eat more healthily is to help them become aware of their current eating habits. You don’t have to work with compound product goals of course, if you prefer to focus your objectives on either the user or the business benefits.\nProduct Goals and the Product Roadmap\nSetting a single product goal is great. But unless you can’t see further than the next few months, I recommend determining the next three to four product goals and capturing them on your product roadmap, as figure 3 below shows.\nFigure 3: Sample GO Product Roadmap with Product Goals\nFigure 3 shows a sample roadmap based on my GO product roadmap template, which contains three product goals. Each goal builds on the previous one thereby nicely progressing the product: The first goal helps the users become aware of their eating habits and creates and initial user base. The second one helps people improve their eating habits and acquires additional users. The third product goal, finally, helps the users improve their overall fitness and generates revenue.\nWhile the Scrum Guide does not mention identifying future product goals and adding them to the product roadmap, I find this practice very helpful: Stakeholders and dev teams usually benefit from understanding how to product is likely to evolve beyond the next two to three months. This helps the individuals create an effective sales and marketing strategy, for example, and to make the right architecture and technology decisions.\nProduct Goals and the Product Backlog\nWith a product roadmap in place, I like to select the product goal to be worked on and copy it from the roadmap to the product backlog together with any coarse-grained features that are associated with the goal. This approach is illustrated by figure 4.\nFigure 4: Product Goal and Product Backlog\nThe beauty of using a product goal in the backlog is that it focuses the latter, as I describe in my article “The Product Roadmap and the Product Backlog.” This addresses a common issue: Many product backlogs I have seen over the years were too big and too detailed. This made them hard to prioritise and difficult to update, which is bad news as long as your product is young or experiences more than small, incremental changes. In most cases, the product backlogs grew so big because they lacked a measure to decide which items should be added to the backlog and which should not. The product goal is this measure: Only add an item to the product backlog if it helps meet the product goal.\nLet’s briefly explore how a product goal might be used on the product backlog. Say I was to start the development of my healthy eating product, I would copy the product goal “Help the users understand their eating habits and acquire an initial user base” into the product backlog together with the features “healthy eating dashboard” and “integration with smart watches and fitness devices.” I’d ask myself which additional features are required to meet the product goal and add these to the backlog. I would the start breaking some of the features into epics and prioritise the product backlog. Finally, I’d refine the high-priority items to be ready to start the first sprint.\nAs you can tell, I like product goals and find them very helpful, and I would encourage you to try them out if you haven’t used them.\n ","url":"https://www.romanpichler.com/blog/product-goals-in-scrum/?replytocom=117897"},{"date_scraped_timestamp":1710925650834,"host":"www.romanpichler.com","page_title":"Product Leadership in Scrum","text":"\n \n Published on 8th May 2018\n \n \n \n \n \n \n \n Product owners can take on too many responsibilities, become too tactical and inward-focused, and lose sight of their main job: maximising the value a product creates. Instead of managing the team or establishing the right process, product owner should manage the product and exercise product leadership, as I explain in this article. \n Three Types of Leadership\nScrum is a simple framework with three roles: product owner, development team, and Scrum Master. Each role provides a distinct type of leadership. As the product owner, you lead the product and are responsible for its overall success. The cross-functional development team makes the design and technology decisions; and the Scrum Master guides process and organisational change, as the following picture shows.\nWhile the three roles exercise different leadership, the people involved must effectively collaborate to achieve product success and align product strategy, roadmap, backlog, design and technology, and process decisions—without losing focus of their respective core responsibility. [1]\nLead the Product\nAs the product owner, you should lead the product and guide the development effort by providing an inspiring vision; a validated product strategy that clearly communicates the product’s value proposition, target group, stand-out features, and business goals; an actionable product roadmap that details the strategy and states how the product is likely to evolve; a prioritised product backlog that captures the functionality required; and by engaging the stakeholders in the right way, for example, inviting them to product strategy and roadmap workshops and sprint review meetings.\nWhile I’d like to encourage you to involve development team members and key stakeholders in the visioning, strategising, and roadmapping work, you should lead these activities with the aim to maximise the value your product creates. This may mean making tough decisions and saying no to some ideas and requests, while trying to be an effective, balanced leader—avoiding the pitfalls of being too authoritarian and not assertive enough.\nProviding the right product leadership is demanding; it requires a specific skills set and usually your full attention as the person in charge of the product. Consider all the things you have to do: be in contact with the users to understand their needs and validate ideas; manage the internal stakeholders and keep them in the loop; regularly review the product strategy and roadmap thereby considering market trends and the competition; work with the development team on the product backlog and answer questions that arise in the sprint; attend the sprint events—and the list goes on. [2]\nNevertheless, product owners often step in and take on additional responsibilities, such as looking after the development team and resolving conflicts in the team, or making design decisions, when the Scrum Master or dev team do not provide the necessary leadership—be it that they lack the time or skills, or that there is no Scrum Master at all. As a consequence, product owners can become too tactical and inward-focused, too concerned with team and process issues, and neglect the strategic product work.\nThis risks no longer seeing the wood for the trees. In the worst case, the strategy is no longer valid, but you do everything you can to steam ahead, asking the team to push out more and more features. On a personal level, taking on additional responsibilities is unhealthy and unsustainable: You will end up overworked if you try and keep up all the product work and take on dev team or Scrum Master duties.\nDo the Right Thing\nAs the product owner, you are not responsible that the team members collaborate and manage their work effectively, that the right user experience (UX) is created, that the right software architecture is used, and that the right technology decisions are made. That’s the job of the development team.\nYou are also not responsible that the right process and methods are used, that impediments are removed, that stakeholders and management understand agile principles and practices, or that the necessary organisational changes are made—be it establishing an effective product management group, adjusting roles and responsibilities, or providing the team with an environment that is conducive to creative work. That’s the responsibility of the Scrum Master.\nWhile it’s great to care, you should refrain from taking on additional responsibilities, as this will only stabilise an ineffective setup: If you can carry out Scrum Master work and look after the team, then why would it be necessary to hire a dedicated, qualified Scrum Master? If you can do the UX design, then why hire a designer?\nAs hard as it may be, say no, provide the right leadership, and focus on your job—achieving product success, not managing the development team or the process.\nNotes\n[1] I have placed user research, sprint goal selection, and product backlog refinement between the product owner and development team in the picture above, as these responsibilities are shared by the two roles in Scrum. You should therefore involve development team members in carrying out user research activities like observing users and listen to their feedback on prototypes and product increments. The same is true for choosing the goal of the next sprint, and making changes to the product backlog including analysing the data, breaking larger items into smaller ones, and getting them ready. This allows you to leverage the knowledge and creativity of the team; and it helps the development team members understand the user needs and make the right design and implementation decisions.\n[2] When you manage a larger or more complex product, carrying out the necessary product work as a single product owner is often impossible. Consequently, you will have to share product leadership amongst a group of people, as I discuss in my article “Scaling the Product Owner Role“. Whatever scaling approach you choose, the basic division of labour stays the same: The product people lead the product, but not the team or process. \n ","url":"https://www.romanpichler.com/blog/product-leadership-in-scrum/"},{"date_scraped_timestamp":1710925572110,"host":"www.romanpichler.com","page_title":"Product Roadmap Prioritisation","text":"\n \n Published on 8th October 2019\n \n \n \n \n \n \n \n Getting the product roadmap prioritisation right is a common challenge. Which items should be addressed first? Which ones can be delayed? This article answers these questions and helps you effectively prioritise your product roadmap. \n \nBefore You Start Prioritising …\nBefore you order the roadmap items, double-check that you have a validated product strategy in place. You should be able to confidently say why users would want to use your product and why it is worthwhile for your company to invest in it. In other words, you should have valid answers to the following questions: \nWhich user problem will the product solve, or which benefit will it provide?How will it create value for the business? For example, will the product directly generate revenue, help market and sell another product or service, reduce cost, or develop the brand?\nIf you haven’t nailed the answers, then do not continue the roadmapping effort. Instead, carry out the necessary product discovery and strategizing work. Otherwise, your roadmap may be built on false assumptions. Getting the prioritisation right will then be virtually impossible.\nCreate a Compelling Narrative\nTo prioritise the product roadmap, consider in which life cycle stage your product is. As long as it hasn’t reached maturity, a product has to constantly move forward: initially to get to launch, then to reach product-market fit, and finally to sustain growth. \nAt these life cycle stages, your product roadmap should tell a convincing story about the likely development of your product; it should describe the journey you want to take it on in order to create the desired value for the users and business. To get the prioritisation right, take the following steps:\nDetermine how you can meet the user and business goals stated in your product strategy. What is the best way to achieve them? How can you break them down into smaller, intermediate goals? Order the newly created goals so that each one is a logical progression, a further step towards the overall user and business goals, considering any dependencies between the goals.\nFor a brand-new product, this might mean that you start with user acquisition followed by activation, retention, and finally revenue generation, depending on your product’s underlying business model. For a product in the growth stage, you might find that you first have to remove technical debt before you can enhance the user experience and increase conversion. \nIf there are items that were on the product roadmap prior to the prioritisation, then check if they help you reach any of the newly created goals. If that’s the case, then assign them to the appropriate objective. Otherwise, either discard the item or investigate if changing the goals to accommodate the items would be beneficial. A cost-benefit analysis might help you with this. \nWhatever you do, make sure that your roadmap tells a cohesive, meaningful story that clearly communicates how the product will create value. \nDetermine the Cost of Delay\nOnce your product has entered the maturity stage, you usually don’t want to take it on another big journey, unless you decide to extend its life cycle. Instead, you stay where you are, protect your product’s position, and maximise the return it generates. \nConsequently, there are often smaller, unconnected goals that need to be addressed, like sustaining engagement or preventing churn by offering incremental enhancements or bug fixes. But these objectives often lack clear connections, and they don’t form a logical sequence or narrative.\nFaced with such a challenge, I recommend using cost of delay to get the prioritisation right. To put it simple, ask yourself how big the loss or severe the disadvantage is likely to be when you delay each item. For example, if you are unsure whether you should first enhance the user experience to sustain engagement or fix bugs to prevent churn, then identify the impact of delaying each goal. \nOnce you’ve determined the cost of postponing the items, address the one with the biggest cost of delay first, then the item with the second biggest cost, and so forth. This should give you the right prioritisation. \nDon’t Let Powerful Stakeholders Dictate the Prioritisation\nThe two approaches described above assume that the user and business needs together with the product’s life cycle stage determine the prioritisation of your product roadmap—not the HIPPO, the highest paid person’s opinion. \nDon’t get me wrong: I am a big advocate collaborative product roadmapping. Do actively involve the key stakeholders and development team members, encourage people to share their ideas and concerns, attentively listen to them, and build shared agreement, as much as possible. \nBut if you are faced with individuals requesting or even demanding that their interests must be first addressed, then do not simply give in. Don’t appease them and don’t avoid a difficult conversation. Instead, patiently listen to them and thank them for telling you about their idea. Then invite them to the next product roadmapping workshop so they can share their request with the other stakeholders and jointly decide if and when it can be addressed. And if the matter is urgent, get everyone together as soon as possible. \nBeing a product professional means making difficult choices, and prioritisation entails saying no. This is an important part of our job, whether we like it or not.\n ","url":"https://www.romanpichler.com/blog/product-roadmap-prioritisation/"},{"date_scraped_timestamp":1710925704588,"host":"www.romanpichler.com","page_title":"Product Teams in Scrum","text":"\n \n Published on 4th May 2022\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is a powerful framework that connects the person in charge of the product with the individuals designing and building it. But it offers limited advice on how to collaborate with the stakeholders and involve them in strategic product decisions. This issue can be addressed by forming a product team that extends the traditional Scrum team, as I explain in this article. \n \nListen to this article:\nWhy the Scrum Team is Not Enough \nScrum is a popular agile framework. Its strength is, at least partly, based on its roles with the Scrum team being the fundamental unit. This team consists of a product owner, a Scrum Master, and several developers, which are also known as development team. Forming such a team connects the person in charge of the product—the product owner—with the people who design, architect, program, test, and document the solution—the developers. It encourages direct interaction and close collaboration between them.\nBut what Scrum lacks, in my mind, is a way to involve the key stakeholders in strategic product decisions. That’s understandable, as the framework is focused on the development of complex products. But from a product management perspective, effectively engaging the stakeholders is crucial to achieving product success. Here is why:\nAs the person in charge of the product, you typically require the stakeholders’ expertise to make the right product decisions. You might not know, for example, which marketing strategy is most appropriate or which sales channels are most effective. Consequently, you’ll benefit from the input of a marketer and a sales rep.\nYou need the stakeholders’ active contribution to progress the product and reach the product goals. The marketer might have to create or update the marketing strategy; the sales rep might have to adapt the sales channels, for instance.\nAs the Scrum product owner, you should therefore establish close and trustful connections with the key stakeholders, collaborate with them, and involve them in important product decisions on a regular basis.\nIntroducing the Product Team\nA great way to achieve this is to form a product team, as shown in Figure 1.\nFigure 1: Product Team in Scrum\nThe product team in Figure 1 consists of the Scrum team and the key stakeholders. These are the “players” whose input you need to make the right product decisions and progress the product, as I explain in the article Getting Stakeholder Engagement Right. For a commercial, revenue-generating product the key stakeholders might include a marketer, sales rep, and customer service rep, for instance. Consequently, a product team is a cross-functional group that comprises everyone required to progress the product and achieve product success.\nForming such a team facilitates direct interaction and close communication between the product owner, the key stakeholders, the development team members, and the Scrum Master. Rather than talking to stakeholders on a one-on-one basis and possibly trying to negotiate a compromise between them, you literally bring the right people together and invite them to share their ideas and concerns with the entire group. This creates a shared understanding and a sense of togetherness, assuming that the group interactions are facilitated well.\nNote that the term product team is used in different ways by different people—much like other product management expressions. Some fellow authors include the stakeholders, for instance, Steve Haines in his book The Product Manager’s Desk Reference, whereas others don’t, for example, Marty Cagan in his book Inspired. I believe that the first definition is more helpful, especially in an agile context.\nTips for Forming Effective Product Teams in Scrum\nAs the product team is meant to be a proper team, a group of people who work towards shared goals and who trust and support each other, you should carefully setup and guide such a team. The following six tips will help you with this.\nOrganise around a product. A product team is best formed around a product . This supports a product-led approach, and it makes it more likely that the team has the necessary autonomy to effectively progress the product.\nForm the product team early on, ideally when you are about to carry out the initial product strategy work for a new product. The team members should stay together for an extended period, preferably for the entire product life cycle. This creates stability and continuity. It allows people to get to know each other, build trust, and work together effectively; and it avoids costly handoffs and loss of knowledge.\nBring the members together on a regular basis, be it online or onsite. Invite the individuals to product strategy review meetings and sprint reviews. This ensures that the members are involved in strategic and tactical product decisions and have a holistic understanding of how the product is evolving.\nInvest in team building. This does not necessarily have to involve big days out. Having coffee or lunch together and checking-in at the beginning of meetings can be effective ways to help people get to know each other. Without sufficient trust, people will struggle to work together well.\nAlign the product team members through shared goals. Use a product vision; a product strategy with user needs and business goals; and a product roadmap with product goals (aka. outcomes). Involve the team members in setting, reviewing, and adapting the plans and goals. Finally, don’t forget to hold people accountable for meeting them, assuming that they have agreed to them.\nAsk the Scrum Master to support you. This includes facilitating joint meetings and helping you address issues that might arise such as disagreements and conflicts.\nProduct Teams in Scaled Environments\nIf you work on a large product that is developed by several teams, you can form a product team by involving representatives from each development team as well as the other product people who manage the product together with you. Figure 2 illustrates this approach.\nFigure 2: Sample Scaled Product Team\nThe product team in Figure 2 includes two feature owners and representatives from the development teams in addition to the overall product owner, stakeholders, and Scrum Master. As a rule of thumb, involve two people from each dev team who are nominated by their peers. This avoids the risk that the product team grows too big and that working together and practising collaborative decision-making becomes too challenging.\nIf you find that you still end up with a product team that is significantly larger than twelve people, then investigate if all stakeholders on the team are truly players and if there is an opportunity to de-scale, to reduce the size of the product and the corresponding product team, for example, by unbundling features or creating product variants, which are techniques that I explain in my book Strategize.\n ","url":"https://www.romanpichler.com/blog/product-teams-in-scrum/"},{"date_scraped_timestamp":1710925556959,"host":"www.romanpichler.com","page_title":"Product Vision Board Checklist","text":"\n \n Published on 31st January 2023\n \n Last Updated on: 31 Jan 2024\n \n \n \n \n \n \n I designed the product vision board to be a simple yet effective tool to capture the product vision and the product strategy. Despite its simplicity, it's not always easy to effectively apply it. This article introduces a checklist to help you get the most out of the tool. \n \nOverview\nThe product vision board offers five sections. The vision captures the ultimate purpose for offering a product. The target group characterises the product’s users and customers. The needs describe the problem the product should address or the benefit it should offer. The product section states its standout features. The business goals capture the desired benefits the product should achieve for the company developing and providing it.\nThe checklist below states criteria to get the five elements of the product vision board right. Additionally, it offers criteria that apply to the entire board or its bottom sections. You can download the checklist together with the product vision board template by clicking on the image below.\nIf you are new to the product vision board, then I recommend that you read the article The Product Vision Board or watch my YouTube video called Product Vision Board Introduction before you use the checklist.\nVision\nInspiring: Describes the positive change the product should create.\nShared: Unites people and creates alignment.\nEthical: Gives rise to a product that does not cause any harm to people and the planet.\nConcise: Easy to understand and remember.\nAmbitious: Describes a big, audacious goal that might never be fully reached.\nEnduring: Provides guidance for the next five to ten years and is free from assumptions about the solution.\nTarget Group\nClear: The target group is clearly characterised, for example, by using demographics and behavioural attributes.\nSpecific: You can tell if somebody is included in the target group or not.\nCohesive: The members of a target group share similar attributes, e.g., age, lifestyle, disposable income. If that’s not the case, then break up the target group and form several subgroups.\nNeeds\nOutcome-based: Capture the reason why people would want to use the product. Describe what success looks like from the perspectives of the users and customers.\nSpecific: The needs are detailed enough so that you can validate them.\nFocused: Concentrate on the main problem/benefit, the main reason for people to use the product.\nPrioritised: If you do identify several needs, prioritise them according to their importance for the target group.\nProduct\nType: It’s clear what kind of product you want to offer, for example, mobile app on Android and iOS.\nDifferentiated: The aspects of your product that make it stand out, set it apart from alternative offerings are stated.\nFocused: There are no more than five standout features.\nBig: The features are coarse-grained product capabilities; no epics and user stories!\nBusiness Goals\nOutcome-based: The desired business benefits, the company’s reason for investing in the product, are clearly described, for example, generating revenue, increasing brand equity, reducing cost.\nSpecific: The business goals are detailed; state rough targets if possible.\nPrioritised: If more than one business goal is identified, order them according to their business impact.\nOverall Criteria\nNeeds-first: Start with the needs after you’ve captured the vision especially when you create a new strategy—be it for a brand-new product or for an existing one. An example for the latter would be a life cycle extension, for instance, by addressing a new market.\nValidated: The statements in the Target Group, Needs, Product, and Business Goal sections does not contain any major hypotheses and risks. They have been successfully validated, for instance, by interviewing and observing target users, building throwaway prototypes, and carrying out competitive analysis.\nAdaptive: The product vision board is regularly inspected and adapted, at least once every three months as a rule of thumb.\nShared: The key stakeholders and development team members have a shared understanding of the product vision board contents.\nConnected: The strategy captured on the board is systematically connected to more specific outcomes, preferably to an outcome-based, goal-oriented product roadmap like my GO Product Roadmap.\n ","url":"https://www.romanpichler.com/blog/product-vision-board-checklist/"},{"date_scraped_timestamp":1710925732075,"host":"www.romanpichler.com","page_title":"Product Vision and Strategy Archives","text":"\n \n The Strategy Stack: Connecting Business, Product, and Technology Strategy\n \n Published: 12 Mar 2024\n \n For any business to succeed, it is crucial to make the right strategic choices. To achieve this, you’ll benefit from using four different types of strategies: business, portfolio, product, and technology strategy. But that’s not enough. You’ll also have to successfully align the plans. To help you address these challenges, I have developed a new framework, the Strategy Stack, which I introduce in this article.\n Read more\n \n \n Everything You Need to Know about Product Portfolio Strategy\n \n Published: 22 Jan 2024\n Last Updated on: 26 Jan 2024\n \n Products often don’t exist in isolation. Instead, they are part of a product portfolio. Think of Word, Excel, and PowerPoint, which belong to Microsoft Office. Such a portfolio benefits from having a dedicated strategy—a product portfolio strategy. But what information should it contain? Which template can you use to describe it? How does it relate to the overall product portfolio management work? And who should create and update the strategy? Read on to find out my answers.\n Read more\n \n \n Product Strategy and Product Discovery\n \n Published: 4 Dec 2023\n Last Updated on: 1 Mar 2024\n \n Product discovery has become increasingly popular in recent years as a way to determine the right solution. In this article, I explain why you need a product strategy to succeed with product discovery, how the strategy helps you determine the right outcomes and opportunities, and how you can use the Product Vision Board to build an Opportunity Solution Tree. \n Read more\n \n \n 10 Product Strategy Mistakes to Avoid\n \n Published: 15 Aug 2023\n Last Updated on: 7 Feb 2024\n \n The product strategy is an important product management artefact. But despite its significance, it is not always effectively used. In this article, I discuss ten common strategy mistakes I see people make so you can avoid them and successfully leverage the product strategy. \n Read more\n \n \n Double Vision: Choosing the Right Approach to Capture the Product Vision\n \n Published: 4 Jul 2023\n \n The product vision plays a crucial part in achieving product success: It sets a shared direction and helps create strong alignment. Despite its importance, there are two competing views of what a product vision is and how it should be captured. In this article, I discuss the different approaches and explain which one I recommend.\n Read more\n ","url":"https://www.romanpichler.com/blog/category/product-vision-and-strategy/"},{"date_scraped_timestamp":1710925527415,"host":"www.romanpichler.com","page_title":"Release Planning Advice","text":"\n \n Published on 7th January 2020\n \n \n \n \n \n \n \n Release planning is an important task for product people working with agile teams: It ensures that the product is moving in the right direction and it connects strategy and tactics. Despite its importance, release planning is not always effectively practiced in my experience. This article shares my advice to help you reflect on your release planning practices and improve them. \n \nWhat Release Planning Entails and Why It Matters\nWhile release and release planning are common terms, I find that different individuals attribute different meanings to them. I regard a release as a version of a product, for example, Mac OS X Catalina and Windows 10. Releases come in two flavours: major releases, like iOS 13, and minor releases, such as iOS 13.3. \nRelease planning is the process of determining the\ndesired outcome of one or more major releases and maximising the chances of\nachieving it. This involves the following:\nEstablishing clear, specific, and measurable goals. that describe the outcomes or benefits your product should create. I call these goals product goals (and sometimes release goal). I like to capture them on a product roadmap.Determining the work to be done. This typically involves the development team providing rough, high-level estimates.Understanding date and budget constraints: Are there any hard deadlines that must be met, or is the budget fixed?Monitoring progress from sprint to sprint and making adjustments as required. In Scrum, release planning is carried out iteratively, often at the end of a sprint when it’s clear how much the progress was made.\nRelease planning enables organisations to make informed investment decisions; it sets expectations, aligns stakeholders and development teams; and it allows product people to guide the work of the dev team. \nIt is therefore in your best interest—as the person in charge of the product—to make sure that release planning is effectively carried out. This requires you to actively engage in the work, rather than delegating it to the development team or Scrum Master.\nUse a Product Roadmap to Plan Multiple Releases\nRelease planning takes place at two levels: across several product versions (major releases) and within a single one. The former can be nicely done with a product roadmap. My preference is to work with a goal-oriented roadmap, like my GO Product Roadmap shown below, that states the desired benefits or outcomes of each major release for the next 12 months. Sample goals include acquiring new users, increasing conversion, reducing cost, and removing technical debt to future proof the product. \nThe goals on your product roadmap should tell a compelling story about the likely development of your product. They should describe the journey you want to take it on in order to create value for the users and the business, as I explain in more detail in the article “Product Roadmap Prioritisation”. Such a roadmap provides a continuity of purpose and ensure that individual releases build on each other thereby progressing and enhancing the product in a systematic way. What’s more, the roadmap goals help you focus the product backlog by limiting its content to items that are necessary to meet the next product goal.\nBut don’t forget to regularly review the product roadmap—at least once every three months, as a rule of thumb. As you learn more about the development team’s ability to make progress and better understand how to best meet the user and business needs, you will need to update your roadmap. This ensures that the plan stays actionable and provides the necessary guidance to the stakeholders and dev team.\nPrioritise the Success Factors for Your Releases\nIn an ideal world, the development team will deliver all the releases on the product roadmap on time and on budget. But in reality, unforeseen things do happen. The development progress may not be as fast as anticipated, for instance, or one of the technologies may not work as expected. \nTo maximise the chances of success, I recommend that you prioritise goal, date, and budget for the releases captured on your product roadmap. One way to do this is to determine the impact of not (fully) meeting a goal, missing the desired release date, and exceeding the budget. Then fix the most important factor—the factor that would cause the biggest damage if you don’t adhere to and therefore has the biggest impact on the success of the product. Try to protect the second most important factor, the one that would create the second biggest damage. Finally, be flexible with the third one, the factor that has the least impact on the success of a major release.\nYou might have noticed that I haven’t mentioned quality. There’s a reason for it: Quality should be fixed and not be compromised. Otherwise, responding to user feedback and changing market conditions and quickly adapting your product will be hard, if not impossible.\nEmploy the Right Estimation Approaches\nEstimating the cost of the releases on your product roadmap is helpful to acquire the necessary budget or, if your budget is fixed, understand if the roadmap is realistic and actionable—if the development team can actually implement it. Rough, high-level estimates are usually sufficient to meet this objective.\nTo come up with the estimates, draw on your experience of\ndeveloping similar products or previous versions of the same product; consider\nwhether enough people with the right expertise are available in your company,\nor if you will have to hire or contract people. This should give you an\nindication of the likely labour cost required. Then add the cost for\nfacilities, infrastructure, materials, licenses, and other relevant items.\nCarry out this exercise together with the development team.\nIf you believe that the resulting estimates will be too vague, consider the alternative: Breaking the roadmap features upfront into epics and user stories will result in a long, detailed product backlog that is difficult to adjust and maintain. Additionally, this process can take days—and in some cases weeks—in my experience. And while you will get more detailed estimates, they will not be accurate at this stage.\nOnce you have secured the necessary budget and ensured that the releases on your roadmap are realistic, take the next step and stock the product backlog. As I explain in the article “The Product Roadmap and the Product Backlog”, I like to focus the backlog on the upcoming release and the next roadmap goal. To follow this approach, derive epics from the features that belong to the appropriate goal. Then explore which additional pieces of functionality the release has to offer and add them as epics to the product backlog. Finally, prioritise the items and refine the high-priority ones. This should result in a concise, compact backlog that is comparatively easy to adapt and that offers enough ready, high-priority items. Don’t forget to involve the development team in this exercise. \nAdditionally, ask the team to estimate the product backlog items. This might be done by using story points and Planning Poker, as explained in Mike Cohn’s book Agile Estimating and Planning.\nUse a Release Burndown Chart to Track Progress\nThe release burndown chart is a simple yet powerful tool to track and forecast the progress for a release. Despite its usefulness, experience tells me that many Scrum product owners don’t use the burndown. But creating the chart is simple. Start by asking the development team to estimate the total amount of the product backlog items that should be part of the release. Rough, high-level estimates are sufficient. Then draw a coordinate system that takes into account time, captured as sprints, and effort in the product backlog, which might be expressed as story points. \nThe first data point is the estimated effort before any development has taken place. To arrive at the next data point, determine the remaining effort in the product backlog at the end of the first sprint. Then draw a line through the two points. This line is called the burndown. It shows the rate at which the effort in the product backlog is consumed. It is influenced by two factors: changes in the product backlog and velocity, which is the development team’s ability to make progress. Extending the burndown line to the horizontal axis allows you to forecast when the development effort is likely to finish, or if you are likely to reach the product goal and deliver all relevant product backlog items at a specific date. \nThe release burndown chart above shows two lines. The solid\nline is the actual burndown. It documents the progress to date and the effort\nremaining. The dotted one is the forecasted progress based on the burndown\nexperienced so far. Notice that the burndown in the second sprint is flat. This\nmight be caused by new items being added to the product backlog or the dev team\nrevising estimates.\nTo achieve a forecast that is as accurate as possible, try\nthe following three tips:\nBase your forecast on a trend rather than a single sprint. This usually requires you to run two to three sprints before you can create the first forecast for a release. Consider how representative the burndown of the past sprints is for the remaining sprints. In the example shown above, the second sprint has a flat burndown. This might be due to more items being added to the product backlog based on the first sprint review meeting or the dev team re-estimating items. To get the forecast right, it would be worth considering how likely it is that another flat burndown will occur again and to which extent you should account for it. If you decided that it was highly unlikely to reoccur, your forecast in the sample chart above would probably be steeper. Make sure that you prioritise the product backlog by risk, particularly in the early sprints. This makes it more likely that the backlog changes in the first few sprints and then starts to stabilise. This makes forecasting the remainder of the development effort easier and results in a more accurate forecast.\nIf the forecast shows that you are off-track, that the burndown is slower than anticipated, then determine the causes. For example, the development team might lack some crucial skills, the team might be too small, a technology might not work as expected, you might have been too optimistic, or the initial estimates might have been wrong. Once you’ve identified the main cause, decide how to respond. The prioritisation of goal, time, and cost recommended above will help you with this.\nNote that if you have to push out the release date or make a bigger change to the goal of the release, this may have an impact on your product roadmap and require you to adjust it.\nMake Release Planning Collaborative\nRelease planning is best done as a collaborative effort in my experience by involving the stakeholders and the development team, as the picture below illustrates. To do so, schedule regular roadmapping sessions, possibly as part of your strategy review process and invite key stakeholders and development team members. Additionally, update and discuss the release burndown chart in the sprint review meetings where the same individuals should be present. \nThis ensures that the longer-term and short-term release planning decisions are made with the input from the stakeholders and dev team. This tends to lead to better plans, stronger alignment, and increased commitment to implement the decisions. \n ","url":"https://www.romanpichler.com/blog/release-planning-advice/"},{"date_scraped_timestamp":1710925701400,"host":"www.romanpichler.com","page_title":"Seven Product Backlog Mistakes to Avoid","text":"\n \n Published on 5th October 2021\n \n \n \n \n \n \n \n The product backlog is a simple yet powerful tool to capture and revise detailed product decisions and direct the work of the development team. Unfortunately, effectively using the backlog can be challenging. This article discusses seven common product backlog mistakes to help you recognise and fix them. \n \nThe Product Backlog is Too Big\nA few years ago, I was asked to help a healthcare company with their agile transition and its impact on product management. One of the challenges the agile transition team was concerned about was the choice of the right product backlog tool, which at first seemed odd to me. But when I was told that the backlog in question had over 40,000 items, I could see that there was an issue.\nAdmittedly, that’s by far the largest product backlog I have come across to date. But I find it not uncommon to encounter backlogs that range from several hundred to a few thousand items. But such a product backlog is difficult to comprehend, let alone prioritise and update. This is problematic especially for young products and those that experience a bigger change, like a life cycle extension, as their backlogs tend to be volatile and require frequent and sometimes bigger adjustments.\nYou should therefore strive to keep your product backlog as concise as possible whenever your product faces uncertainty and change—be it market, business, or technology related. The following three techniques will help you with this: First, group related items into themes. Second, keep lower-priority items coarse grained. Third and most importantly, focus the backlog on a specific product goal. Then decline and remove items that do not serve this goal, as I discuss below.\nThe Product Backlog is Too Detailed\nAnother time, I was asked to help a team of a major charity in the UK whose task was to create a new website for their fund-raising campaigns. The product owner told me that she’d refined the product backlog as well as she could but that the development team were still not happy with it. Looking at the backlog, I noticed that it contained only detailed user stories—no epics or other coarse-grained items.\nBut an overly detailed product backlog makes it hard to see the wood for the trees: There is simply too much information. This, in turn, makes it difficult to prioritise and update the artefact. What’s more, it is likely to contain speculative and ultimately wrong items, especially when the development effort is characterised by uncertainty and change.\nI therefore recommend that you start with an initial product backlog that is intentionally sketchy and incomplete, especially when your product is young or experiences a bigger change. Then let the backlog evolve based on the feedback received from users, customers, and stakeholders. This allows you to minimise the effort to stock the product backlog and to base your product decisions on empirical evidence, rather than gut-feeling.\nThe Product Backlog is Not Appropriately Refined\nA while back, I was working with a company that connects consumers in the UK with a tradesperson like a plumber or gardener. Back then, the company was still a startup, and the product owner had asked me to help them address a planning issue: The development team routinely overcommitted and never managed complete all the work in a sprint.\nWhen I was shown around the office, I saw some paper cards on the wall with big, sketchy epics on them, and I asked the product owner if these were part of the product backlog. The individual replied, “No, this is the product backlog.” Given that the backlog did not contain any sufficiently refined, ready items I was no longer surprised that the development team struggled to get sprint planning right.\nWhile you don’t want to make your product backlog any more detailed than necessary, you should ensure that its high-priority items are ready. This requires them to fulfil the following three criteria: First, they are sufficiently clear and understood by the development team. Second, they can be completed in a sprint according to the Definition of Done. Third, they can be tested. Getting the high-priority items ready is best done together with (some of) the development team members, as I discuss below.\nThe Product Backlog is a Wish List\nSome product backlogs—like the one with 40,000 items mentioned above—resemble a wish list, a catalogue that contains anything and everything that you might ever need. The trouble with such a backlog is not only that it is usually too big. It also results in a “feature soup,” a product that resembles a loose collection of unrelated features. This leads to a weak value proposition and a poor user experience, which are hardly hallmarks of a great product.\nBut if these backlogs are so bad, why do they exist? There are two main reasons: First, a lack of strategic alignment and focus, and second, a lack of empowerment. The former means that there is no product goal that guides the decision if an item should be added to the product backlog or not. You might, for example, brainstorm user stories and decide to add all of them. Who knows, they might come in handy at some point in time!\nA lack of empowerment causes you, the product owner, to have a hard time declining stakeholders requests and to feel obliged to accommodate them. But if you are not able to say no, your product backlog is in danger of serving individual stakeholders and their personal goals—rather than maximise the value the product creates for the users and the business.\nTo prevent your product backlog from becoming a wish list, follow these two tips: First, select a product goal and align your product with a strategic plan like a product roadmap (as I discuss below). Second, have the courage to say no. Decline any ideas and requests that are not aligned with the product goal. (See my article Boost Your Product Leadership Power for advice on increasing your authority.)\nThe Product Backlog is Not Effectively Prioritised\nSome time ago, I was working with the product manager of a new healthcare product when I suggested to prioritise its features. The individual looked at me surprised and replied, “I can’t. They are all high-priority.” Prioritisation, of course, requires deciding how important an item is. If everything is high priority, everything is equally important. This means in effect that nothing is a priority. But without clear priorities, the development team lacks direction.\nIf you struggle to prioritise your product backlog, try the following two measures: First, ensure that the product backlog items serve a specific product goal, as mentioned before. Second, select a small set of practical prioritisation factors. The three factors I like to recommend are risk, cost-benefit, and dependencies.\nHere is how you can apply them: Initially prioritise the product backlog by risk and consider user, technology, and business-related risks. Assess all backlog items together with the development team and move those to the top that carry the highest risk. This approach accelerates learning, and it avoids failing late when changing course is more costly. Once you’ve addressed the key risks, order the product backlog by cost-benefit, and move those items to the top that give you the biggest bang for the buck, as the saying goes. Finally, don’t forget to consider dependencies whilst using the other two factors. These include dependencies on individual team members and on other teams, as these can influence the backlog prioritisation.\nThe Product Backlog is Not Shared\nA few years ago, I was working with a group of product owners based in the Netherlands who wanted their development teams to get better at delivering what they asked for. It turned out that the product owners refined the product backlogs and wrote user stories on their own and then handed off the high-priority items to the dev teams who were based in Romania. The teams did their best to correctly interpret the user stories. But more often than not, they got it wrong, as they had little knowledge about the end users and their needs.\nWhile a lack of collaboration in the situation described might be obvious to an outsider, I find it not uncommon that development teams aren’t properly involved in the product backlog work. But refining, prioritising, and updating the backlog should be teamwork, as shown in the picture below. As the product owner, invite the development team members to work with you on the backlog, and expect that they will support you. If that’s not the case, then discuss the issue in the next sprint retrospective.\nCollaborative Product Backlog Workshop\nCollaboratively working on the product backlog and co-creating its items offers the following two benefits: First, it leverages the collective knowledge and creativity of the development team, which usually leads to better backlog items—items that are just as detailed as they have to be. At the same time, it allows you as the person in charge of the product to transfer knowledge about the users and their needs to the dev team.\nSecond, it makes the team members feel valued and respected. It empowers the individuals and increases their motivation to work on the product. People are no longer handed requirements to be worked on. They now contribute to the product decisions and help shape the solution.\nIf you don’t regularly work on the product backlog together with at least some of the dev team members, then give it a go. Set up a collaborative workshop, be it onsite or online, and ask your Scrum Master to facilitate. Initially, this might require you to spend more time working on the product backlog. But in the longer run, it should reduce your workload. It might even result in the development team being happy to do some of the refinement work on their own.\nThe Product Backlog Lacks Strategic Alignment\nA common product backlog mistake and a root cause of several mistakes discussed above is a lack of strategic alignment: The backlog is not systematically connected to a strategic plan like a product roadmap. But without strategic guidance and a clear product goal that governs it, the backlog can easily grow too be, become hard to prioritise, and turn into a wish list. This was also the case for the huge product backlog I mentioned earlier: The strategic objective of the product was unclear, and this made it hard to determine which items should be added to the backlog.\nI therefore strongly recommend that you connect your product backlog to an actionable product roadmap that states the value the product should create in form of product goals for the next nine to twelve months, as the picture below illustrates. Sample product goals might be acquiring users, increasing conversation, removing technical debt to future-proof the product, and reducing cost.\nProduct Roadmap, Product Backlog, and Product Goal\nIn the picture above, a goal-oriented, outcome-based product roadmap directs the product backlog. This is done by copying the next product goal from the roadmap into the backlog. The goal then helps determine the items that should be included in the product backlog, that is, only those that help meet it. (You can find out more how to the product roadmap and backlog can complement each other in my article The Product Roadmap and the Product Backlog.)\n ","url":"https://www.romanpichler.com/blog/product-backlog-mistakes/"},{"date_scraped_timestamp":1710925622744,"host":"www.romanpichler.com","page_title":"Should Product People be Servant-Leaders?","text":"\n \n Published on 22nd November 2016\n \n Last Updated on: 21 Dec 2021\n \n \n \n \n \n \n Being an effective product professional requires leadership: Product management teams, stakeholders, and development teams need guidance and direction to collaborate and achieve product success. Can the servant-leadership model help you with this challenge? \n What Is Servant-Leadership?\nServant-leadership is a leadership model that is based on the idea that “one wants to serve, to serve first. Then conscious choice brings one to aspire to lead,” writes Robert Greenleaf, the creator of the model. Leaders should “make sure that other people’s highest priority needs are being served” so that they “become healthier, wiser, freer, more autonomous.”\nSounds crazy? To me, servant-leadership means leading from the heart: recognising that genuinely caring for the people we work with and building strong relationships with them are prerequisites for achieving great things together. If we don’t empathise with the people we want to lead, they are unlikely to trust and follow us.\nCaring for the followers, the people we work with, is not unique to servant-leadership. It plays a key part in other leadership approaches, too. Transformational leadership urges leaders to show genuine concern for the needs and feelings of their followers, for example, and Goleman’s leadership styles recognise affiliative leadership as an approach that puts people first. In Scrum, servant-leadership has long been regarded as the default leadership approach embodied by the ScrumMaster.\nCan Servant-Leadership Benefit You?\nServant-leadership encourages you to reflect on our motivation to be a product leader. Why do you aspire to lead others? Is it to succeed together and help the people grow and develop? Or is it to gain status, power, or money?\nThere is nothing wrong with gaining respect plus a bonus or pay rise. But if these motivators dominate your thinking, there is a risk of not primarily caring for the people you lead but rather seeing them as means to advance your ambitions. This will negatively affect your relationship with them and reduce their willingness to trust and follow you.\nServant-leadership also helps you question your approach to achieving success. Is the end—a successful product—more important than the means—how we got there? Do you expect that people just do their job, perform, and deliver? Are working extra hours and weekends normal to get a product out? Or do you take a genuine interest in the people you work with, show kindness to them, and encourage the development team members to go home when they look tired and worn out?\nDon’t get me wrong—I am no utopian. I know that great products are the results of hard work. But if you want sustained success and a work environment that is healthy and conducive to creative work, then you must care for the people you lead. This starts with taking a real interest in the individual, making an effort to be present, and attentively listen to them.\nThe beauty of this approach is that it benefits not only your followers, but it is beneficial for you too. Being kind and caring makes you a happier person, and it increases your referent power. This, in turn, makes it more likely that other trust you and follow your lead.\n ","url":"https://www.romanpichler.com/blog/should-product-owners-be-servant-leaders/"},{"date_scraped_timestamp":1710925549561,"host":"www.romanpichler.com","page_title":"Should a Head of Product Make Strategic Product Decisions?","text":"\n \n Published on 4th April 2023\n \n \n \n \n \n \n \n The head of product role and the product strategy are often linked. But should a head of product make strategic decisions for individual products? Or would it be better to empower the product people to own the product strategy? Read on to find out my advice. \n \nListen to the audio version of this article:\nThe Head of Product Role in a Nutshell\nA head of product manages a group of product people—individuals who look after one or more products and who may be called product managers or product owners. Depending on the company size and org structure, the role might also be referred to as Director of Product Management, VP Product, and Chief Product Officer. Working as a head of product includes the following three duties, as I discuss in more detail in the article What Should a Head of Product Do?\nFirst, develop the individual product people. For example, ensure that the individual’s role and responsibilities are clear; help the person grow as a product professional, be it by coaching and mentoring them or by encouraging them to attend training courses; offer clear and helpful feedback and hold them accountable for meeting agreed goals.\nSecond, develop the product management team. For instance, help the members collaborate, establish shared standards including product management processes, methods, tools, and templates; communicate strategic business objectives; and hire new product people.\nThird, develop the organisation. For example, ensure that the individual product people are sufficiently empowered to succeed in their roles and establish a product-led way of working.\nWhat Happens When the Head of Product Determines the Product Strategy?\nAs you might have noticed, the list above does not mention determining the product strategy. Here is why: When a head of product determines the product strategy on a regular basis, then this is likely to cause the following two issues.\nFirst, the product people don’t have full ownership of their products. Instead, they are focused on the tactics/delivery. In the worst case, they are product backlog managers and user story scribes. This can lead not only to low motivation and high turnover. It can also give rise to what I call a strategy-delivery chasm: Strategic decisions are not effectively translated into tactical ones, and insights from the delivery work are not used to evolve the strategy.\nSecond, the head of product turns into a bottleneck and/or becomes overworked. As the products grow and as new people are added to the product management group, the workload of the individual rises. But there is only so much work someone can cope with, and being overworked for an extended period of time leads to low productivity, mistakes, and health issues.\nThere is, however, a situation when it makes sense for the head of product to determine the product strategy: when the individual is a contributor who manages a product in addition to leading the product management team. This can be an effective short-term fix, for example, to compensate for the lack of experienced product people on the team. But as a permanent solution, this approach is not advisable: It is likely to cause the second of the two issues mentioned earlier.\nHow the Head of Product Can Help Achieve Product Success\nIf a head of product should avoid making strategic product decisions, how can the individual then ensure that a product creates as much value as possible? Here is my answer: By enabling and empowering the product people to own the strategies of their products. The following four measures will help with this:\nFirst, develop the individual product people through training, mentoring, or coaching. This includes securing the necessary training budget and selecting the right training courses, as well as creating a training-on-the-job program, attending product strategy workshops as a stakeholder, and acting as a sparring partner for strategy-related questions. Note that this assumes that the head of product has the expertise required to offer the right advice—which I regard as a prerequisite for taking on the role.\nSecond, help create shared standards to facilitate collaboration amongst the product team members. Agree on how a product strategy is described and in which tool is it captured; how it is validated; how often it is reviewed; and to which extent stakeholders and development team members are involved in the process. You might decide, for example, to follow my approach, use the product vision board to describe the product strategy, iteratively validate an initial strategy, review the plan at least every three months, and carry out the work collaboratively by involving the key stakeholders and dev team representatives.\nAdditionally, decide how products are managed that require more than a single product person. For instance, you might choose to have one overall product manager/owner and additional product people who look after product parts like end-user facing product capabilities/features.\nThird, make sure that the product portfolio is proactively managed, that the individual product strategies and product roadmaps are harmonised, that major releases are coordinated, and that dependencies and conflicts between the products are addressed. For smaller portfolios, the head of product can typically carry out the portfolio management work. For larger ones, a dedicated product portfolio manager should do the work, join the product management team, and report to the head of product. This avoids the risk that the head of product becomes a bottleneck or overworked.\nFinally, ensure that the product people are aware of and understand the business strategy together with the overarching business objectives that constrain the strategic product decisions. To do this, participate in creating, reviewing, and updating the business strategy as part of the leadership/executive team and communicate the plan to the product management team.\nSummary\nAs the head of product, avoid determining the strategy for an individual product on a permanent basis. Instead, empower the product people you lead to make the strategic product decisions. Offer advice and feedback. But let the individuals own the product strategy and hold them accountable for maximising the value of their products. Additionally, ensure that the product portfolio is managed, and that the business strategy is clear to everyone on the product management team. This way you’ll support the individuals and help them do a great job.\n ","url":"https://www.romanpichler.com/blog/head-of-product-and-product-strategy/"},{"date_scraped_timestamp":1710925722045,"host":"www.romanpichler.com","page_title":"Six Qualities of a Great Product Vision","text":"\n \n Published on 9th March 2022\n \n \n \n \n \n \n \n The product vision can be a powerful tool to align stakeholders and development teams. When used effectively, it acts as the product’s true north, and it inspires and guides people. This article helps you create such a vision. It describes six essential qualities that a compelling product vision has to have. \n \nListen to this article:\nInspiring\nAn inspiring vision creates a meaningful purpose for everyone involved in making the product a success including the stakeholders and development team members. It helps people understand how their work relates to a bigger whole and how their efforts create a positive change.\nIt also allows you, as the person in charge of the product, to understand if dedicating your time and energy to the offering is worthwhile and sustainable. If the vision resonates with you, then this will help you do a great job, especially when the going gets tough. If that’s not the case, then you should maybe look for a different challenge. As Steve Jobs once said, “If you are working on something that you really care about, you don’t have to be pushed. The vision pulls you.”\nAdditionally, an inspiring vision helps you apply a visionary leadership style and become a visionary leader—someone who guides others through a big, motivating goal.\nA shared vision unites people. It creates alignment, and it facilitates collaboration. A vision is shared when the stakeholders and development team members support the goal and are happy to work towards it. If that’s not the case, then it will be difficult to encourage the individuals to agree to more specific goals and to follow a product strategy and a product roadmap that are based on the vision.\nA great way to ensure that your vision is shared is to create it together with the stakeholders and dev team members in a collaborative workshop, be it online or onsite. Encourage the participants to describe the purpose that they associate with the product. Then look for a product vision that everyone can support.\nVisioning Workshop Attendees\nAs the vision is truly fundamental, you should take the time required to create an inclusive goal that resonates with everyone. Resist the temptation to shortcut or rush the decision-making process. Similarly, don’t allow the most powerful person to dominate and don’t make the mistake of agreeing on the smallest common denominator. Otherwise, you’ll end up with an ineffective vision that fails to inspire and guide people. Ask the Scrum Master or agile coach to facilitate so you can focus on shaping the vision and you don’t have to ensure  that everyone is heard and that nobody hijacks the decision-making process. (See my article Making Effective Product Decisions for more advice on how to decide together with stakeholders and dev teams.)\nEthical\nAn ethical vision gives rise to a product that benefits its users and customers and that does not cause any harm to people and planet. This includes not affecting people’s mental health, for instance, by getting them hooked or offering content that promotes misinformation, self-harm, hatred, and violence.\nAdditionally, an ethical product does not contribute to climate change, and it does not damage the environment by how it is developed, provided, and if it includes hardware, manufactured, delivered, and disposed of.\nWhile the vision alone doesn’t achieve ethicality, it plays a crucial role, as it describes the intention for offering the product. You ultimately have to ask yourself why you want to provide the product. Is it to help others, or is it to maximise your own benefits?\nConcise\nA concise product vision is easy to communicate, understand, and remember. To achieve this, I like to capture the vision as a brief statement or a slogan—a short, catchy phrase. An example for a product that helps people improve their eating habits might be “help people eat healthily.”\nA handy tool to describe the vision is my product vision board. The board, shown in the picture below, captures the vision in the top section and the strategy in the four sections underneath it. You can download the board from the tools section of my website and by clicking on the image.\nAmbitious\nYou can think of the product vision as a big, hairy, audacious goal (BHAG). Such a vision increases the chances of providing a continuous purpose in an ever-changing world, compared to a narrow, specific one. \nI would therefore choose a big, ambitious vision like “help people eat healthily” over a more specific, narrower one like “help people lose weight.” Note that such a product vision is not measurable. It truly is an inspirational, grand goal.\nEnduring\nDespite its name, a product vision should not describe the product or solution. For example, “offer a weight loss mobile app” and “become the number one weight loss app provider” are not effective visions. Instead of referring to the product, state the positive change you want to bring about, such as “healthy eating.”\nA solution-agnostic vision allows you to change the product strategy but keep your vision stable. Say that it turns out that my idea of developing a healthy-eating app is ill conceived. With a vision like “healthy eating,” I can explore alternatives, for example, writing a book on healthy eating and offering healthy-eating workshops.\nA vision that is not tied to a product can therefore provide direction for an extended period, say five to ten years, during which the product strategy and the product change and evolve. To say it with Jeff Bezos’ words, “be stubborn on the vision and flexible on the details.”\n ","url":"https://www.romanpichler.com/blog/six-qualities-of-a-great-product-vision/?replytocom=126877"},{"date_scraped_timestamp":1710925719823,"host":"www.romanpichler.com","page_title":"Six Qualities of a Great Product Vision","text":"\n \n Published on 9th March 2022\n \n \n \n \n \n \n \n The product vision can be a powerful tool to align stakeholders and development teams. When used effectively, it acts as the product’s true north, and it inspires and guides people. This article helps you create such a vision. It describes six essential qualities that a compelling product vision has to have. \n \nListen to this article:\nInspiring\nAn inspiring vision creates a meaningful purpose for everyone involved in making the product a success including the stakeholders and development team members. It helps people understand how their work relates to a bigger whole and how their efforts create a positive change.\nIt also allows you, as the person in charge of the product, to understand if dedicating your time and energy to the offering is worthwhile and sustainable. If the vision resonates with you, then this will help you do a great job, especially when the going gets tough. If that’s not the case, then you should maybe look for a different challenge. As Steve Jobs once said, “If you are working on something that you really care about, you don’t have to be pushed. The vision pulls you.”\nAdditionally, an inspiring vision helps you apply a visionary leadership style and become a visionary leader—someone who guides others through a big, motivating goal.\nA shared vision unites people. It creates alignment, and it facilitates collaboration. A vision is shared when the stakeholders and development team members support the goal and are happy to work towards it. If that’s not the case, then it will be difficult to encourage the individuals to agree to more specific goals and to follow a product strategy and a product roadmap that are based on the vision.\nA great way to ensure that your vision is shared is to create it together with the stakeholders and dev team members in a collaborative workshop, be it online or onsite. Encourage the participants to describe the purpose that they associate with the product. Then look for a product vision that everyone can support.\nVisioning Workshop Attendees\nAs the vision is truly fundamental, you should take the time required to create an inclusive goal that resonates with everyone. Resist the temptation to shortcut or rush the decision-making process. Similarly, don’t allow the most powerful person to dominate and don’t make the mistake of agreeing on the smallest common denominator. Otherwise, you’ll end up with an ineffective vision that fails to inspire and guide people. Ask the Scrum Master or agile coach to facilitate so you can focus on shaping the vision and you don’t have to ensure  that everyone is heard and that nobody hijacks the decision-making process. (See my article Making Effective Product Decisions for more advice on how to decide together with stakeholders and dev teams.)\nEthical\nAn ethical vision gives rise to a product that benefits its users and customers and that does not cause any harm to people and planet. This includes not affecting people’s mental health, for instance, by getting them hooked or offering content that promotes misinformation, self-harm, hatred, and violence.\nAdditionally, an ethical product does not contribute to climate change, and it does not damage the environment by how it is developed, provided, and if it includes hardware, manufactured, delivered, and disposed of.\nWhile the vision alone doesn’t achieve ethicality, it plays a crucial role, as it describes the intention for offering the product. You ultimately have to ask yourself why you want to provide the product. Is it to help others, or is it to maximise your own benefits?\nConcise\nA concise product vision is easy to communicate, understand, and remember. To achieve this, I like to capture the vision as a brief statement or a slogan—a short, catchy phrase. An example for a product that helps people improve their eating habits might be “help people eat healthily.”\nA handy tool to describe the vision is my product vision board. The board, shown in the picture below, captures the vision in the top section and the strategy in the four sections underneath it. You can download the board from the tools section of my website and by clicking on the image.\nAmbitious\nYou can think of the product vision as a big, hairy, audacious goal (BHAG). Such a vision increases the chances of providing a continuous purpose in an ever-changing world, compared to a narrow, specific one. \nI would therefore choose a big, ambitious vision like “help people eat healthily” over a more specific, narrower one like “help people lose weight.” Note that such a product vision is not measurable. It truly is an inspirational, grand goal.\nEnduring\nDespite its name, a product vision should not describe the product or solution. For example, “offer a weight loss mobile app” and “become the number one weight loss app provider” are not effective visions. Instead of referring to the product, state the positive change you want to bring about, such as “healthy eating.”\nA solution-agnostic vision allows you to change the product strategy but keep your vision stable. Say that it turns out that my idea of developing a healthy-eating app is ill conceived. With a vision like “healthy eating,” I can explore alternatives, for example, writing a book on healthy eating and offering healthy-eating workshops.\nA vision that is not tied to a product can therefore provide direction for an extended period, say five to ten years, during which the product strategy and the product change and evolve. To say it with Jeff Bezos’ words, “be stubborn on the vision and flexible on the details.”\n ","url":"https://www.romanpichler.com/blog/six-qualities-of-a-great-product-vision/?replytocom=140358"},{"date_scraped_timestamp":1710925706457,"host":"www.romanpichler.com","page_title":"Six Types of “Product” Owners","text":"\n \n Published on 5th May 2020\n \n Last Updated on: 22 Jan 2024\n \n \n \n \n \n \n While the product owner role is not new—it emerged in Scrum in the second half of the 1990ies—there is still confusion about what it means to be a product owner. It’s not uncommon for me to meet someone who refers to themself as a product owner, only to discover that they own a product part but not the entire product. Other times, I meet someone who says they are a product owner. But it turns out that the person manages several products, an entire product portfolio. This article helps you reflect on and improve the way the product owner role is applied at your workplace. It describes six common types of “product” owners. It shows how the roles differ and relate to each other, and it explains how you can effectively apply them. \n \nListen to this article:\nOverview\nThe term product owner is commonly used to refer to six different product roles in my experience. These are: \nThe original Scrum product owner who owns a product in its entirety and is responsible for maximising the value it creates.\nA feature owner who manages a major capability with which end users interact like search and navigation on an online retailer’s website.\nA component owner who owns an architecture building block like the persistence layer.\nA platform owner who manages a platform as a collection of shared software assets.\nThe SAFe product owner who owns the product details.\nA portfolio owner who manages a group of (related) products. \nEach of the roles above is a product management role; anybody playing one of the roles takes on product ownership; and each role can be exciting and rewarding. None is per se better or worse. But as indicated, the ownership scope significantly differs and with it, the empowerment and skills required to succeed. \nThe following picture provides an overview of the six roles, which I describe in more detail in the sections below.\nNote that some of the roles above can be combined. For example, you could be a product and a feature owner on a larger product, or you could be a portfolio owner and at the same time, manage one of the products in the portfolio, assuming that this neither leads to biased product decisions nor sacrifices sustainable pace. \nScrum Product Owner\nAs its name suggests, a product owner in Scrum is in charge of a product. Note that the choice of the name is intentional. The role is not called product administrator, feature broker, product backlog manager, user story writer, or project manager—even though that’s sometimes how it is interpreted. It is also not called “product manager” primarily to indicate the level of empowerment and respect product owners require to succeed in their jobs. But you can think of the product owner as an agile product manager, as I explain in the following video.\nIf the product owner owns a product and is responsible for maximising its value, then it is important to understand what a product is. I regard a (digital) product as an asset that creates value for a group of users and for the business. For example, I am writing this article using Microsoft Word. When I need to take a break from writing, I save the document. Word is the product. But the ability to save the document is a feature, a part of the overall product. \nIf someone is referred to as product owner, then the individual should own the product in its entirety—like Word in the example—and not just a product part—such as the ability to save a document. Referring to people as product owners who do not manage a product and do not exercise the right ownership is wrong in my mind: It creates confusion and it sets wrong expectations: Someone who owns a product part cannot take on the responsibility of maximising the product’s value and achieving product success. Additionally, the individual does not need the corresponding decision-making authority and does not require the same skills.\nA product like Microsoft Word is, of course, likely to be too big to be managed by a single individual: It requires several product people to collaborate. But even in this case, I would suggest that there should only be one product owner. The other product people involved should have roles whose names correctly reflect their scope of ownership, as I discuss below.\nFeature Owner and Component Owner\nA feature owner is an individual who owns a capability end users can interact with, for example, the ability to persist a Word document or to edit it. A component owner owns an architecture building block like a user-interface layer or a payment service. Component owners typically require in-depth technical skills. For example, the owner of a persistence service has to be able to describe its interfaces or APIs and converse with the users—the development team members who use the service.\nFeature and component owners are responsible for maximising the value their features and components create while ensuring that this does not compromise the product’s overall value creation. This includes describing their functionality, interacting with development teams, participating in product strategy work, and helping evaluate feedback and data. \nI regard feature and component owners as members of a product owner team, a group of product people who collaboratively manage a larger product. The product owner team is led by a Scrum product owner who ensures that the right product decisions are made, that a valid product strategy and an actionable roadmap are available, who prioritises the product backlog, and who engages the stakeholders. The feature and component owners own the decisions for their assets, describe, prioritise, and validate their features and components, work with the development teams, and contribute to the product strategy work, as the picture below illustrates. \nPlatform Owner\nA software platform is a collection of digital assets that are used by several products, as I describe in more detail in the article Leveraging Software Platforms. A platform owner owns such a platform. The individual is responsible for maximising the value the platform creates, for example, reducing time-to-market of the products built on top of it or reducing development cost.\nYou can think of a platform owner as a type of Scrum product owner: Someone whose product is a platform and who requires in-depth technical expertise to communicate with the users of the product—the members of the development teams who build the products that use the platform.\nWhen a platform grows, it may be necessary to share product\nownership and introduce feature and/or component owners along the lines\ndescribe above.\nSAFe Product Owner\nThe agile scaling framework SAFe uses its own product owner role, the SAFe product owner. Despite the similarity of the name, the role significantly differs from the Scrum product owner. Whereas a Scrum product owner owns a product in its entirety, a SAFe product owner looks after the product details, defines user stories, works on a subset of the product backlog, and interacts with the one or more development teams. \nThe SAFe product owner is therefore focused on the product tactics. The strategic product responsibilities are taken on by another role, the SAFe product manager. To put it differently, the SAFe model splits product ownership into two distinct roles: The SAFe product manager owns the strategic product decisions, and the SAFe product owner is in charge of the tactics. This is in stark contrast to the Scrum product owner who exercises full-stack product ownership, from vision to tactics, as the following picture shows.\nWhile using a strategic and tactical product role is a common scaling technique, it is best applied when the product is stable. In other words, I find the approach less suited when faced with a significant amount of uncertainty and change that affects the product strategy. This is usually the case in the development, introduction, and (early) growth stage of the product life cycle. \nHere is why: As long as you search for a valid strategy to launch a product, achieve product-market fit, and then keep the product growing, it is particularly important to dovetail strategic and tactical product decisions. This is hard to achieve when they are split across two distinct roles. (In contrast, a Scrum product owner is always involved in the tactical work to a certain extent, even though the bulk of the work may be done by feature and component owners in collaboration with the dev teams.)\nPortfolio Owner\nA portfolio owner looks after a group of products, and the\nrole is also known as product portfolio manager. An example of a product\nportfolio is Microsoft Office. It consists of products such as Word,\nPowerPoint, and Excel. \nThe job of a portfolio owner is to maximise the value a product portfolio creates. This includes actively managing the portfolio, collaborating with the product owners who look after the products within the portfolio, harmonising the individual product strategies and product roadmaps, aligning major releases, managing dependencies, and helping create a common user experience across the various products. \nThe individual will typically benefit from having solid product management skills and from having successfully managed individual products before stepping into the role. For a smaller product portfolio, the head of product might be able to take on the role. Otherwise, a dedicated full-time portfolio owner will be required.\nSummary\nI hope that the role descriptions above have helped you reflect on how the product owner role is applied at your company and that you have managed to identify ways to improve it. Don’t feel bad if you have discovered that you are not a Scrum product owner. Any product role can provide a great opportunity to help progress a product and create value for the users and the business. As I have suggested before, what truly matters are not our job titles and role names. It’s the good we do for the users and our businesses.\nThe following infographic summarises the six roles. Click on it to download it.\n ","url":"https://www.romanpichler.com/blog/six-types-of-product-owners/"},{"date_scraped_timestamp":1710925730582,"host":"www.romanpichler.com","page_title":"Sprint Planning Tips for Product Owners","text":"\n \n Published on 4th September 2018\n \n \n \n \n \n \n \n As its name suggests, the sprint planning meeting sets up the sprint and establishes what can be done. While it’s an important meeting, I find that some product owners struggle with it. The following tips help you reflect on how you use the meeting and discover how you can get the most out of it. \n Come Prepared\nMake sure you carry out the necessary prep work prior to the sprint planning meeting. Be clear on what you want the sprint to achieve, ensure that the product backlog is appropriately refined (or groomed), and have its high-priority items ready. This is necessary for the following two reasons:\nFirst, if you start sprint planning without a properly prepared product backlog, you are likely to perform backlog and planning work in a comparatively short, time-boxed meeting. This makes the sprint planning work challenging, and it can leave the development team feeling exhausted and stressed rather than motivated to start the new sprint.\nSecond, once the planning is done and a sprint goal has been agreed, you cannot, or at least should not, change the sprint contents: Sprints are protected from changes in order to allow the team to work in a focused manner and do a good job.\nBear in mind that product backlog grooming should be a team effort and that you should involve the development team members in the backlog work. For advise on when to carry out product backlog grooming, please see my article “When should Product Backlog Grooming Take Place?”.\nFocus on the Sprint Goal\nWhile there are numerous planning techniques available to determine how much work can be done in a sprint—from using net hours to velocity-based planning, you should not have to worry about how the team plans. It’s up to the team to choose the right planning techniques and determine the right tasks, and it’s up to the Scrum Master to support the team members and suggest appropriate techniques when necessary. As the product owner, you should focus on establishing a shared, meaningful sprint goal that guides the work of the team and explains why the work is carried out. If you don’t have a Scrum Master, then that’s an issue that needs to be addressed: Taking on Scrum Master duties is likely to either overwhelm you and / or cause you to neglect some of your product management responsibilities, as I explain in “Every Great Product Owner Needs a Great Scrum Master“.\nA sprint goal might address a specific risk and help you acquire the relevant knowledge, or it might be about completing or optimising a piece of functionality. An example of the former would be “Find out if users are willing to share personal data as part of the initial registration process” to address a user-interaction risk. An example for the latter might be “Finish the dashboard so it can be released to the test users”. If you work with release goals, which is something I usually encourage, then every sprint goal should be a step towards the next release goal.\nWhile my experience suggests that many product owners don’t use sprint goals, I find them tremendously helpful. They provide purpose and alignment; they facilitate stakeholder communication; and they make it easier to analyse and action the data obtained from exposing a product increment to the users. But to fully leverage sprint goals, you must ensure that they are meaningful to the development team so that people support them.\nIf you believe, for example, that addressing a user interaction or pricing-related risk should be the goal of the sprint, but the dev team insists on first addressing a crucial technical risk, then it may not be a good idea to force your goal onto the team. Instead, search for an inclusive and shared goal that everyone agrees with. Alternatively, use two separate goals, as long as this is the exception and not the norm: Working with one shared sprint goal is the default in Scrum, as this fosters close teamwork and collaboration. Additionally, it tends to make it easier to collect and analyse the relevant user feedback.\nI like to identify a candidate sprint goal as part of the grooming work. This avoids the risk of starting sprint planning without a firm idea why the sprint should be carried out. Once a shared goal has been agreed, the development team performs the planning work and validates if the goal is realistic. If that’s not the case, then you will have to adjust the goal and make it less ambitious until it fits into the sprint. You can download my sprint goal template, which helps you formulate clear and testable sprint goals.\nBe Present\nAs the product owner, you may have many duties competing for your time and attention; attending yet another sprint planning meeting might not be your highest priority. While that’s understandable, I recommend that you make an effort to be present during the entire meeting. Be in the same room as the development team if you can. Alternatively, attend via a videoconference.\nThere are three reasons for this: First, the sprint planning meeting is where the rubber hits the road. It determines what actually gets done, what is implemented in the coming days and weeks. By being present you can guide the development team and answer questions. This helps the team do a great job and reduces the need for you to answer questions during the sprint, which in turn, frees up your time to take care of other duties like competitor analysis and other strategic work. And having attended plenty of sprint planning meetings over the years, I find that new questions often arise when the development team members analyse the product backlog items and break them into tasks.\nSecond, as mentioned before, it may turn out that the initial sprint goal is not realistic and therefore has to be adjusted. If you are not present, then you won’t be able to influence and contribute to reshaping the goal. Additionally, you may want to understand why the goal cannot be reached so you can learn from it.\nLast but not least, by being present you show the team that you care and that the sprint is important to you. This increases people’s motivation to gave a successful planning meeting and a successful sprint.\nRespect the Team’s Right to Say No, but Hold People Accountable\nSoftware development is an exciting but demanding profession. While I don’t want to overdramatise, I have met several people who have suffered from heart attacks and lasting food intolerances due to the high stress levels they experienced. Consequently, agile methods promote sustainable pace: The work load and intensity have to be sustainable over an extended period of time resulting a healthy work environment that fosters creativity and innovation. Scrum ensures sustainable pace by empowering the development team members to determine the right work load for a sprint. Consequently, if it turns out that not all of the high-priority items related to the sprint goal can get done, the team has the right to push back and decline taking on the appropriate items.\nWhile you might feel that fully meeting the sprint goal is a must—you might face some challenging stakeholder expectations or you might have promised certain features, for example—you should refrain from trying to force more work onto the team. This will damage the team’s ownership and responsibility; the team will no longer feel fully accountable for reaching the sprint goal, as you essentially dictate it. In the worst case, people lose interest and motivation, and no longer care about the product.\nAt the same token, hold the development team accountable for meeting an agreed sprint goal at the end of the sprint in the sprint review meeting. If the team has the right to determine how much work they can take on, then people also have the obligation to meet the goal. But don’t mistake a commitment for a guarantee. Unforeseen things can happen in software development including people falling ill and a server going down. Additionally, newly formed teams often require some time to be able to realistically plan and reliably reach the sprint goals. But if your team has not learnt to make realistic commitments after three or four sprints, or if your team regularly fails to get all the product backlog items done that were pulled into the sprint, then use the next sprint retrospective to investigate and eliminate the causes.\n ","url":"https://www.romanpichler.com/blog/sprint-planning-tips-for-product-owners/?replytocom=3179"},{"date_scraped_timestamp":1710925487951,"host":"www.romanpichler.com","page_title":"Sprint Planning Tips for Product Owners","text":"\n \n Published on 4th September 2018\n \n \n \n \n \n \n \n As its name suggests, the sprint planning meeting sets up the sprint and establishes what can be done. While it’s an important meeting, I find that some product owners struggle with it. The following tips help you reflect on how you use the meeting and discover how you can get the most out of it. \n Come Prepared\nMake sure you carry out the necessary prep work prior to the sprint planning meeting. Be clear on what you want the sprint to achieve, ensure that the product backlog is appropriately refined (or groomed), and have its high-priority items ready. This is necessary for the following two reasons:\nFirst, if you start sprint planning without a properly prepared product backlog, you are likely to perform backlog and planning work in a comparatively short, time-boxed meeting. This makes the sprint planning work challenging, and it can leave the development team feeling exhausted and stressed rather than motivated to start the new sprint.\nSecond, once the planning is done and a sprint goal has been agreed, you cannot, or at least should not, change the sprint contents: Sprints are protected from changes in order to allow the team to work in a focused manner and do a good job.\nBear in mind that product backlog grooming should be a team effort and that you should involve the development team members in the backlog work. For advise on when to carry out product backlog grooming, please see my article “When should Product Backlog Grooming Take Place?”.\nFocus on the Sprint Goal\nWhile there are numerous planning techniques available to determine how much work can be done in a sprint—from using net hours to velocity-based planning, you should not have to worry about how the team plans. It’s up to the team to choose the right planning techniques and determine the right tasks, and it’s up to the Scrum Master to support the team members and suggest appropriate techniques when necessary. As the product owner, you should focus on establishing a shared, meaningful sprint goal that guides the work of the team and explains why the work is carried out. If you don’t have a Scrum Master, then that’s an issue that needs to be addressed: Taking on Scrum Master duties is likely to either overwhelm you and / or cause you to neglect some of your product management responsibilities, as I explain in “Every Great Product Owner Needs a Great Scrum Master“.\nA sprint goal might address a specific risk and help you acquire the relevant knowledge, or it might be about completing or optimising a piece of functionality. An example of the former would be “Find out if users are willing to share personal data as part of the initial registration process” to address a user-interaction risk. An example for the latter might be “Finish the dashboard so it can be released to the test users”. If you work with release goals, which is something I usually encourage, then every sprint goal should be a step towards the next release goal.\nWhile my experience suggests that many product owners don’t use sprint goals, I find them tremendously helpful. They provide purpose and alignment; they facilitate stakeholder communication; and they make it easier to analyse and action the data obtained from exposing a product increment to the users. But to fully leverage sprint goals, you must ensure that they are meaningful to the development team so that people support them.\nIf you believe, for example, that addressing a user interaction or pricing-related risk should be the goal of the sprint, but the dev team insists on first addressing a crucial technical risk, then it may not be a good idea to force your goal onto the team. Instead, search for an inclusive and shared goal that everyone agrees with. Alternatively, use two separate goals, as long as this is the exception and not the norm: Working with one shared sprint goal is the default in Scrum, as this fosters close teamwork and collaboration. Additionally, it tends to make it easier to collect and analyse the relevant user feedback.\nI like to identify a candidate sprint goal as part of the grooming work. This avoids the risk of starting sprint planning without a firm idea why the sprint should be carried out. Once a shared goal has been agreed, the development team performs the planning work and validates if the goal is realistic. If that’s not the case, then you will have to adjust the goal and make it less ambitious until it fits into the sprint. You can download my sprint goal template, which helps you formulate clear and testable sprint goals.\nBe Present\nAs the product owner, you may have many duties competing for your time and attention; attending yet another sprint planning meeting might not be your highest priority. While that’s understandable, I recommend that you make an effort to be present during the entire meeting. Be in the same room as the development team if you can. Alternatively, attend via a videoconference.\nThere are three reasons for this: First, the sprint planning meeting is where the rubber hits the road. It determines what actually gets done, what is implemented in the coming days and weeks. By being present you can guide the development team and answer questions. This helps the team do a great job and reduces the need for you to answer questions during the sprint, which in turn, frees up your time to take care of other duties like competitor analysis and other strategic work. And having attended plenty of sprint planning meetings over the years, I find that new questions often arise when the development team members analyse the product backlog items and break them into tasks.\nSecond, as mentioned before, it may turn out that the initial sprint goal is not realistic and therefore has to be adjusted. If you are not present, then you won’t be able to influence and contribute to reshaping the goal. Additionally, you may want to understand why the goal cannot be reached so you can learn from it.\nLast but not least, by being present you show the team that you care and that the sprint is important to you. This increases people’s motivation to gave a successful planning meeting and a successful sprint.\nRespect the Team’s Right to Say No, but Hold People Accountable\nSoftware development is an exciting but demanding profession. While I don’t want to overdramatise, I have met several people who have suffered from heart attacks and lasting food intolerances due to the high stress levels they experienced. Consequently, agile methods promote sustainable pace: The work load and intensity have to be sustainable over an extended period of time resulting a healthy work environment that fosters creativity and innovation. Scrum ensures sustainable pace by empowering the development team members to determine the right work load for a sprint. Consequently, if it turns out that not all of the high-priority items related to the sprint goal can get done, the team has the right to push back and decline taking on the appropriate items.\nWhile you might feel that fully meeting the sprint goal is a must—you might face some challenging stakeholder expectations or you might have promised certain features, for example—you should refrain from trying to force more work onto the team. This will damage the team’s ownership and responsibility; the team will no longer feel fully accountable for reaching the sprint goal, as you essentially dictate it. In the worst case, people lose interest and motivation, and no longer care about the product.\nAt the same token, hold the development team accountable for meeting an agreed sprint goal at the end of the sprint in the sprint review meeting. If the team has the right to determine how much work they can take on, then people also have the obligation to meet the goal. But don’t mistake a commitment for a guarantee. Unforeseen things can happen in software development including people falling ill and a server going down. Additionally, newly formed teams often require some time to be able to realistically plan and reliably reach the sprint goals. But if your team has not learnt to make realistic commitments after three or four sprints, or if your team regularly fails to get all the product backlog items done that were pulled into the sprint, then use the next sprint retrospective to investigate and eliminate the causes.\n ","url":"https://www.romanpichler.com/blog/sprint-planning-tips-for-product-owners/"},{"date_scraped_timestamp":1710925725970,"host":"www.romanpichler.com","page_title":"Sprint Planning Tips for Product Owners","text":"\n \n Published on 4th September 2018\n \n \n \n \n \n \n \n As its name suggests, the sprint planning meeting sets up the sprint and establishes what can be done. While it’s an important meeting, I find that some product owners struggle with it. The following tips help you reflect on how you use the meeting and discover how you can get the most out of it. \n Come Prepared\nMake sure you carry out the necessary prep work prior to the sprint planning meeting. Be clear on what you want the sprint to achieve, ensure that the product backlog is appropriately refined (or groomed), and have its high-priority items ready. This is necessary for the following two reasons:\nFirst, if you start sprint planning without a properly prepared product backlog, you are likely to perform backlog and planning work in a comparatively short, time-boxed meeting. This makes the sprint planning work challenging, and it can leave the development team feeling exhausted and stressed rather than motivated to start the new sprint.\nSecond, once the planning is done and a sprint goal has been agreed, you cannot, or at least should not, change the sprint contents: Sprints are protected from changes in order to allow the team to work in a focused manner and do a good job.\nBear in mind that product backlog grooming should be a team effort and that you should involve the development team members in the backlog work. For advise on when to carry out product backlog grooming, please see my article “When should Product Backlog Grooming Take Place?”.\nFocus on the Sprint Goal\nWhile there are numerous planning techniques available to determine how much work can be done in a sprint—from using net hours to velocity-based planning, you should not have to worry about how the team plans. It’s up to the team to choose the right planning techniques and determine the right tasks, and it’s up to the Scrum Master to support the team members and suggest appropriate techniques when necessary. As the product owner, you should focus on establishing a shared, meaningful sprint goal that guides the work of the team and explains why the work is carried out. If you don’t have a Scrum Master, then that’s an issue that needs to be addressed: Taking on Scrum Master duties is likely to either overwhelm you and / or cause you to neglect some of your product management responsibilities, as I explain in “Every Great Product Owner Needs a Great Scrum Master“.\nA sprint goal might address a specific risk and help you acquire the relevant knowledge, or it might be about completing or optimising a piece of functionality. An example of the former would be “Find out if users are willing to share personal data as part of the initial registration process” to address a user-interaction risk. An example for the latter might be “Finish the dashboard so it can be released to the test users”. If you work with release goals, which is something I usually encourage, then every sprint goal should be a step towards the next release goal.\nWhile my experience suggests that many product owners don’t use sprint goals, I find them tremendously helpful. They provide purpose and alignment; they facilitate stakeholder communication; and they make it easier to analyse and action the data obtained from exposing a product increment to the users. But to fully leverage sprint goals, you must ensure that they are meaningful to the development team so that people support them.\nIf you believe, for example, that addressing a user interaction or pricing-related risk should be the goal of the sprint, but the dev team insists on first addressing a crucial technical risk, then it may not be a good idea to force your goal onto the team. Instead, search for an inclusive and shared goal that everyone agrees with. Alternatively, use two separate goals, as long as this is the exception and not the norm: Working with one shared sprint goal is the default in Scrum, as this fosters close teamwork and collaboration. Additionally, it tends to make it easier to collect and analyse the relevant user feedback.\nI like to identify a candidate sprint goal as part of the grooming work. This avoids the risk of starting sprint planning without a firm idea why the sprint should be carried out. Once a shared goal has been agreed, the development team performs the planning work and validates if the goal is realistic. If that’s not the case, then you will have to adjust the goal and make it less ambitious until it fits into the sprint. You can download my sprint goal template, which helps you formulate clear and testable sprint goals.\nBe Present\nAs the product owner, you may have many duties competing for your time and attention; attending yet another sprint planning meeting might not be your highest priority. While that’s understandable, I recommend that you make an effort to be present during the entire meeting. Be in the same room as the development team if you can. Alternatively, attend via a videoconference.\nThere are three reasons for this: First, the sprint planning meeting is where the rubber hits the road. It determines what actually gets done, what is implemented in the coming days and weeks. By being present you can guide the development team and answer questions. This helps the team do a great job and reduces the need for you to answer questions during the sprint, which in turn, frees up your time to take care of other duties like competitor analysis and other strategic work. And having attended plenty of sprint planning meetings over the years, I find that new questions often arise when the development team members analyse the product backlog items and break them into tasks.\nSecond, as mentioned before, it may turn out that the initial sprint goal is not realistic and therefore has to be adjusted. If you are not present, then you won’t be able to influence and contribute to reshaping the goal. Additionally, you may want to understand why the goal cannot be reached so you can learn from it.\nLast but not least, by being present you show the team that you care and that the sprint is important to you. This increases people’s motivation to gave a successful planning meeting and a successful sprint.\nRespect the Team’s Right to Say No, but Hold People Accountable\nSoftware development is an exciting but demanding profession. While I don’t want to overdramatise, I have met several people who have suffered from heart attacks and lasting food intolerances due to the high stress levels they experienced. Consequently, agile methods promote sustainable pace: The work load and intensity have to be sustainable over an extended period of time resulting a healthy work environment that fosters creativity and innovation. Scrum ensures sustainable pace by empowering the development team members to determine the right work load for a sprint. Consequently, if it turns out that not all of the high-priority items related to the sprint goal can get done, the team has the right to push back and decline taking on the appropriate items.\nWhile you might feel that fully meeting the sprint goal is a must—you might face some challenging stakeholder expectations or you might have promised certain features, for example—you should refrain from trying to force more work onto the team. This will damage the team’s ownership and responsibility; the team will no longer feel fully accountable for reaching the sprint goal, as you essentially dictate it. In the worst case, people lose interest and motivation, and no longer care about the product.\nAt the same token, hold the development team accountable for meeting an agreed sprint goal at the end of the sprint in the sprint review meeting. If the team has the right to determine how much work they can take on, then people also have the obligation to meet the goal. But don’t mistake a commitment for a guarantee. Unforeseen things can happen in software development including people falling ill and a server going down. Additionally, newly formed teams often require some time to be able to realistically plan and reliably reach the sprint goals. But if your team has not learnt to make realistic commitments after three or four sprints, or if your team regularly fails to get all the product backlog items done that were pulled into the sprint, then use the next sprint retrospective to investigate and eliminate the causes.\n ","url":"https://www.romanpichler.com/blog/sprint-planning-tips-for-product-owners/?replytocom=6303"},{"date_scraped_timestamp":1710925730832,"host":"www.romanpichler.com","page_title":"Sprint Planning Tips for Product Owners","text":"\n \n Published on 4th September 2018\n \n \n \n \n \n \n \n As its name suggests, the sprint planning meeting sets up the sprint and establishes what can be done. While it’s an important meeting, I find that some product owners struggle with it. The following tips help you reflect on how you use the meeting and discover how you can get the most out of it. \n Come Prepared\nMake sure you carry out the necessary prep work prior to the sprint planning meeting. Be clear on what you want the sprint to achieve, ensure that the product backlog is appropriately refined (or groomed), and have its high-priority items ready. This is necessary for the following two reasons:\nFirst, if you start sprint planning without a properly prepared product backlog, you are likely to perform backlog and planning work in a comparatively short, time-boxed meeting. This makes the sprint planning work challenging, and it can leave the development team feeling exhausted and stressed rather than motivated to start the new sprint.\nSecond, once the planning is done and a sprint goal has been agreed, you cannot, or at least should not, change the sprint contents: Sprints are protected from changes in order to allow the team to work in a focused manner and do a good job.\nBear in mind that product backlog grooming should be a team effort and that you should involve the development team members in the backlog work. For advise on when to carry out product backlog grooming, please see my article “When should Product Backlog Grooming Take Place?”.\nFocus on the Sprint Goal\nWhile there are numerous planning techniques available to determine how much work can be done in a sprint—from using net hours to velocity-based planning, you should not have to worry about how the team plans. It’s up to the team to choose the right planning techniques and determine the right tasks, and it’s up to the Scrum Master to support the team members and suggest appropriate techniques when necessary. As the product owner, you should focus on establishing a shared, meaningful sprint goal that guides the work of the team and explains why the work is carried out. If you don’t have a Scrum Master, then that’s an issue that needs to be addressed: Taking on Scrum Master duties is likely to either overwhelm you and / or cause you to neglect some of your product management responsibilities, as I explain in “Every Great Product Owner Needs a Great Scrum Master“.\nA sprint goal might address a specific risk and help you acquire the relevant knowledge, or it might be about completing or optimising a piece of functionality. An example of the former would be “Find out if users are willing to share personal data as part of the initial registration process” to address a user-interaction risk. An example for the latter might be “Finish the dashboard so it can be released to the test users”. If you work with release goals, which is something I usually encourage, then every sprint goal should be a step towards the next release goal.\nWhile my experience suggests that many product owners don’t use sprint goals, I find them tremendously helpful. They provide purpose and alignment; they facilitate stakeholder communication; and they make it easier to analyse and action the data obtained from exposing a product increment to the users. But to fully leverage sprint goals, you must ensure that they are meaningful to the development team so that people support them.\nIf you believe, for example, that addressing a user interaction or pricing-related risk should be the goal of the sprint, but the dev team insists on first addressing a crucial technical risk, then it may not be a good idea to force your goal onto the team. Instead, search for an inclusive and shared goal that everyone agrees with. Alternatively, use two separate goals, as long as this is the exception and not the norm: Working with one shared sprint goal is the default in Scrum, as this fosters close teamwork and collaboration. Additionally, it tends to make it easier to collect and analyse the relevant user feedback.\nI like to identify a candidate sprint goal as part of the grooming work. This avoids the risk of starting sprint planning without a firm idea why the sprint should be carried out. Once a shared goal has been agreed, the development team performs the planning work and validates if the goal is realistic. If that’s not the case, then you will have to adjust the goal and make it less ambitious until it fits into the sprint. You can download my sprint goal template, which helps you formulate clear and testable sprint goals.\nBe Present\nAs the product owner, you may have many duties competing for your time and attention; attending yet another sprint planning meeting might not be your highest priority. While that’s understandable, I recommend that you make an effort to be present during the entire meeting. Be in the same room as the development team if you can. Alternatively, attend via a videoconference.\nThere are three reasons for this: First, the sprint planning meeting is where the rubber hits the road. It determines what actually gets done, what is implemented in the coming days and weeks. By being present you can guide the development team and answer questions. This helps the team do a great job and reduces the need for you to answer questions during the sprint, which in turn, frees up your time to take care of other duties like competitor analysis and other strategic work. And having attended plenty of sprint planning meetings over the years, I find that new questions often arise when the development team members analyse the product backlog items and break them into tasks.\nSecond, as mentioned before, it may turn out that the initial sprint goal is not realistic and therefore has to be adjusted. If you are not present, then you won’t be able to influence and contribute to reshaping the goal. Additionally, you may want to understand why the goal cannot be reached so you can learn from it.\nLast but not least, by being present you show the team that you care and that the sprint is important to you. This increases people’s motivation to gave a successful planning meeting and a successful sprint.\nRespect the Team’s Right to Say No, but Hold People Accountable\nSoftware development is an exciting but demanding profession. While I don’t want to overdramatise, I have met several people who have suffered from heart attacks and lasting food intolerances due to the high stress levels they experienced. Consequently, agile methods promote sustainable pace: The work load and intensity have to be sustainable over an extended period of time resulting a healthy work environment that fosters creativity and innovation. Scrum ensures sustainable pace by empowering the development team members to determine the right work load for a sprint. Consequently, if it turns out that not all of the high-priority items related to the sprint goal can get done, the team has the right to push back and decline taking on the appropriate items.\nWhile you might feel that fully meeting the sprint goal is a must—you might face some challenging stakeholder expectations or you might have promised certain features, for example—you should refrain from trying to force more work onto the team. This will damage the team’s ownership and responsibility; the team will no longer feel fully accountable for reaching the sprint goal, as you essentially dictate it. In the worst case, people lose interest and motivation, and no longer care about the product.\nAt the same token, hold the development team accountable for meeting an agreed sprint goal at the end of the sprint in the sprint review meeting. If the team has the right to determine how much work they can take on, then people also have the obligation to meet the goal. But don’t mistake a commitment for a guarantee. Unforeseen things can happen in software development including people falling ill and a server going down. Additionally, newly formed teams often require some time to be able to realistically plan and reliably reach the sprint goals. But if your team has not learnt to make realistic commitments after three or four sprints, or if your team regularly fails to get all the product backlog items done that were pulled into the sprint, then use the next sprint retrospective to investigate and eliminate the causes.\n ","url":"https://www.romanpichler.com/blog/sprint-planning-tips-for-product-owners/?replytocom=3181"},{"date_scraped_timestamp":1710925734187,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/?replytocom=128048"},{"date_scraped_timestamp":1710925490465,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/"},{"date_scraped_timestamp":1710925735691,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/?replytocom=127973"},{"date_scraped_timestamp":1710925735734,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/?replytocom=127874"},{"date_scraped_timestamp":1710925736983,"host":"www.romanpichler.com","page_title":"Sprint Review Tips for Product Owners","text":"\n \n Published on 15th November 2017\n \n Last Updated on: 16 May 2022\n \n \n \n \n \n \n The sprint review meeting is maybe the most important Scrum event for product people—it helps you collect feedback and make the right product decisions thereby increasing the chances of creating a successful product. But I find that product owners are not always clear on who should attend the meeting, how it should be run, and how to collect the relevant feedback. This article answers these questions and shares my tips for getting the most out of the sprint review. \n Involve the Right People\nCollecting feedback from the right people is crucial to make effective product decisions: If you invite the wrong individuals or if key people are missing, then you are unlikely to receive the feedback you need. You should therefore make sure that you invite the right individuals.\nAs a rule of thumb, ask those people to attend whose input you need to validate the latest product increment and move the product forward. These are typically your key stakeholders—the people who have an interest in your product and who you need to develop and provide the offering. These may include people from marketing, sales, service and support, and other business units depending on your product and organisation.\nI find it helpful to explain to the individuals why they are asked to attend the meeting and what they are likely to see in order to encourage them to participate and to set their expectations.\nCollaborate but Don’t Be Afraid to Say No\nMore than one sprint review meeting I’ve attended was quickly over: A development team member demoed the functionality to confused looking stakeholders with the product owner in the background. Afterwards the ScrumMaster asked if there were any questions or feedback, but the stakeholders just looked at each other, a few said “nice job” and “looks good”, and then people left. The valuable feedback gathered in this meeting was zero.\nTherefore, encourage people to actively participate and share their views, ideas, and concerns. Use open-ended questions like “What do you think about the improvements we made to registration feature?” Try to understand why somebody likes or dislikes the product increment. Receiving feedback such as “looks great” may feel good, but it does not offer any new insights. Why does the person like the changes? And is there anything that could be improved further?\nGive all attendees the opportunity to be heard. Attentively listen to them and appreciate their opinions and feedback, even if you disagree or find it difficult to accept them. Remember: The creativity, knowledge, and feedback of the stakeholders should help you make the right product decisions and offer the best possible product.\nAt the same time, don’t accept that individuals use the meeting to make demands or strike the best possible deal for themselves or their business units. I remember one sprint review meeting where a senior stakeholder literally shouted his demands at the product owner and dev team—which was neither appropriate nor helpful, of course.\nAs the person in charge of the product, be kind and understanding. But do not let the stakeholders tell you what to do. You own the product and you must have the final say—otherwise you don’t have enough authority and respect.\nDon’t be afraid to say no to ideas and requests if they are not helpful and realistic. Use the product roadmap together with the overall product strategy to decide if you should take on a request. In doubt, use the next sprint to test if the idea or request would be beneficial to the users. But remember that it’s virtually impossible to offer a product that pleases everyone.\nAsk your Scrum Master to facilitate the meeting and establish ground rules. This allows you to engage with the attendees and collect feedback without having to moderate.\nConsider Splitting the Meeting in Two Parts\nSometimes it’s helpful to split the sprint review meeting into two parts. First, you and the development team get together. The team demoes the product increment to you. Then you give feedback to the team members and determine which items are done and how much progress has been made using, for example, the release burndown chart (as I discuss in more detail below). If you decide to take advantage of just-in-time reviews where you provide feedback on new functionality during the sprint, you may not require this part at all.\nIn the second part, the stakeholders join the meeting. I find that as the product owner, you are often best suited to present the product increment to the stakeholders: You are likely to better understand how a user would interact with the product and use the new functionality than a development team member. Then collect feedback from the stakeholders to understand if you are creating the right product with the right user experience and features. Ask open-ended questions as recommended above in order to understand why the new functionality is great or why it should be changed, for example.\nSplitting the meeting allows you to have a private conversation with the dev team and possibly sort out any disagreements before people from outside the Scrum team join you. This is particularly helpful when you didn’t have the chance to interact with the team during the sprint—be it that you are not collocated with the team or that you were busy visiting users and customers or attending a tradeshow or conference. But do make sure that the development team members attend the entire meeting and are present in the second part. Hearing feedback directly from the stakeholders is invaluable.\nConsider Separately Collecting User and Stakeholder Feedback\nThe original idea of the sprint review meeting is to bring all the right people together and collect feedback from everyone at the same time. If that works for you, then that’s great. Often, though, I find that it is more helpful to separately gather feedback from users and internal stakeholders. Why? Both groups tend to have different perspectives and interests.\nTesting product increments with users allows you to understand if the product is likely to do a great job for its target group, if it offers the right user experience and the right features. Discussing increments with stakeholders helps you understand if the product be effectively offered, if it can be operated, marketed, sold, and supported by your organisation.\nWhat’s more, it’s best to collect the user and stakeholder feedback using different techniques: Demoing the product increment to end users makes sense when very little functionality has been implemented. Otherwise, it tends to be more helpful to observe or measure how people actually use the product employing, for example, usability tests and early releases. (See my article How to Choose the Right Product Validation Technique in Scrum for more information.)\nAs these techniques usually require more time than the sprint review meeting offers—it may take several days to collect the relevant data after you’ve released a product increment to (selected) users—this naturally separates collecting the user data from gathering stakeholder feedback.\nBear in mind that users trump stakeholders: If the product is not beneficial to the users, people are not going to employ it (for long), no matter how sellable or serviceable it is, or how much the CEO loves it.\nDon’t Decide Hastily\nSometimes, it’s possible to make product decisions straight away in the sprint review meeting and even change the product backlog, as the Scrum Guide suggests. But often—particularly if the feedback has a bigger impact and leads to significant backlog changes—you will benefit from having more time to analyse the feedback, draw the right conclusions, and determine which product backlog changes are required. Additionally, you may not have all relevant data available in the sprint review meeting if you decide to collect user and stakeholder feedback separately, as discussed above.\nYou should therefore consider separating collecting feedback and data from analysing and actioning it. You may choose, for instance, to have a short, focused product backlog workshop prior to the next sprint planning meeting that offers you the opportunity to objectively evaluate the feedback and update the backlog together with the development team; or you may want to schedule a product backlog session in the next sprint once you have collected enough user data with the help of an analytics tool, as I explain in my article When should Product Backlog Grooming Take Place?\nDiscuss the Development Progress\nImagine that all the feedback and data suggests that people are going to love your product. But if you are way behind schedule and over budget, then your product may not become a success. It is therefore important that you regularly determine the progress made.\nThe sprint review meeting is a great opportunity to do this, as you should now be able to tell which items were completed, understand how far you have come, and if you are on track to meet the product goal on as expected. This information is also valuable for the key stakeholders who attend the meeting so that they can adjust their work if required. What’s more discussing the progress puts the current sprint into context and connects it with the previous ones.\nI like to work with the release burndown chart, Scrum’s standard artefact for tracking the development progress and anticipating how the development effort is likely to unfold. The chart shows how the effort in the product backlog develops from sprint to sprint—the idea being that the effort is reduced or “burned down” over time.\nNo matter which tool you use: make sure that it helps you understand how fast you are progressing and to make the necessary adjustments—be it adding a UX designer to the team, partially meeting the product goal and possibly delivering fewer features than planned, or pushing out the release date.\n ","url":"https://www.romanpichler.com/blog/sprint-review-tips-for-product-owners/?replytocom=22895"},{"date_scraped_timestamp":1710925569203,"host":"www.romanpichler.com","page_title":"Stakeholder Management Tips for Product People","text":"\n \n Published on 1st June 2020\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we rely on the stakeholders to successfully progress our product. But effective stakeholder management can be challenging. It can feel like herding cats with every stakeholder going off in a different direction pursuing her or his individual goal. This article offers practical tips to help you succeed in aligning the stakeholders, involving them in the right way, and securing their support for important product decisions. \n \nListen to this audio version of this article:\nLead the Stakeholders—Don’t Please, Don’t Dictate\nAs the person in charge of the product, your aspiration should be to lead the stakeholders in order to create value together and achieve product success. In reality, however, some product people either aim to please the stakeholders by saying yes to their requests or by brokering compromises. Others do everything they can to make the stakeholders agree to their ideas and plans. But neither of these two approaches is desirable.\nThe first one carries the risk of being a feature broker and offering a product that has a weak value proposition, gives rise to a poor user experience, and consists of a loose collection of features. The second approach fails to leverage the knowledge and expertise of the stakeholders. What’s more, it makes it unlikely that the stakeholders will fully support the product decisions and that they will follow them through.\nEffective stakeholder management starts by embracing the right attitude: See the stakeholders as equal partners; take an interest in their perspective, ideas, concerns, and underlying needs; build trustful connections with the individuals; and encourage the stakeholders to work together. But do not accept inappropriate behaviour and do not allow people to treat you like a project manager, team lead, or personal assistant. The following tips will help you with this.\nFocus on the Key Stakeholders\nA stakeholder is anyone who has a stake in your product, who is affected by it, or who shows an interest in the offering. While this definition includes users and customers, I use the term in this article to refer to the internal business stakeholders. For example, these stakeholders are likely to include representatives from marketing, sales, support, and finance for a commercial product.\nTo focus your stakeholder management effort, identify your key stakeholders—those individuals with whom you want to establish a trustful connection and collaborate on a regular basis. This is particularly helpful when you are faced with a large group of stakeholders, which is not uncommon in bigger companies. A handy stakeholder analysis tool is the power-interest grid developed by Ackermann and Eden.\nAs its name suggests, the grid analyses the stakeholders by taking into account their power and interest; it assumes that people take a low or high interest in your product and have low or high power. This results in four stakeholder groups: players, subjects, context setters, and crowd, as the picture below shows.\nThe players are your key stakeholders: These are the individuals whose trust you should earn, who you should closely collaborate with, who you should involve in important product decisions. This avoids the risk that the stakeholder management work becomes overwhelming and consumes too much of your time. For guidance on how to interact with the other stakeholder groups, please see my article “Getting Stakeholder Engagement Right”.\nBuild Trust\nAs the person in charge of the product, you lack transactional power: You cannot tell the stakeholders what to do, you cannot assign tasks to the individuals, and you are typically not in a position to offer a bonus, pay raise, or other incentives. At the same time, you rely on their work and support to progress the product, for instance, to market and sell it. How can you then guide the individuals and ensure that everyone moves together in the same direction?\nThe answer is by building trust. Here is why: As you lack transactional power, you must influence the stakeholders and encourage them to follow your lead. To do so, you have to earn the individuals’ trust. To put it differently, if the stakeholders don’t trust you, they won’t follow you and they won’t support your ideas and suggestions.\nThe following techniques will help you with earning the stakeholders’ trust:\nEmpathise: Take a warm-hearted interest in the stakeholders and try to understand their perspectives, ideas, concerns, interests, and needs—no matter how likeable and agreeable you find the individuals and their views.\nPractice active listening: Make an effort to attentively listen to the stakeholders and cultivate an open mind.\nSpeak and act with integrity: Say what you believe is true, be willing to admit mistakes, and walk your own talk.\nGet to know people and, for example, have lunch or coffee together, be it in the same room or online.\nInvolve people in product decisions but don’t make the mistake of trying to please them.\nIncrease your product management expertise.\nBuilding trust with the stakeholders and effectively collaborating with the individuals is hard when the stakeholder group is changeable, when people come and go, for instance, when a new sales rep is assigned to your product every few months. I therefore recommend that you form a stable group of stakeholders and develop it into a stakeholder community where the individuals work together on a continued basis and learn to trust, respect, and support each other.\nTo build such a stakeholder community, try the following techniques, which I discuss in more detail in my book How to Lead in Product Management:\nBring people together and have joint workshops instead of holding separate conversations with the individual stakeholders, see also the section below.\nEstablish clear roles and responsibilities. If people aren’t clear on what is expected of them and who is doing what, confusion arises, and collaboration becomes more difficult.\nCollaboratively set goals, for example, user and business goals on the product strategy and product goals on the product roadmap.\nImprove the collaboration within the stakeholder group and address issues, for instance, by holding stakeholder retrospectives.\nAsk the Scrum Master to help you build a stakeholder community.\nEngage the Stakeholders Early and Regularly\nI’m a big fan of involving the key stakeholders early and often. This starts by inviting them to a kick-off workshop for a brand-new product or a major product update and asking them to contribute to the product strategy work.\nIt continues with collaboratively creating a product roadmap and having regular joint product strategy workshops, once per quarter as a rule of thumb, where the product strategy and roadmap are reviewed and adapted. Additionally, ask the players to attend the sprint review meetings at least once per month so that the individuals see how the product delivery progresses and are able to share their feedback and any concerns they might have.\nIn other words, involve the key stakeholders in product strategy and product development work. This allows you to benefit from their expertise, it ensures that everyone is on the same page, and it encourages shared ownership: When developed collaboratively, the product strategy and product roadmap are no longer your plans that people are meant to follow. Instead, they are collectively owned, and everyone involved feels responsible for them.\nNote that collaboration means constructively engaging with one another and achieving some form of consensus—not splitting the difference or agreeing on the smallest common denominator, neither of which is a recipe for achieving product success.\nJoint workshops, and collaboration in general, become easier and more enjoyable once people have started to trust and respect each other, and the stakeholder group has evolved into a community. The same is true for making product decisions together with the stakeholders, which I discuss next.\nInvolve the Stakeholders in Important Product Decisions\nThe most amazing product strategy and the best product roadmap are worthless if the stakeholders don’t support them. But how do you secure people’s buy-in and maximise the chances that the individuals follow the strategy and roadmap? My answer is by involving them in making the appropriate decisions.\nWhen it comes to decision-making, you have two main choices: First, you can make a decision and then try to sell it to the stakeholders. This can be a lengthy iterative process that requires quite a bit of to-and-fro, negotiation, and possibly persuasion. Your second option is to bring the stakeholders together—be it in the same room or a video call—and decide collaboratively. This option takes advantage of the group’s collective knowledge, ensures that everyone has the same understanding, allows the individual stakeholders to be aware of the other people’s perspectives and interests, and typically results in stronger support for the decision, which makes it more likely that the individuals will stick to it and see it through.\nTo take advantage of collaborative decision-making and effectively involve the stakeholders in important product decisions, try the following techniques:\nEmploy a dedicated facilitator who ensures that everyone feels safe to speak her or his mind, that everybody is heard, and that nobody dominates. This mitigates the risk that the HIPPO, the highest paid person’s opinion, wins. You may want to ask your Scrum Master to facilitate the decision-making process, assuming that the individual has the right skills.\nFoster a collaborative mindset and agree on ground rules: Lead by example and attentively listen to people’s ideas while cultivating an open mind.\nChoose a decision rule so that everyone understands who decides and when and how a decision is made. Example decisions rules are consent, unanimity, and product person decides after discussion.\nEncourage people to come up with diverging ideas and create a shared understanding of their underlying interests and needs before you try to find a solution that everyone can agree with.\nDon’t shy away from making tough decisions and declining suggestions and requests after you have attentively listened to the requester and empathised with the individual.\nYou can find more collaborative decision-making tips in my book How to Lead in Product Management.\nHold People Accountable and Don’t Tolerate Inappropriate Behaviour\nIt’s great to lead the stakeholder by being collaborative and involving them in important product decisions. But this also means holding people accountable for meeting their agreements. If, for example, the marketer has failed to create the marketing collateral required for the upcoming release, then don’t ignore the issue but address it in the right way. Talk to the individual, empathise with the person, and find out what happened. But do not accept that a stakeholder intentionally acts against a joint decision or a common goal.\nSimilarly, don’t allow individuals to use a personal conversation with you to make requests, like trying to add a new feature. When this happens, kindly but firmly ask people to attend the appropriate meeting and to share their request with the other stakeholders. This creates transparency, fosters joint ownership, and avoids the impression that you might favour certain individuals.\nFinally, don’t put up with inappropriate communication behaviour, like blaming others, bending the truth, or hogging the conversation. Ask people to always treat each other with respect, attentively listen to one another, and refrain from using harsh and false speech. Remember that dealing with people issues is part and parcel of managing a product and that learning to constructively address disagreements and conflict is an important leadership skill.\n ","url":"https://www.romanpichler.com/blog/stakeholder-management-tips-for-product-people/"},{"date_scraped_timestamp":1710925628955,"host":"www.romanpichler.com","page_title":"Strategic Options for Mature Products","text":"\n \n Published on 14th August 2018\n \n \n \n \n \n \n \n Product strategy does not only matter for new and young products; it is equally important for older ones. This article discusses two main choices for mature products: extending the life cycle and revitalising the product, or leveraging maturity and turning the product into a cash cow. \n What Maturity Means\nA product is mature if it has stopped growing: The benefits it creates no longer rise. Instead, they have started to stagnate. In terms of the product life cycle model, the product has left the growth stage and entered maturity, as the following picture shows.\nTo find out if your product is mature, you should track its performance. To do so, you must be clear on the value it creates for the users and business. A tool like my Product Vision Board can help you with this. Next, select the right key performance indicators (KPIs). These might include revenue, cost, profit, market share, engagement, net promoter score, and cancellation rate, for instance. Then measure how much value your product creates. If the data shows a largely flat performance over the last few months, then the product is likely to be mature.\nIdeally, you should continuously track the product performance and regularly review the product strategy—at least once per quarter as a rule of thumb. You should therefore become quickly aware of the fact that the product performance is stagnating and your product is entering the maturity stage—which I regard as an important strategic inflection point. This enables you to be proactive and thoughtfully respond to the change. Note that eventually every product enters maturity; no product can continue to grow forever. The only question is when this will happen.\nOption 1: Extend the Product Life Cycle\nOnce your product has entered maturity, your first option is to move the product back into the growth stage thereby extending its life cycle, as the following picture shows.\nA number of techniques can help you make an ageing product attractive again including enhancing its capabilities and adding new features. Take the iPhone as an example. Apple has made considerable changes to the products throughout its life: it introduced apps, increased its size, improved the camera, and added face recognition, to name just a few.\nSometimes, though, the opposite strategy is more appropriate. Instead of adding more features, you may want to remove some and declutter your product. Take Microsoft Word for example. Microsoft has made significant efforts to simplify the application in recent years, thereby making it easier for people to use the product.\nAnother way to stimulate growth is to take your product to a new market or market segment. Think of YouTube Red, a variant of YouTube, for example. At the time of writing, the product offers advertising-free online and offline viewing of YouTube videos, as well as access to Google Play Music and YouTube Red Original series and films. (At the same time, the move has enabled Google to compete with companies like Netflix.)\nFinally, you might consider bundling your product with other offerings to increase its attractiveness. For instance, iOS and Android bundle a mobile operating system with a number of pre-installed apps including a web browser, email client, and maps.\nIs Option 1 Right for Your Product?\nWhile rejuvenating the product and moving it back into growth may sound attractive, it is not necessarily the right thing to do for your product. If you should choose this option depends on a number of factors:\nThe category the product belongs to continues to be attractive.\nYou don’t want the product to turn into a cash cow.\nYou are able to invest the time and money required to extend the life cycle.\nThe product is not too deep into maturity; its performance has fairly recently stagnated.\nThe product health including its code quality is reasonable.\nIf the product category your asset belongs to has lost its attractiveness, then revitalising the product will be difficult. Take MP3 players, for example. The product category has lost its sparkle; fewer and fewer people own dedicated MP3 players; and most of us use our phones to listen to music on the go. If say Apple wanted to revitalise its iPods, then this would be hard to achieve (unless the company marketed them as niche products similar to turntables).\nAdditionally, rejuvenating your product only makes sense when you don’t want or need it to become a cash cow. As its name suggests, a cash cow is a product that offers plenty of business benefits while it requires a comparatively low investment. Any product portfolio should contain a healthy mix of younger and older products. It can therefore be advantageous to accept maturity and let your product age gracefully, as I discuss in option 2 below.\nExtending the product life cycle also requires time and money: You may have to carry out market, user, and competitor research; you may have to develop new features; and you may have to evaluate new technologies and integrate them into the product, resulting in a significant strategizing effort.\nWhat’s more, the longer your product stays in maturity, the bigger the effort is likely to be: Chances are that the market has moved on while you’ve played a defensive game, doing only what is necessary to secure your product’s current position. Shifting gears, embracing an entrepreneurial mindset, and innovating the product can then be challenging.\nFinally, consider the product’s health. How high is its refactoring potential and code complexity? How soft or brittle is the software? How easy or difficult will it be to make the necessary changes? While poor product health is not necessarily a show stopper, it will make a life cycle extension harder and more expensive.\nOption 2: Keep the Product in Maturity\nThe second option is to accept your product’s trajectory, let it continue to mature, and keep it at this stage for as long as possible, as the picture below illustrates.\nAccepting maturity means adopting a more conservative mindset and playing a defensive game: You typically want to protect your product’s position without investing too much time and money. This often results in incremental enhancements and bug fixes rather than bigger changes like adding brand-new features.\nThis approach allows you to turn the product into a cash cow—a product that creates plenty of business benefits while requiring a moderate to low investment. But to be able milk it for an extended period and prevent early decline, you must not become complacent and neglect your product.\nKeep an eye on market developments including changes in user behaviour, moves by competitors, and new trends that may affect your product. Continue to track the product performance and regularly check if the current strategy is working. And invest the money required to keep the product beneficial for its users.\nShould You Choose Option 2?\nThe second option is right for you if you don’t need to or if you can’t rejuvenate the product: New products are in the pipeline that can eventually replace your product, which are also referred to as question marks and stars, or you are able to secure new products through an acquisition.\nAlternatively, the effort to extend the lifecycle is just too big. This may be due to the product category losing its attractiveness, the product having been in maturity for too long, and / or poor code quality.\nAt the same time, you are happy to turn the product into a cash cow maximising the value it creates for the business while carefully managing the investment required.\n ","url":"https://www.romanpichler.com/blog/strategic-options-for-mature-products/"},{"date_scraped_timestamp":1710925629487,"host":"www.romanpichler.com","page_title":"Succeeding with Innovation and Maintenance","text":"\n \n Published on 6th August 2013\n \n \n \n \n \n \n \n Keeping a product successful can be tricky: New features have to be developed to ensure that the product stays beneficial and attractive. At the same time, smaller improvements and bug fixes are required to maintain the product. How can this be done? This post shares my answer how to balance innovation and maintenance work. \n Two Separate Concerns\nCreating new features and maintaining the existing code base are different types of work: The former requires dealing with uncertainty, acquiring new knowledge, and carrying out experiments. Making small, incremental changes entails few unknowns, and the work should be done with minimum effort and no failures or mistakes. I therefore prefer to apply different approaches for the two pieces of work, as the following picture illustrates:\nThe picture above shows two workflows: In the top one, a feature team turns new features into a new product version using a cyclic process like Scrum. In the bottom workflow, a maintenance team carries out small enhancements and bug fixes using a linear, Kanban-based process.\nSeparate Teams\nTo deal with innovation and maintenance work for the same product, I have a preference to work with a feature and a maintenance team, as this creates focus and it reduces task switching. It allows the team members working on new features to carry out focussed experiments, and it makes it easier for those doing the maintenance work to fix the bugs quickly. If you work with one small team, then consider forming two sub teams – particularly once the maintenance effort consumes more than 25% of the team’s capacity.\nA danger of employing separate teams is the creation of a two-class society with the cool feature developer doing the innovation work, and the poor old maintenance guys slaving away at mind-numbingly boring bug fixes. To mitigate this risk, people should regularly rotate between the feature and maintenance teams. This also encourages knowledge sharing and collective code ownership.\nHow often and how many people rotate is best determined on a case-by-case basis. For instance, two to three people could swap places at the end of each week or at the end of each fortnight, depending on which solution best balances team cohesiveness and knowledge sharing. If in doubt, discusses it with the development team in the next sprint retrospective.\nSeparate Processes\nInnovation and new feature development requires the ability to develop and test assumptions, to gather and analyse data, and to leverage the new insights. In other words, the feature team requires an iterative, feedback-driven process like Scrum.\nMaking small enhancements and bug fixes, however, does usually not require a cyclic, feedback-driven process, as there is little uncertainty present. Instead, the changes should be implemented and deployed in a fast and efficient manner. A linear, Kanban-based process is ideal for this job.\nJoint Ownership\nWhile using separate teams and processes for feature development and maintenance work can well be beneficial, separating product ownership is something you should avoid. I have intentionally positioned the product owner between the two workflows in the picture above, as the individual should own the existing product and the new product version. As the product owner, you should hence balance the two concerns and decide how much effort is spent on new feature development vs. maintenance in a given timeframe.\nThis may also mean that you dedicate an entire sprint or even an entire release to carry out the necessary maintenance work and remove technical debt thereby future-proofing your product. Apple did something similar with Mac OS X. The company published a new version called Snow Leopard in 2009, which was largely a maintenance release that took\nIf you want to make the goal of a major release to future-proof your product, then I recommend using your product roadmap to show when the planned work is likely to tae place and get stakeholder buy-in.\n ","url":"https://www.romanpichler.com/blog/innovation-and-maintenance/"},{"date_scraped_timestamp":1710925708275,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/?replytocom=152829"},{"date_scraped_timestamp":1710925709952,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/?replytocom=152825"},{"date_scraped_timestamp":1710925714930,"host":"www.romanpichler.com","page_title":"Succeeding with Scrum: 10 Tips for Product People","text":"\n \n Published on 14th February 2023\n \n Last Updated on: 7 Nov 2023\n \n \n \n \n \n \n Scrum is not a product management framework. But it can be tremendously valuable for product people: It can help you make the right product decisions and deliver great products if it’s correctly applied. In this article, I share ten tips to help you maximise value delivery with Scrum. \n \nListen to the audio version of this article:\n1 Complement Scrum with a Product Strategy Process\nScrum is a simple framework that helps teams develop successful products. It achieves this by using sprints to create product increments, collecting feedback from users and stakeholders, and adapting the product with the insights gained.[1]\nAs simple as this sounds, there is a catch: To create value with Scrum, you must understand who the users and customers are, why people would want to use and pay for the product, which business benefits it should generate, and, in the case of commercial products, which features differentiate it from competing offerings. Otherwise, you might ask the wrong people for feedback on the increments and hence draw the wrong conclusions. What’s more, you’ll struggle to determine the right product backlog items. How can you capture the right user stories, for instance, if you are unsure who the users are and why they want to use the product?\nYou should therefore do just enough product work before you start using Scrum and before you add any items to the product backlog. But don’t stop there. Continue the discovery and strategy work while the product is being developed. This includes interviewing and observing users, using key performance indicators (KPIs) to track the value of the current product version, keeping an eye on the competition, and monitoring market trends.[2]\nIf this sounds complicated, then think about common everyday activities like riding a bicycle. Before you can set off, you first have to consider where you want to go and how you will get there—much like the initial discovery and strategy work I mentioned. To move forward, you’ll have to pay attention to the execution: push the pedals, keep your balance, and change gears. But this is not enough. To get to your destination safely, you’ll have to continuously look ahead, avoid obstacles, and possibly adjust the route.\nScrum is like a bicycle; it helps you move forward. But it doesn’t tell you where to go and how to get there—that’s what the discovery and strategy work does.\n2 Use Scrum for Products that Experience Uncertainty and Change\nScrum is often seen as the standard way to create digital products, and I have met more than one company where the product managers were told to be agile and do Scrum. But like any tool, Scrum has its benefits and limitations.\nI find that the framework is best suited for products that are affected by a significant amount of uncertainty and change. These are typically brand-new and young products as well as products that are experiencing a bigger change, for example, to extend their life cycle by addressing a new market segment or by replacing some of the technologies.\nBut if your product is in a steady state, for instance, if it is mature, and you focus on incremental enhancements and bug fixes, then you may find it more beneficial to use a Kanban-based agile process instead of Scrum.\nTo put it differently, there is no one right way to develop products and deliver solutions—just like there is no single bicycle that is perfect for every terrain. A road bike, for instance, is great for riding on smooth surfaces. But a mountain bike is better for riding offroad.[3]\n3 Look beyond the Product Backlog and Use Additional Product Management Artefacts\nThe product backlog can be a great tool to capture the outstanding work to deliver a product. But it’s not enough on its own. To successfully manage your product and maximise value delivery, you should use additional artefacts including the following five:\nAn inspiring vision that describes the ultimate reason for offering the product;\nA validated product strategy that captures your approach to realise the vision and make the product successful.\nAn outcome-based, goal-oriented product roadmap, which shows how you intend to implement the strategy and states the specific benefits the product should create in the next, say, twelve months;\nKPIs that measure the value your product creates and help you understand if the strategy is working;\nA business model that explains how you intend to realise the desired business benefits and in the case of a commercial product, how it is monetised.\nNote that none of the five artefacts is part of Scrum. But this does not mean that they cannot or should not be used in combination with the framework. As I mentioned earlier, Scrum is not a product management framework. It therefore offers only limited support for product people.\n4 Take Advantage of Product Goals\nI like to think of a product goal as the specific outcome that a product should achieve in the next two to three months, for example, to increase conversion, to decrease churn, or to future-proof the product by removing technical debt.[4] Using product goals offers you the following four benefits:\nFirst, they focus and direct the product backlog. Many backlogs I have seen were too long and too detailed. But such a backlog is difficult to prioritise, refine, and update. It makes it hard to successfully deliver a product. Using a product goal addresses this issue: You only add an item to the backlog if it helps you meet the goal. Otherwise, you discard it, at least for now.\nSecond, product goals provide a continuity beyond the current sprint and help align everyone involved in delivering the product: Everybody should be working on the same product goal at a given point in time.\nThird, product goals help you connect the product roadmap and the product backlog, assuming that you use a goal-oriented plan like my GO product roadmap. Choose the next outcome on the roadmap as your product goal and copy it into the product backlog.\nFourth, product goals help you discover the right sprint goals, which, in turn, direct the work of the development team. Simply ask yourself, “What is the next step we have to take to move forward and meet the product goal?”\n5 Inspect and Adapt to Maximise Value\nIf applied correctly, Scrum removes most of the guesswork from delivering a product. Instead of writing down the requirements before any development has taken place and hoping that they are comprehensive and correct, you start with a sketchy product backlog, build a first increment, show it to users, customers, and stakeholders, and evaluate their feedback. \nThis enables you to quickly try out new ideas and learn which ones create value and which don’t. To put it differently, Scrum’s iterative nature allows you to make data-informed product decisions thereby maximising the chances of delivering a product that does a great job for the users and customers.\nTo successfully inspect and adapt your product, collect feedback early and often, for instance, by demoing or releasing product increments. Use the data you gather to validate your decisions and generate new ideas. Answering the following four questions with help you with this:\nAre you developing a product that is usable and beneficial for the users? Does it offer the right user experience (UX) and the right functionality?\nCan the product be successfully offered? For example, can it be effectively marketed, sold, and serviced?\nHow can you further improve the product to maximise the value it creates, for example, by enhancing, adding, or removing a feature?\nWhat changes should you make to the product backlog? Will any of them impact the product roadmap and require an update?\nNote that frequently adapting your product requires that it’s easy to modify the code. If the software is brittle and the code quality is poor, changing the product will take longer and be more expensive. It is therefore worthwhile to measure the code quality and minimise technical debt.\n6 Fully Leverage the Product Backlog\nI find it ironic that the only product management artefact Scrum offers is commonly misapplied. To take full advantage of the product backlog and leverage it to deliver a great product, follow these five tips.\nFirst, use the product backlog for what it’s good at—as a tactical product plan that captures product functionality, for example, in the form of epics and user stories.\nSecond, use a product goal to direct the product backlog, as I recommended earlier. This will result in a concise and focused backlog that is relatively easy to manage and change.\nThird, prioritise the product backlog. I like to use risk, cost-benefit, and dependencies to determine the right order, especially for a backlog that is governed by a product goal.\nFourth, regularly update the backlog by using the data you collect from users, customers, and stakeholders based on the latest product increment. Remove, add, and adjust items. Ensure that the high-priority items are ready to be delivered in the next sprint.\nFifth, involve the development team members in the backlog work. This leverages their expertise, it helps you discover technical risks, and it leads to better, clearer product backlog items.\n7 Don’t Get Hung up about the Term Product Owner\nAs you probably know, the person in charge of the product is called product owner in Scrum. The idea behind the name choice is simple: The person who fulfils the role has to be empowered to make a product decision when no agreement can be reached. Figuratively speaking, they should “own” the product on behalf of the company.\nBut in my mind, it doesn’t matter if people refer to you as the product owner, product manager, or something else. What does matter is that you have the right decision-making authority, that you are committed to offering a product that benefits its users and the business, and that you show empathy and respect to the people who work with you.\n8 Guide the Development Team\nA development team in Scrum is more than a bunch of people writing software. It’s a cross-functional, self-managing group that incrementally delivers a usable and valuable product.[5] To help the team do a great job, follow these five tips:\nFirst, involve the team members in the discovery/strategy work in addition to the product backlog refinement. While you might be concerned that this reduces the ability to deliver functionality, including team representatives in the discovery-related work allows them to acquire relevant knowledge about the users and to research new technologies and tools. This leads to better design and implementation decisions and a better product.\nSecond, use a sprint goal to describe the desired outcome of each sprint. Ensure that the team members agree with the goal and that it moves you closer to your product goal.\nThird, allow the team to own the work in the sprint. Let the members freely determine what has to be done and how much work can be done. Additionally, don’t interfere with the team’s self-management. It’s the team’s responsibility to organise their work and reach the sprint goal, not yours.\nFourth, hold the team accountable for meeting the agreed sprint goal. Do not put up with a team that repeatedly over promises and under delivers. Address the issue in the next sprint retrospective and together determine the right improvement measures.\n9 Align the Stakeholders\nAs the person in charge of the product, you usually need the stakeholders’ support to successfully deliver a product. The following four tips will help you align and guide them:\nFirst, focus on the key stakeholders, the individuals who take an interest in your product and whose help you need to progress and provide it. For a commercial product, they are likely to include a marketer, a sales rep, and a customer service team member. \nSecond, engage the individuals early and regularly. The stakeholders should participate in the discovery and strategy work, and they should regularly attend the sprint review meetings. The latter allows them to see how the product is progressing, offer their feedback, and share their ideas.\nThird, form a product team. Scrum is a team-based approach. While it promotes a Scrum team, this group does not include any stakeholders. I therefore recommend creating a larger team, which extends the Scrum team and includes the key stakeholders. I call this group the product team.\nFourth, don’t be afraid to say no to the stakeholders and hold them accountable for meeting agreed goals. A common mistake I see product people make is to believe that they have to please the stakeholders. But that’s wrong. Your job is to deliver a successful product and maximise the value it creates—not to make the stakeholders happy.\n10 Don’t Do Scrum without an Effective Scrum Master\nHaving an effective Scrum Master truly is crucial when you want to use Scrum to maximise value delivery. Unfortunately, the role is often not filled. Other times, Scrum Masters are stretched too thinly, or they lack the necessary skills.\nIf that’s the case for you, then don’t make the mistake of taking on the role. This will make your job even more challenging and stressful. Instead, address the issue. If the role is not filled, then help the decision makers in your company understand that Scrum Masters are not optional.\nIf you have a Scrum Master, but you are not happy with their work, then share your perspective with them in a constructive, non-judgemental way. Offer your help, when possible and appropriate. If this does not improve the situation, then it might be best to look for another person who can play the role in a more effective way.\nBonus Tip: Practise Sustainable Pace\nAs the person in charge of the product, you have a demanding job with a range of diverse duties that compete for your time and attention. This makes it easy to work too hard and exhaust yourself. To stay healthy, motivated, and productive, look after yourself and practise sustainable pace. The following four recommendations will help you with this:\nFirst, focus on your job. Don’t take on other responsibilities, at least not permanently, and only attend meetings that require your presence.\nSecond, delegate and share some of your work. For example, the development team might be happy to carry out some of the backlog refinement work on their own. Additionally, involve other product people and share the work if the product grows and the product management effort gets too much for one person.\nThird, don’t neglect important, non-urgent tasks. It can be tempting to skip the continuous discovery and strategy work. But this usually means that you overlook opportunities and threats and therefore generate more work for yourself in the future.\nFourth, take regular breaks and don’t get into the habit of routinely working overtime. Use your lunch breaks and holiday allowance to recharge your batteries. This will enable you to deliver great products while being healthy and well.\nNotes\n[1] You can think of a product increment as a reusable prototype, as a step towards a new product or a new product version/release.\n[2] While I’ve developed a product strategy framework and strategy tools like my product vision board that connects to an agile, Scrum-based process, I am certainly not the only person to recommend complementing agile development practices with strategy and discovery. Shout-out to Ellen Gottesdiener and Gabby Benefield for their work.\n[3] For simplicity purposes, I ignore the option to use Scrum to carry out strategy work using discovery sprints. As I explain in my book Strategize, I find that a Kanban-based process is a better choice for this job.\n[4] Product goals are a comparatively new addition to Scrum. They were first introduced in the 2020 Scrum Guide.\n[5] The 2020 Scrum Guide has replaced the term development team with “developers.” But as you’ve probably noticed, I use the older, more established term in this article.\n ","url":"https://www.romanpichler.com/blog/succeeding-with-product-delivery-and-scrum/?replytocom=150317"},{"date_scraped_timestamp":1710925627827,"host":"www.romanpichler.com","page_title":"Sustainable Pace in Product Management","text":"\n \n Published on 6th November 2018\n \n Last Updated on: 29 Jun 2023\n \n \n \n \n \n \n Working in product management is rewarding but demanding. As product people, we have a large set of diverse responsibilities, which often translates into a high workload. But continuously working too hard carries the risk of becoming chronically tired and stressed and sacrificing our health. This article discusses techniques that help you achieve a healthy, sustainable pace and avoid the danger of being constantly overworked. \n What is Sustainable Pace?\nSustainable pace is an important agile principle. The Agile Manifesto defines it in the following way: “The sponsors, developers, and users should be able to maintain a constant pace indefinitely.” The goal is to create a healthy work environment and avoid that people are routinely overworked, lose their creativity, make mistakes, and eventually sacrifice their health. A framework like Scrum offers specific techniques that ensure sustainable pace—unfortunately, only for development team members and not for product people.\nBut sustainable pace is equally important for you, the person in charge of the product. You have a demanding job with a range of diverse responsibilities. These include interviewing users, working on the product roadmap, updating the product backlog, engaging with the stakeholders, and working with the development team, to name just a few. As all these duties compete for your time and attention, it is all too easy to do too much, work too hard, and exhaust yourself—which is neither good for you, nor for your product.\nSay No\nIf you find that you are overworked and struggle to cope with your workload, then start by reflecting on the tasks you carry out. Are all of these part of your actual job? I find that product people often take on responsibilities that belong to other roles thereby making a demanding job even harder. A common example is looking after the development team. While it’s great to care about the team, facilitating effective collaboration within this group is not your responsibility. That’s the job of the Scrum Master.\nI know that some product people don’t have a Scrum Master working with them or that the Scrum Master’s work is not effective—the individual might be too stretched or not adequately qualified. But if that’s the case for you, then I recommend addressing the issue rather than covering another person’s job. The latter will stabilise an ineffective setup and cause you to be overworked or neglect some of your core duties, neither of which is desirable.\nTherefore, focus on your actual job—making or keeping the product successful. Do not take on additional responsibilities like improving the development process, leading the dev team, making UX design decisions, or creating a marketing strategy. That’s the responsibility of the Scrum Master, development team, and marketing stakeholder respectively, not yours. Have the courage to say no even if it’s difficult: There is no lasting benefit in you becoming the general dogsbody for the product.\nBe Proactive\nNext, minimise the amount of unplanned work and firefighting you encounter. I find that many product people are so busy with urgent tactical work, such as refining user stories, working with the development team, or answering a support request, that they neglect important strategic tasks like regularly assessing if the product strategy is still working. This can cause nasty surprises like a competitor leapfrogging you, which then leads to more, unplanned work, as you desperately try to catch up with the competition.\nConsequently, make enough time for strategic work. Regularly assess how your product is doing and how effective your current product strategy is, for example, by holding collaborative strategy reviews, as I describe in more details in the article “Establishing an Effective Product Strategy Process”. This will allow you to play a proactive game and be responsive rather than having to react to surprises.\nShare the Work\nIf you find that you are simply too busy to regularly strategize and cannot let go of any responsibilities, then consider sharing your workload with development team, stakeholders, and other product people.\nWith the Development Team\nIf you spend a lot of time working on the product backlog trying to create perfectly crafted user stories or if you have to answer plenty of questions during the sprints, then you are probably not effectively sharing the product backlog work. Managing the product backlog should be a collaborative effort. The development team members should actively participate in the backlog work, discover, capture and update stories together with you, and help you prioritise the product backlog. This leads to better product backlog items, reduces the amount of questions you have to answer in the sprint, and frees up your time.\nAdditionally, you are often able to delegate (some of) the refinement work to the development team—assuming that the team has acquired enough knowledge about the users and product and that you trust the individuals to make the right decisions. This will further reduce your workload and enable you to spend more time on important strategic tasks.\nWith the Stakeholders\nSome product people I have met spend a significant amount of their time on “politics”: negotiating deals, convincing people, selling ideas to important stakeholders. Consequently, stakeholder management can feel like herding cats. While you will always encounter stakeholder challenges, I find that a lot of time spent with negotiation, persuasion, and re-alignment activities can be saved when you embrace a participatory decision-making process.\nThe idea is simple: Involve the key stakeholders—together with development team members—in important product decisions, for instance, by using consensus or product person decides after discussion as the decision rule. This will increase people’s buy-in and reduce the need for continued re-alignment meetings or possibly some crisis management if you find out that people did not implement an important decision. (You can find out more about participatory decision-making in my article “Use Decision Rules to Make Better Decisions”.)\nWith Other Product People\nIf the previous two measures are not appropriate, then consider how big your product is and how many development teams you work with. As a rule of thumb, if there are more than three teams, then you may have to involve additional product people to help you manage the product. You could have, for example, one person in charge of the overall product and additional people who look after product features, as the picture below illustrates.\nAlternatively, you may want to consider breaking up your product, for example, by unbundling one or more features and launching them as a separate product like Facebook did with the Messenger app in 2014. Both options will reduce your workload and make it easier to achieve sustainable pace. (Please refer to my article “Scaling the Product Owner Role” for more information on how to jointly manage a product.)\nPrioritise\nMany years ago, I was discussing a lengthy requirements document with the product manager in charge of a healthcare product. As there was too much work to do, I suggested prioritising the requirements. I’ll never forget the look I received and the answer the individual gave me. She said: “That’s impossible. They are all important!” The issue is, of course, that without the ability to prioritise, we don’t know when to say yes and when to say no. Consequently, we are likely to take on too much work and trying to accomplish too many things at once.\nIf you find it hard to prioritise—be it the order in which items should be delivered or if you should accept a feature request—then you will benefit from establishing clear and shared goals. As described in my article “Leading through Shared Goals”, I like to work cascading goals that form the chain shown in the picture below.\nThe goals in the picture above are systematically linked and constitute a hierarchy with the vision at the top and the sprint goal at the bottom. With the right goals in place, you are able to assess if you should add a new feature, for example.\nHere is how it works: If the feature helps you reach your current product goal, you should probably take it on. If it doesn’t, then include it in the product roadmap—assuming it serves a user or business goal stated in the product strategy. If that’s not the case, then kindly but firmly say no to it. In the story above, the product manager would have benefited from having a clear and agreed product goal. This would have allowed her to order the requirements by considering how important each one was for meeting this goal.\nTherefore, ensure that you work with meaningful and agreed goals. This will not only help you make the right prioritisation decisions, it will also reduce the risk of being overworked and help create a sustainable pace.\n ","url":"https://www.romanpichler.com/blog/sustainable-pace-product-management/"},{"date_scraped_timestamp":1710925468678,"host":"www.romanpichler.com","page_title":"Technical Debt and Product Success","text":"\n \n Published on 4th December 2018\n \n Last Updated on: 2 May 2023\n \n \n \n \n \n \n Similar to a company experiencing financial debt, products can incur “technical debt”: This happens when wrong or suboptimal architecture, technology, and coding decisions are taken. Consequently, the architecture may not be as loosely coupled as it should be, and the code may be messy rather than clean. This article explains why product people should care about technical debt and it offers strategies for addressing it. \n \nWhy Technical Debt Matters for Product People\nAs the person in charge of the product, you may not be terribly concerned about how clean and well-structured the code is. But the quality of your product matters: It directly impacts your ability to achieve strategic product goals and make your products successful: Technical debt makes it hard to experiment with new ideas, release new features, and quickly respond to user feedback. [1]\nThe messier the code and the less modular the architecture is, the longer it takes and the more expensive it is to change your product. In the worst case, you have to go through a rewriting exercise where some parts or even the entire product are being redeveloped. This is similar to financial debt: When the debt is not paid back, the interest payments can multiply and eventually cripple the business.\nTechnical Debt and Your Product\nTo understand if and to what extent your product is affected by technical debt, talk to the development team, for example, in the next sprint retrospective. I find that development team members usually have a good understanding where issues in the architecture and code are.\nAdditionally, consider asking the team to collect data that shows how much technical debt there is, where it is located, and how bad it is, for example, by using code complexity, dependencies, duplication, and test coverage as indicators. There are a number of code analysis tools available that collect the appropriate data and show how adaptable the architecture and how clean the code is. [2]\nOnce you understand the amount and severity of tech debt in your product, analyse its impact on meeting the product goals and achieving product success together with the development team. Take into account the cost of delay, the cost of not addressing the technical debt now but delaying it to a future point in time. Should you, for example, continue adding new features to the product for the next six months and plan in bigger technical improvement work afterwards? Or would it be better to address the worst debt now?\nFurthermore, consider the life cycle stage of your product. Technical debt is particularly bad for new and young products: If your product has a closely-coupled architecture with lots of dependencies, if it lacks (automated) tests and documentation, or if it is full of spaghetti code, then experimenting with new ideas and adapting the product to user feedback and new trends will be difficult and time-consuming. Similarly, if you want to extend its product life cycle, you may have to first remove (some of) the technical debt before you can make the necessary changes and add new features or create a variant.\nHaving said that, it is a valid strategy to launch a minimum viable product (MVP) whose architecture, technology, and code has been intentionally compromised in order to reduce time to market—as long as the quality is good enough to adapt the product to feedback from the early market. But apply this strategy with caution: You will have to spend time addressing the technical debt incurred and putting your product on solid technical foundations. This should be done before reaching product-market fit, as you will otherwise struggle to scale up and keep your product growing.\nIf, however, your product is in maturity—or even decline—and you do not intend to extend its life cycle but focus on maximising the business benefits it generates, you probably want to carry out as little debt removal work as possible.\nOptions for Removing Technical Debt\nOnce you’ve established how much tech debt there is and how soon it needs to be addressed, you face two choices: You can either make time for a focused effort and dedicate a period of time to removing the debt, or you can carry out the work in parallel to enhancing your product and adding new functionality.\nWhenever you face a significant amount of tech debt that constitutes a barrier to innovation, you should opt for a dedicated period to remove it. Apple did this with Mac OS X Snow Leopard, which was released in 2009 after nearly two years of work. While Snow Leopard didn’t provide any new functionality, it created the foundation for future releases by improving performance and reducing the memory footprint of the operating system, for example.\nI am not suggesting that you should necessarily spend a year or more refactoring your product, as Apple did. But it can be more effective to make a concentrated effort and invest a few months, or at least a sprint or two, in cleaning up the software, as opposed to doing it in drips and drops across several releases. You intentionally slow down, so to speak, to go faster afterwards.\nIf a refactoring release is the right approach for you, then your product roadmap should reflect this: It should show a release dedicated to future-proofing the product and making the necessary technical changes.\nBut if the technical debt is not as significant and does not need to be addressed as urgently, then plan in time for removing some debt in every sprint while continuing to improve the user experience and add or enhance features. You can do this by adding tech debt remedial items to the product backlog. This makes the necessary work visible and allows you to track it across sprints and releases. Make sure, though, that the necessary work is actually carried out and requests for more functionality don’t prevent the removal of technical debt. (My article “Succeeding with Innovation and Maintenance” discusses how you can fix bugs and add new features at the same time.)\nPreventing Technical Debt\nIntentionally compromising the code quality to get a release out and accepting technical debt is all good and well as long as you actually remove the debt afterwards. Often, however, technical debt is created unintentionally in my experience.\nDigital products require ongoing attention to their architecture and code. Otherwise, the product quality will deteriorate, which leads to an increase in technical debt. This is very much like maintaining your bicycle on a regular basis, ideally after every ride. And the more you rely on your bike, the more you should care about it, clean it, and fix or replace faulty parts. The challenge is to make time for the necessary clean-up and maintenance work and view it as part of the bike riding experience, rather than a chore.\nThe same is true for digital products: Some teams feel so rushed and pressured that they repeatedly cut corners and don’t apply good software craftsmanship practices like evolutionary architecture, test-driven development, pair programming, and continuous integration. But these practices do not only help create an adaptable architecture and clean code base. Used properly, they will speed up development and allow you to release new features and functionality faster, not slower—the latter being a common misconception amongst product people in my experience. The opposite is also true: If development teams don’t apply the right practices and tools, then the software is likely to be brittle, not soft and malleable.\nIf you want to prevent future technical debt, then give your development team the time to learn, apply, and improve the right development practices. In fact, you should expect that the development team creates product increments with the right quality. A great way to do this is to employ a Definition of Done that states code complexity limits and test coverage targets, and to only accept work results that fulfil this definition.\nNotes\n[1] Technical debt is a concept originally suggested by Ward Cunningham and nicely explained by Martin Fowler. Thanks to Yves Hanoulle for encouraging me to write about it.\n[2] I recommend that you add software quality to your KPIs and routinely track it. Quality is leading indicator: If it is decreasing, then you know that changing the product will become more and more difficult unless you do something about it. Knowing if and how much technical debt is building up helps you be proactive and avoid nasty surprises.\n ","url":"https://www.romanpichler.com/blog/technical-debt-and-product-success/"},{"date_scraped_timestamp":1710925652829,"host":"www.romanpichler.com","page_title":"The Definition of Ready in Scrum","text":"\n \n Published on 16th December 2010\n \n Last Updated on: 2 Feb 2024\n \n \n \n \n \n \n “Ready are you? What know you of ready?” says Yoda to Luke Skywalker in the Star Wars movie “The Empire Strikes Back.” Just as it’s important for Luke to understand what “ready” means, so is it for product owners. Luckily, you don’t have to become a Jedi to find out. Reading this post will do. \n \nWhy Ready Matters\nA few years back I was asked to help a team that has trouble meeting commitments. After taking a look at the product backlog, it became clear why the dev team had trouble making realistic, achievable commitments: Most of the high-priority items were big, coarse grained stories. None of them was sufficiently refined; none of them was ready.\nThe idea that the high-priority product backlog items should be “ready” or “workable” dates back to the first Scrum book published in 2002. Ready items can be pulled into the sprint by the team and quickly turned into a product increment, as the following image illustrates.\nIf the user stories that are likely to be worked on in the next sprint aren’t ready, then the team will struggle to make a realistic commitment or forecast in the sprint planning meeting and fully meet the sprint goal. It is therefore important to ensure that there are enough ready items on the product backlog before a sprint starts. Remember: A sprint is a function that takes high-priority items and turns them into a product increment. If you don’t pay attention to what goes into a sprint, it’s garbage in, garbage out. And garbage, as we know from the first Star Wars movie, is not a good place to be stuck in.\nWhat Ready Means\nA “ready” item should be clear, feasible and testable, as I suggest in my book Agile Product Management with Scrum. A story is clear if all Scrum team members have a shared understanding of what it means. Collaboratively writing user stories, and adding acceptance criteria to the high-priority ones facilitates clarity. Bear in mind that development teams that are new to the product or market/domain typically have a need for clearer, more detailed stories. As the team member’s knowledge increases, stories can often become less detailed.\nAn item is testable if there is an effective way to determine if the functionality works as expected. Acceptance criteria ensure that each story can be tested. As a rule of thumb, I like to employ three to five acceptance criteria per user story.\nA story is feasible if it can be completed in one sprint, according to the definition of done. This implies two things: The item must be small enough, and it must not be too complex. I prefer to work with stories that can be implemented and tested within a few days, as this allows the product owner to provide feedback on the software during the sprint.\nWhat a Ready Story Looks Like\nA ready story is a detailed user story with a narrative and acceptance criteria. It should also be clear if there are any story-specific operational qualities such as performance, and what the user interface design roughly looks like. You can simply capture the qualities on constraint cards, and the design on a piece of paper. The artefacts are then attached to the story, as the picture below illustrates:\nHow Ready Is Best Achieved\nThe best way to ensure that the high-priority product backlog items are ready is to work on the backlog together with the development team. This tends to naturally lead to workable stories. What’s more, it leverages the creativity of the team members, creates a shared understanding, and reduces the amount of story-related questions during a sprint.\nYou might find that over time, you don’t need a definition of done any more, as everybody understands what it takes to have ready product backlog items available at sprint planning, and all development team members contribute to discovering and refining user stories.\n ","url":"https://www.romanpichler.com/blog/the-definition-of-ready/"},{"date_scraped_timestamp":1710925617393,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2733"},{"date_scraped_timestamp":1710925581338,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=67472"},{"date_scraped_timestamp":1710925612331,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2740"},{"date_scraped_timestamp":1710925605423,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2742"},{"date_scraped_timestamp":1710925620049,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2721"},{"date_scraped_timestamp":1710925593395,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2745"},{"date_scraped_timestamp":1710925617993,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2724"},{"date_scraped_timestamp":1710925583354,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=40466"},{"date_scraped_timestamp":1710925601920,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2737"},{"date_scraped_timestamp":1710925619125,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2722"},{"date_scraped_timestamp":1710925613795,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2719"},{"date_scraped_timestamp":1710925580733,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=67456"},{"date_scraped_timestamp":1710925589379,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=40408"},{"date_scraped_timestamp":1710925614978,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=2732"},{"date_scraped_timestamp":1710925582520,"host":"www.romanpichler.com","page_title":"The GO Product Roadmap","text":"\n \n Published on 25th November 2013\n \n Last Updated on: 28 Apr 2022\n \n \n \n \n \n \n The product roadmap is an important product management tool. But effectively applying it can be challenging. Roadmaps are too often focused on features. This can make it hard to achieve agreement and alignment, and it can result in a plan that is too detailed and prone to change. This article introduces a new product roadmap template: the GO product roadmap, a goal-oriented roadmap that combines goals and features in a novel way, making it ideally suited for agile, dynamic environments. \n Introduction\nA product roadmap is a high-level, strategic plan, which describes how the product is likely to evolve over the coming months. Using such a plan creates a continuity of purpose; it sets expectations and aligns the stakeholders and development teams; it facilitates prioritisation and unburdens the product backlog; it can help you acquire a budget; and in the case of a public product roadmap, it can also provide reassurance to the customers.\nUnfortunately, I find that many product people struggle to fully leverage product roadmaps. All too often, the plans are dominated by features: There are too many features, and the features are sometimes too fine-grained. Such a roadmap makes it hard to secure agreement and create alignment; it overlaps and competes with the product backlog; and its features are sometimes regarded as a commitment rather than as a part of a high-level plan that is likely to change. \nFaced with this situation, I have developed a new goal-oriented, agile roadmap—the GO product roadmap. As its name suggests, goals or outcomes are at the heart of this plan, not features or other pieces of functionality. It is based on my experience of teaching and coaching product managers and product owners, as well as using product roadmaps in my own business. I did not, however, invent this specific roadmap format. It has been around for several years, and I honestly do not know who first suggested it.\nThe GO Product Roadmap Explained\nThe following pictures shows what the GO product roadmap looks like. You can download a PDF template by simply clicking on the picture.\nLet me start explaining the structure above by discussing its central and most important element, the product goal, or goal for short, which is located right in the centre on the third row. I like to start creating a GO product roadmap by identifying the desired outcomes or benefits the product should create over the coming months. These goals should describe the specific value the product will create and answer the question of why it is worthwhile to (continue to) invest time, money, and energy in developing the product. Sample goals are acquire new users, retain users by enhancing the user experience, or accelerate development by removing technical debt.\nAdditionally, the product goals should be in line with the needs and the business goals described in the product strategy. In fact, a good way to discover the right product goals is to start with the product strategy and ask yourself how the user, customer, and business goals it contains can be broken into smaller, specific, and measurable objectives. Then order the newly created goals to tell a meaningful story of how the product is likely to evolve. I recommend using one product goal at a time. This creates clarity and alignment, and it makes it easier to track progress and understand if the desired outcome has been achieved or not.\nWhile I find it very beneficial to work with goals, in practice these have to balanced with time frames or dates—at least when you create an internal roadmap whose purpose it is to align and guide the stakeholders and development teams. Say you work on an entertainment product like a new game that has to be available in time for the Christmas sales, then meeting this deadline will be important to create the desired value. I have therefore included a row in the template above that encourages you to state when you intend to meet the goal and realise the desired outcome or benefit. If you use the GO product roadmap to capture and external, customer-facing roadmap, then you might want to either work with coarse-grained time frames or simply remove the row. For more advice on dates, please see my article “Should Product Roadmaps Have Dates?“\nThe second row states the name or version if meeting the goal results in a major release or new product version. Examples include iOS 14 and Windows 10, as well as the more creative release names Jelly Bean and Marshmallow of Android 4.1 and 6.0.\nThe fourth row provides the features or product capabilities necessary to reach the goal. The features are therefore a means to an end, but not an end in themselves: They serve to create value and to reach the goal and they should be closely aligned it. You can think of the features as the output required to create the desired outcome. Try to limit the number of features for each goal to three, but do not state more than five. Don’t make the mistake of detailing the features. Your product roadmap should be a high-level plan, and the product details should be covered in the product backlog. Epics and user stories don’t belong on your roadmap.\nThe last row states the metrics, the measurements that help you determine if a goal has been met, and if the desired value has been created. Using metrics helps ensure that the product goals identified are specific and measurable. When stating the metrics, consider how long it will take to determine goal attainment after the product has been made available. For instance, if your goal is to acquire 5-10% more users, then you might have to wait a few days or even weeks to be able to understand if you’ve achieved this goal. You may want to add the metrics for the current product goal to the set of product KPIs used to determine the product performance.\nYou can also watch me explain the GO roadmap template in the video below.\nA Sample GO Product Roadmap\nTo illustrate how the GO template can be applied, imagine that I’d like to offer an app that helps people eat more healthily. Here is what the GO product roadmap might look like:\nNote that I have used compound goals in the example above, business and user goals that are closely related and depend on each other. While you can happily work with only business goals on your roadmap, adding user goals helps ensure that the people who should benefit from the product are not forgotten. Additionally, note that the metrics sections from version two onwards will have to be refined before the appropriate goals are being worked on. But that’s OK in my mind, as long as the product roadmap is regularly reviewed, updated, and improved. ","url":"https://www.romanpichler.com/blog/goal-oriented-agile-product-roadmap/?replytocom=75083"},{"date_scraped_timestamp":1710925659903,"host":"www.romanpichler.com","page_title":"The Product Canvas","text":"\n \n Published on 16th July 2012\n \n \n \n \n \n \n \n This post introduces my Product Canvas, a simple but powerful tool that helps you create a product with a great user experience and the right features. It combines agile development and user-experience design by complementing user stories with personas, storyboards, scenarios, design sketches and other UX artefacts. Read on to find out more. \n A Sample Canvas\nThe best way to understand the Product Canvas is to look at an example. Imagine that we want to develop a game that helps children learn about music and dancing. A canvas for such a game could look like the one below.\nThe sample Product Canvas above contains the product name, the product (or release) goal and the metrics to measure if the goal has been met. The first bigger section states two personas characterising the target users and customers with their needs. The next section sketches important aspects of the product using epics to describe the product’s functionality, a mock-up to capture the user interface design, a storyboard to illustrate the user interaction, and a constraint card to express the platform for which the game is developed. The section on the right provides a goal for the next sprint and the details necessary to reach the goal.\nThe Sections Explained\nAs you have probably noticed, the Product Canvas combines form and function, a structure together with suggested techniques. The following diagram and the text below the sections of the canvas. You can download the canvas template for free from romanpichler.com/tools/product-canvas or by simply clicking on the picture below.\nName simply states the name or version of the product.\nThe Goal is the product or release goal, the objective that should be met, for instance, to acquire, activate or retain users. If you use the GO product roadmap than you can simply copy the relevant goal stated on the roadmap.\nThe Metrics provides the measure to determine if the goal has been met, for instance, number of downloads or daily active sessions. If you use the GO product roadmap than just copy the relevant roadmap metrics.\nThe Target Group describes the target customers and users as personas. The section explains who we believe is likely to use buy and use the product and why. I discuss personas in more detail in my post A Template for Writing Great Personas. Choose one primary persona – the persona you mainly create the product for. Employing a primary persona helps you make the right prioritisation decisions and create a product with a great user experience. Your primary persona should be at the top of the building block to signal its importance.\nThe Big Picture describes what is takes to meet the persona goals. It captures the user journeys, and the visual design required to create the desired user experience. As its name suggests, it wants to describe your product holistically at a high-level. The section is similar to the outline of a book: It captures the contents without discussing the details.\nScenarios, storyboards, workflow diagrams, and story maps are great techniques to describe the user journeys on the Big Picture. Each journey shows how a persona interacts with the product and the steps the individual has to take to meet a goal. The product functionality on the Big Picture is best captured as epics, which are big and coarse-grained user stories. Epics allow you to describe your ideas without having to commit to the details. This saves time, and it makes it easier to update the canvas with new insights. Constraint stories help you capture the nonfunctional requirements that impact the user experience and the software architecture. You can capture your visual design ideas on the Product Canvas as design sketches, mock-ups, screen-shots, and photos. The Big Picture design artefacts should focus on the critical design aspects of your product—for instance, the design of selected screens or pages.\nNone of these techniques are mandatory, of course. They rather provide you with a starting point. Choose those techniques that are appropriate for your product. Use additional ones as it suites your needs.\nThe Product Details provide a goal for the next iteration and just enough implementable items to reach the goal, for instance, to address a risk and to acquire relevant knowledge, or to complete a feature. Depending on the goal, I use different techniques to capture the implementable items. For goals that require coding, ready stories are very helpful. These are small, detailed stories that feed the next cycle and that help create a product increment or minimal viable product (MVP). They are derived from the epics, and are necessary to reach the sprint goal. Make sure you write acceptance criteria for your ready stories. Order the implementable items from one to n, for instance, first, second, third, and so on, to maximise the chances that you reach your goal.\nPutting the Users First\nThe canvas is designed so that the information flows from left to right starting with the personas. This puts the user at the center of the development effort, and it ensures that you develop a product that is beneficial and desirable.\nThe scenarios, storyboards, epics, design sketches, and constraints describe the future product, and the ready stories ensure that there are implementable items. I explain in more detail how you can create you canvas in my post “The Product Canvas Creation Workshop“.\nLearning and Emergence\nThe biggest challenge when developing a new product is to deal with uncertainty and lack of knowledge. We may not know, for instance, if there is enough demand for the product, or how users will interact with the product. The Product Canvas is designed as a learning tool: to sketch our initial ideas, to get enough stories ready for implementation, and to adapt and refine the content based on the insights gained. The following picture illustrates this cycle.\nConsequently, you should expect that your canvas changes as you learn more about the users and customers, and how to best address their needs. It’s common to deal with bigger changes involving clearing out and refilling one or more canvas sections including the section on personas.\nThe Business Model\nThe Product Canvas describes the target group and the product features, but not the business model including the revenue sources and the cost structure. While I have intentionally kept the canvas focussed, I have designed it to be compatible with the Alexander Osterwalder’s and Yves Pigneur’s Business Model Canvas. You can use the two canvases together, as the following picture illustrates.\nAs the picture above suggests, I use the Business Model Canvas to capture the market and value proposition at a high-level, and I state the details for a specific product on the Product Canvas.\nTools\nI like to work with a physical Product Canvas placed on the office wall, as this has three main benefits: First, it ensures that the relevant information is visible to the product owner and the team. Second, working with simple, yet effective tools such as paper cards and paper sheets facilitates effective collaboration. Third, having to work with limited wall space creates focus and prevents capturing everything that might be relevant. To create your own paper-based canvas, download and print out my free Product Canvas template.\nIf you require an electronic canvas, try the Canvas Model Design iPad app, or simply re-create the canvas in your favourite electronic tool. When working with Jira, I suggest that you keep the personas and the big picture in Confluence, and manage the product details in your Jira board.\n ","url":"https://www.romanpichler.com/blog/the-product-canvas/"},{"date_scraped_timestamp":1710925627055,"host":"www.romanpichler.com","page_title":"The Product Owner’s Guide to the Sprint Retrospective","text":"\n \n Published on 17th June 2014\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n The sprint retrospective is a key mechanism in Scrum to improve the way people work. This article shares my tips on how you can use the meeting as the person in charge of the product to strengthen connections and improve the work. \n The Retrospective in a Nutshell\nThe sprint retrospective is an opportunity to pause for a short while and reflect on what happened in the sprint. This allows the attendees to improve their collaboration and their work practices, to get even better at creating a great product.\nThe meeting takes place right at the end of the sprint after the sprint review meeting. Its output should be actionable improvement measures. These can range from making a firm commitment to start and end future meetings on time to bigger process changes, including switching from, say, Scrum to Kanban. The retrospective is not a finger-pointing exercise. As Mahatma Gandhi famously said: “Be the change you want to see in the world.”\nTake Part\nAs the Scrum product owner, you are a member of the Scrum team, which also includes the development team and the Scrum Master. While you are in charge of the product, you rely on the collaboration of the other Scrum team members to create a successful digital product. If you don’t attend the retrospective, you waste an opportunity to strengthen the relationship and to improve the collaboration with the development team.\nAdditionally, taking part in the sprint retrospective allows you to understand why the team requires time in the next sprint to carry out improvements such as refactoring the build script, or investigating a new test tool; and maybe more importantly, it helps you improve your own work.\nSay that some of the user stories the team had worked on did not get finished in the sprint. At first sight this looks like the development team’s fault. But analysing the issue might reveal that the size of the stories and the quality of the acceptance criteria contributed to the problem. As you are responsible for ensuring that the product backlog is ready, this finding affects your work: It indicates that you should improve the development team’s involvement in refining the stories to ensure that that they are ready, that there is a shared understanding, that they are feasible, and that they can be tested.\nBe an Active Participant\nDon’t make the mistake of attending the retrospective as a guest who will speak when asked but otherwise remains silent. Be an active participant instead. Use the sprint retrospective to get feedback on your work, and raise any issues that you want to see improved. Be collaborative and actively listen to the other attendees, but don’t shy away from addressing tough problems.\nHere are some questions that you may want to explore in the retrospective:\nIs the communication between the team and you open, honest, and trustful? If not, how can you improve it?\nAre the development team members happy with the time you spend with them? Are you available to answer questions and provide feedback on work results as needed?\nDo the team members actively participate in analysing user feedback and data, refining the product backlog, and getting stories ready for the sprint? Do you get enough support from the team to refine the backlog?\nDo the team members understand the big picture – the overall vision, the product strategy, and the product roadmap? Do you actively involve the team members in the product strategy work?\nHold a Retrospective with the Stakeholders\nAs important as it is, improving your collaboration with the development team and the Scrum Master is not enough. You will also benefit from trustful connections with the stakeholders, such as representatives from marketing, sales, customer service, finance, and legal.\nA great way to improve stakeholder collaboration is to schedule a larger retrospective, for example once every two or three months. Here are some questions that you may want to explore in an extended retrospective:\nDo the stakeholders feel sufficiently involved in the product strategizing and product roadmapping activities? Do they think that their ideas and concerns are taken into account?\nDo they regularly participate in joint meetings like product strategy reviews and sprint reviews? Are the meetings beneficial for them?\nDo you get enough support and commitment from the stakeholders? Do the individuals stick to shared goals and joint decisions?\nYou could discuss these questions one-on-one, of course. But jointly addressing issues and identifying improvement measures creates a sense of we-are-all-in-this-together; it helps create trust and it facilitates collaboration. Ask your Scrum Master to help you prepare and to facilitate the meeting. This allows you to contribute and share your perspective and needs.\n ","url":"https://www.romanpichler.com/blog/product-owner-sprint-retrospective/"},{"date_scraped_timestamp":1710925472043,"host":"www.romanpichler.com","page_title":"The Product Vision Board","text":"\n \n Published on 10th May 2011\n \n Last Updated on: 8 Jul 2022\n \n \n \n \n \n \n The vision plays an important role in bringing a new product to life: It acts as the overarching goal guiding everyone involved in the development effort. Equally important is the product strategy, the path chosen to attain the vision. Without a shared vision and an effective strategy, people are likely to pull in different directions, and the chances of creating a successful product are slim. While vision and strategy are key, describing them can be challenging. This post introduces the Product Vision Board, a tool that helps you capture the vision and product strategy. \n A Sample Vision Board\nTowards the end of 2012, I was exploring the idea of creating a software-based version of my product canvas tool that integrates seamlessly with other tools like JIRA and GreenHopper. To get started, I created an initial product vision board, which is shown below.\nThe product vision board above captures my assumptions about the users and the customers of the new tool, the needs the product should address, the key product features, and the value the product should create for my own business, Pichler Consulting. (I explain the sections of the board in more detail below.)\nAs you may have noticed, I have kept the information on the board concise. I did not, for instance, write personas and user stories, or create a design sketch. There are two reasons for this: First, I did not know enough about the users and customers at the outset to write personas and to describe the product in more detail. Second, I find that the product details are best captured in the product backlog.\nThe board was very valuable: It helped me think through my idea, and it allowed me to share my thoughts with my team, and with our development partner. Additionally, the product vision board helped me investigate the greatest risks by testing my assumptions, as I explain below. I now use the board for any new idea be it writing a new book, creating a new brochure, or updating a training course, and I help my clients apply the board.\nThe Vision Board Explained\nThe product vision board is the simplest thing that could possibly work to capture the vision and strategy of a product. It uses five sections as shown in the following diagram and explained below. You can download the template from the tools section of my website or by simply clicking on the picture below.\nVision states your overarching goal, the ultimate reason for creating the product, the positive change you want to bring about. Make your vision big and inspiring; use a brief statement or slogan; and ensure that the stakeholders and development team(s) support it, that it is shared. For more vision tips, please see my article 8 Tips for Creating A Compelling Product Vision.\nTarget Group describes the market or market segment you want to address. You should state who the product is likely to benefit, who its users and its customers are. Choose a homogenous, clear-cut target group, especially when creating a brand-new product.\nNeeds describe the product’s value proposition: the main problem the product addresses or the primary benefit it offers. The section should make it clear why people will want to use the product or pay for it. Capture what success looks like for the users and customers. If you identify several needs, prioritise them.\nProduct summarises the three to five features that make your product stand out and that are critical for its success. These are likely to correlate to its unique selling proposition, and they should address the needs identified. Don’t make the mistake of listing lots of features. Stick to a maximum of five. Capture the product details at a later stage in your product backlog.\nBusiness Goals, finally, explain why it’s worthwhile for your company to invest in the product. It states the desired business benefits, for instance, increase revenue, enter a new market, reduce cost, develop the brand, or acquire valuable knowledge. The latter can be just as valuable as the former: When Toyota shipped the Prius in 1997, for instance, the car was not earning any money. But it immediately developed its brand (“green car company”), and had gained an advantage in hybrid technology. Prioritise the business goals to create focus and state targets. Otherwise, it’s hard to measure the product performance and apply the right key performance indicators (KPIs).\nThere are, of course, other helpful tools available that help you capture your ideas, including Ash Maurya’s Lean Canvas and Alexander Osterwalder’s business model canvas. I may well be biased, but I like the simplicity of the product vision board: I find it beneficial to consider the target group, needs, key features and business goals when exploring an idea before thinking about monetisation and the business model.\nYou can also watch me explain the product vision board in the video below.\nResearch and Validation with the Product Vision Board\nThe product vision board is not only a thinking and communications tool, it also allows you to test your assumptions, and capture the newly gained insights. To get started, I find it helpful to identify the greatest risk or biggest uncertainty on the board. This creates focus, and it enforces a fail-fast: figuring out quickly what works and what doesn’t, which assumptions hold true, and which don’t.\nWhen I was working on my digital canvas idea, for instance, the greatest risk was initially misunderstanding the user needs, and potentially building a product that does not provide much value. I consequently decided to test my user needs assumptions before exploring further what features the tool should provide, or how the product should be implemented. I hence started carrying out a series of problem interviews, structured conversation with a prospect to understand the individual’s problems and goals without referring to the solution, and engaged in a few direct observation sessions.\nThese measures helped me understand the target group better, and assess how much value a product canvas app with JIRA integration would provide. It also made me update and change the board to reflect my latest thinking, as the following picture shows:\nI suggest you follow a similar approach when you work with the vision board: Identify your biggest risk, and attack this risk first. Don’t be afraid to fail: Making mistakes is part and parcel of creating something new. What’s more, early failure facilitates fast learning and it can save you time and money.\nProduct Vision Board and Business Model\nWhile a strength of the product vision board is its simplicity, it does not detail how the business goals are achieved and it does not capture the business model including the competitors, the partners, the channels, the revenue sources, and the cost factors. Describing and testing your business model ideas is particularly important when you develop a brand-new product and when you want to make bigger changes to an existing product, for instance, to take it to a new market (segment).\nTo capture your business model ideas you can either complement the product vision board with the business model canvas or use its extended version, the product vision board extended, which is shown below. The extended board is inspired by the business model canvas. You can download it for free from the tools section of my website.\n ","url":"https://www.romanpichler.com/blog/the-product-vision-board/"},{"date_scraped_timestamp":1710925694612,"host":"www.romanpichler.com","page_title":"The Scrum Cycle","text":"\n \n Published on 21st September 2012\n \n \n \n \n \n \n \n Scrum is a simple framework based on the idea of inspect and adapt: Create a product increment, show it to the stakeholders, and use the feedback to see if the right product is developed. This post describes what I regard as the essence of Scrum: a cyclic three-step process. It shows how the three steps help create a product with the right features and the right user experience (UX). \n Linear Scrum\nA linear Scrum implementation transforms the highest-priority product backlog items into a product increment but it does not collect any user feedback to update the product backlog and consequently change the product, as the following picture illustrates:\nSuch a linear application of Scrum assumes that team already knows what the product should look like and do. This may be appropriate for smaller incremental product updates and maintenance releases. But this assumption does not hold true for new products and new features where discovering how the user needs can be best met is a major challenge.\nCyclic Scrum\nTo find out which user experience (UX) and which features the product should provide, a cyclic process that facilitates experimentation and learning is required: We only discover and learn new things by trying out an idea. Luckily, Scrum’s cyclic nature enables product owners and agile teams to learn about what to build and how to build it: The product evolves based on the feedback of users, customers, and other stakeholders. Applied correctly, this results in a desirable product — a product that does a great job for its users, and it reduces the risk of building something that nobody really wants. The following picture describes three key steps that help you iterate towards a great product.\nThe diagram above is inspired by Eric Ries’ Lean Startup circle. You can find out more about how Lean Startup and Scrum can fit together in my post “New Product Development with Lean Startup and Scrum“.\nStep 1: Select the Sprint Goal and Create the Increment\nIn the first step of the cycle, product owner and team select a sprint goal that describes why the sprint should be run and what the desired outcome is. At the early stages of a development effort, the sprint goal should focus on testing critial assumptions and acquiring the relevant knowledge. These include assumptions about the user interaction, the product functionality, the visual design, and the technologies and the architecture. You can download a handy sprint goal template that facilities experimentation from the tools section of my website.\nOnce the sprint goal has been selected, the team develops the appropriate product increment. This could be a throw-away prototype (such as a paper prototype or a spike) or working software that can be released —depending on what’s best to meet the sprint goal. A paper prototype might be best, for instance, to test assumptions about the user interactions (“Are users willing to register first before they use the main features?”); a throwaway mock-up may be appropriate to test user interface ideas (“Will corporate colours resonate with the target group?”), and a software increment will help to run a more in-depth usability test or to release the product to selected users to run an A/B test, for instance.\nStep 2: Gather Feedback and Data\nIn the second step, the product increment is exposed to the stakeholders and feedback or data is collected. Scrum’s default technique is a product demo which is performed as part of the sprint review meeting. But you can of course also run a usability test or release the software to collect the relevant data. As a rule of thumb, use different methods across the development cycle and combine qualitative and quantitative techniques.\nStep 3: Analyse and Change\nIn the third step, the Scrum team analyses the feedback and the data obtained. This includes reviewing the quality of the data, and assessing its relevance. Examining the data should help the team understand if a desirable product is being developed. But it does not mean saying yes to every idea or stakeholder request! Having said that, you should welcome negative feedback. If all you get is positive responses, then you are likely to ask the wrong questions or the wrong people. (For more information please see my post “Data Analysis Tips for Product Managers and Product Owners“.)\nFinally, the Scrum team uses the newly gained insights to adapt the product backlog. This may result in bigger or smaller changes. If, for instance, the feedback invalidates the user interaction design, bigger changes are likely to be required. The earlier you are in the process of creating a new product or new features, the more likely it is that your product backlog changes significantly. Once you have addressed the key risks and critical assumptions in your backlog, smaller changes or refinements are usually sufficient. (I have written more about this in my post “Learning and Execution in Scrum“.)\nWrap-up\nScrum defines a cyclic process that encourages learning and change. By exposing product increments to the right people, analysing the feedback, and learning from it, you can maximise the chances of creating a successful product. If you currently don’t expose your product increments to the stakeholders on a regular basis, then there is a great opportunity to improve your process and your product.\n[This post was updated on 27 March 2014.]\n ","url":"https://www.romanpichler.com/blog/the-scrum-cycle/"},{"date_scraped_timestamp":1710925445082,"host":"www.romanpichler.com","page_title":"The Strategy Stack: Connecting Business, Product, and Technology Strategy","text":"\n \n Published on 12th March 2024\n \n \n \n \n \n \n \n For any business to succeed, it is crucial to make the right strategic choices. To achieve this, you’ll benefit from using four different types of strategies: business, portfolio, product, and technology strategy. But that’s not enough. You’ll also have to successfully align the plans. To help you address these challenges, I have developed a new framework, the Strategy Stack, which I introduce in this article. \n \nListen to the audio version of this article:\nIntroduction\nMy first product management job wasn’t exactly what you call a success story: I was part of a team that was called in to help with a new product development effort, and I ended up working with the lead product manager. While I learnt a lot in the process, the resulting product sadly failed. But this taught me an important lesson: There is no point in worrying about the product details if a sound product strategy is missing.\nWithout the strategy, it’s virtually impossible to determine the right features and user experience: If we don’t understand who the users are and which problem the product should solve, how can we then identify the right functionality and capture the right user stories?\nAs helpful as a product strategy is, it’s not enough. Most companies offer more than a single product. Instead, they provide a product portfolio, think of Microsoft Office/365 as an example. To maximise the value a portfolio creates and to align the strategies of its member products—for instance, Word, PowerPoint, and Excel—it is necessary to use a product portfolio strategy.\nIf you stopped here, however, your strategic decisions would still be incomplete. To ensure that the portfolio and its products help the entire company move in the right direction, you need a business strategy that clearly articulates how the company wants to achieve its overall aspiration and create value for its users, employees, and shareholders.\nBut that’s still not enough. To ensure that the right technologies are applied, you’ll benefit from using a technology strategy. Let’s take Microsoft as an example again. The company took the strategic decision to heavily invest in artificial intelligence and now uses AI to help Office users be more productive.[1]\nWhile I hope that this makes sense to you, I find that in practice, the different strategies are sometimes confused. I have seen companies use a mixture of portfolio and product strategies instead of separate plans. Sometimes, this hybrid strategy even contains business strategy elements. This does not only lead to confusion and misunderstandings. It also makes it hard to manage and adapt the plan.\nTo clearly distinguish, capture, and align the different strategies, you’ll benefit from using a framework. This is where my Strategy Stack comes in.\nUnderstanding the Strategy Stack\nThe Strategy Stack is an end-to-end framework that offers three key benefits. First, it helps you understand which strategies a business needs. Second, it offers a strategy architecture: It puts the plans into context and shows how they can be aligned. Last but not least, the Strategy Stack helps you clarify who is responsible for the different strategies and assign clear ownership.\nLet’s take a closer look at the framework, which is shown in Figure 1. Click on the picture to download the stack.\nFigure 1: The Strategy Stack\nThe Strategy Stack consists of five layers and seven elements. These are the business strategy, which is also referred to as corporate strategy, the product portfolio strategy, the technology strategy, and the product strategy, as well as the product roadmap, the technology roadmap, and the product backlog. The backlog is not a strategic plan, but I’ve added it to the stack to show how strategic decisions are translated into tactical ones.\nThere are two aspects of the framework in Figure 1 I’d like to draw your attention to. First, I’ve ordered the elements according to their importance with the most important at the top. As a consequence, the business strategy guides the portfolio strategy, which directs the product strategy. The latter, in turn, drives the product roadmap, which directs the product backlog. This way, the decisions captured in the backlog are ultimately aligned with the business strategy.\nSimilarly, the technology strategy is directed by the business strategy. As it occupies the same levels as the portfolio and product strategy, it influences them and, at the same time, is affected by them. Finally, the technology strategy guides the technology roadmap, which, in turn, impacts the product roadmap and conversely is impacted by the plan.[2]\nSecond, the framework in Figure 1 does not prescribe which methods and tools you should use to capture your decisions and create the artefacts it contains. Apply the ones that work best for you as long as you can effectively answer the question associated with each element.\nTo capture the business strategy, I find Roger Martin’s approach useful, which I summarise in the article Why Product People Should Care About Business Strategy. To capture the portfolio and product strategy, I prefer to work with the Portfolio Vision Board and Product Vision Board. To formulate an outcome-based product roadmap, I like to use the GO Product Roadmap. \nFollow the links above to find out more about the three tools, and watch the video below to understand how you can connect product strategy, product roadmap, and product backlog.\nApplying the Strategy Stack\nWhen you apply the Strategy Stack to your business, you’ll end up with a tree structure, as Figure 2 illustrates.\nFigure 2: Applying the Strategy Stack\nFigure 2 is an example of how the Strategy Stack might be applied at Microsoft at the time of writing.[3] For simplicity’s sake, I consider only two of the company’s portfolios—Office and Xbox, I state the strategies, roadmaps, and backlogs for two Office products—Word and PowerPoint, and I use one technology strategy, AI-First. Note that I’ve colour-coded the nodes in Figure 2 to indicate which layer they belong to.\nWhile the structure in Figure 2 does not look as simple as the one in Figure 1, it categorises the different strategies and product management artefacts and it shows how they relate. I find that this can be hugely beneficial. It helps you describe how you’ve structured your product management system and explore if the structure is effective.\nClarifying Ownership\nI often observe in my client work that it’s not clear who owns what. This can cause confusion and misalignment. It can also mean that a senior manager has to make all strategic decisions, which can be overwhelming for the individual and lead to suboptimal decisions. It is therefore important to clearly assign ownership and state who decides what.\nWith the Strategy Stack in place, you can determine which roles should create and manage the strategies and be empowered to make the corresponding decisions. While there is no one right way to assign ownership, Figure 3 illustrates my preferred setup.\nFigure 3: Ownership of the Strategy Stack Elements\nIn Figure 5, the business strategy is owned by the CEO and the C-suite, company’s executives. This does not imply, however, that only the leadership team determines this strategy. The opposite is true: I find a collaborative approach like Strategy Deployment can not only help create a better business strategy but also increase its acceptance amongst the employees.\nMoving down to the next level, the product portfolio strategy is created and managed by a product portfolio manager together with the portfolio team, as I explain in more detail in the article Everything You Need to Know about Product Portfolio Strategy. Note that in small to mid-sized companies, the head of product might take on the portfolio manager role in addition to their people management duties.\nStepping down another level in Figure 3, the product strategy together with the product roadmap and product backlog is owned by a product manager (or Scrum product owner) and the product team. This ensures that strategic product decisions effectively guide discovery and delivery and that insights from the development work help evolve the product strategy and roadmap.\nThe technology strategy and roadmap, finally, are owned by the CTO together with senior architects. This assumes the architects also implement and that they understand the capabilities and needs of the development team members.\nTailoring the Stack\nWhen you apply the stack to your company, you may find that you have to tailor it to suit your specific needs. If you work for a startup, for example, and you currently offer a single product, then you won’t need a product portfolio strategy at present. Similarly, you may find that you don’t need a dedicated technology roadmap. Consequently, you would initially work with a simplified version of the stack—like the one shown in Figure 4—and extend it as the company grows.\nFigure 4: A Strategy Stack for a Startup\nThe opposite can also be true. Say that you work for a conglomerate—a large company with a range of business groups, like Siemens and General Electric. You may then require a business group strategy in addition to the overall business strategy. Similarly, if your company offers one or more ecosystems, you may benefit from adding an ecosystem strategy layer, as Figure 5 shows.\nFigure 5: A Strategy Stacks for a Large Enterprise\nBefore you now rush to customise the Strategy Stack shown in Figure 1, I recommend applying it to a single ecosystem or portfolio even if you work for a large corporation. Then consider if you need to add new layers and if you choose to do so, who should own them. This avoids the risk of starting with a framework that is more complicated than necessary.\nNotes\n[1] The company does this by offering Microsoft 365 Copilot, which is integrated into Office/365, uses large language models (LLMs), and is able to cite sources, create poems, and write songs, see https://blogs.microsoft.com/blog/2023/03/16/introducing-microsoft-365-copilot-your-copilot-for-work/ and https://en.wikipedia.org/wiki/Microsoft_Copilot.\n[2] While I have described the connections between the layers top-down, changes in a lower layer can trigger adaptations in a higher one. Say that the portfolio strategy turns out to be wrong, then this may require changing the business strategy. To put it differently, the relations between the layers are bidirectional.\n[3] The sample stack in Figure 2 is purely for illustration purposes. It is based on my research, but I do not claim in any way that it correctly represents how Microsoft manages its business.\n ","url":"https://www.romanpichler.com/blog/the-strategy-stack/"},{"date_scraped_timestamp":1710925712651,"host":"www.romanpichler.com","page_title":"Think Product!","text":"\n \n Published on 2nd July 2010\n \n \n \n \n \n \n \n This blog post explores the notion of a product in Scrum. Being clear on what a product is a prerequisite for effective product innovation. \n Scrum has a strong product focus; it knows a product owner, a product vision, a product backlog, and a product increment. But what is a product?\nThe answer to this question can be tricky. Take the attendees of a recent product owner workshop I ran who found it difficult to agree on what their products are. Another client of mine was completely project-driven before using Scrum; short projects often updated a number of application and systems. When asked about their products, developers would answer, “Oracle,” or “Websphere” rather than referring to the software they created. And another company I worked with had more than 20 different definitions of the term product.\nSo what is a product? I like to think of a product as collection of attributes (or features) that address customer or user needs thereby providing value. A good first step in identifying products is to ask, “Who benefits from our software? Who purchases and who uses it?” and “What value does the software provide?”\nA product is developed using a project, which creates one or more releases and results in a new product version, as the following sequence shows:\nCustomer and user needs\n→ Are addressed by a product\n→ Has a version\n→ Is developed by a project\n→ Creates one or more releases\nProducts are means to an end – to meet customer and user needs. Projects and teams serve to bring the next product version to life. Understanding which products an organisation develops is the prerequisite for achieving product success. It enables longer-term thinking and finding the right people. Only if it’s clear what the product is can management find the right product owner and can the right people be invited to join the development effort.\nSo think products. Not projects, not teams, and not components. Focus on what ultimately counts – to create a great product to help customers and users – and organise accordingly.\n ","url":"https://www.romanpichler.com/blog/think-product/"},{"date_scraped_timestamp":1710925471992,"host":"www.romanpichler.com","page_title":"Tips for Effective Product Strategy Reviews","text":"\n \n Published on 3rd December 2019\n \n \n \n \n \n \n \n The product strategy describes how you plan to achieve product success. It typically covers the product’s value proposition, market, stand-out features, and business goals. While a strategy is key to creating a winning product, it would be a mistake to blindly execute it and assume it will always stay valid. As your product develops and grows, and as the market and the technologies evolve, the product strategy has to change, too. You should therefore regularly review and adjust it. The following tips will help you with this. \n \nHold Regular Product Strategy Reviews\nA product strategy, like any other plan, is subject to change. How changeable your strategy is, depends on your product’s life cycle stage. As long as your product hasn’t reached product-market fit, the strategy is usually volatile. Contrast this with a mature product, which tends to have a more stable product strategy. But as the strategy will change, I recommend that you review and adjust it at least once per quarter—as a rule of thumb. Consider increasing the frequency for products that face a significant amount of uncertainty and decrease it for mature and declining products.\nMake sure that you block the necessary time for product strategy reviews in your calendar. Don’t allow urgent issues, like a sales or support request, to cause you to neglect reviewing the product strategy. Strategy is about being proactive and seeing opportunities and threats early so you can carefully choose how to respond. If you neglect reviewing and adapting the product strategy, you might experience nasty surprises in the future, for example, a competitor might catch you off guard with a new killer feature. \nUse Collaborative Workshops to Review and Adapt the Strategy\nCollaborative workshops with the key stakeholders and development team members are a great way to jointly review and adjust the product strategy. For a commercial, revenue-generating product, the stakeholders might include a marketeer, sales rep, and member of the support group. Joint reviews offer the following benefits:\nBetter decisions: They help you make better decisions by leveraging the collective knowledge and creativity of the stakeholders and development team. Additionally, they help you consider different viewpoints thereby reducing the risk of wrong and biased decisions. Improved alignment: They lead to a better understanding and stronger buy-in for any strategy changes. Increased commitment: They empower people and they increase their commitment and motivation to work on the product.\nAs deciding together can be challenging at times, I recommend that you do two things: First, ask your Scrum Master to facilitate the workshop. The individual should help people embrace a collaborative mindset; encourage everyone to fully participate and prevent individuals from dominating; ensure that the group has chosen a clear decision rule and guide everyone through the decision-making process. Having a dedicated facilitator allows you to fully contribute to the workshop. What’s more, it will reduce the likelihood that the HIPPO—the highest paid person’s opinion—wins rather than deciding what’s best for the product and feasible for the dev team and stakeholders.\nSecond, make sure that you actively listen to the workshop participants. Listen with an open mind and try to understand the individual’s underlying needs and interests. This will make people feel understood and it will increase their support of the strategy changes. \nLook at Four Key Factors\nIn order to review the product strategy and assess its validity,\ntake into account the following four factors: \nPerformance: How your product doing based on its key performance indicators? Does the data show positive, flat, or negative trends? What conclusions can you draw from the analysis? What would make your product perform better?Trends: Are there any new technology, regulatory, or social developments that will affect your product? Do they offer an opportunity to innovate, add, remove, or enhance features, or create a brand-new product, for example, by unbundling a feature? Competition: Are your competitors launching new products or features? Are there new market entrants? Is your product still sufficiently differentiated? Company: Are there any significant changes in your company that affect the product strategy? For example, has the business strategy changed or have key people left?\nHave the Courage to Make Tough Decisions\nOnce you’ve reviewed the product strategy, decide what to\ndo. There are four main choices you have: \nNo change: Leave the strategy as it is. The product strategy is still valid; the product is performing well; there are new trends, no significant competitor and company changes that you need to respond to.Small changes: Carry out small adjustments to improve product performance or respond to a change. This includes adapting the value proposition and target group, improving the product’s standout features, and changing the business goals.Big changes: Make a big strategy change. This includes pivoting the product, significantly changing the strategy or replacing it. A big strategy change is required when your product is not doing well, when you are facing a disruption in the market or competition, when the business strategy significantly changes. A bigger change may also be required to move from one life cycle stage to the next and to extend the product life cycle, for example, by tapping into new markets. To carry out the change, create and validate a new product strategy that communicates how you intend to move the product forward.Kill: Retire the product early. This is advisable when you don’t stand a realistic chance to make the product successful, when the product has been in decline and the return on investment is no longer attractive, or when the offering it supports is being retired. While killing your product may sound rather drastic, it frees up resources and avoids investing time, money, and energy in a product that is not going to be successful. \nWhile you might be attached to your current product strategy and your product and consequently find it hard to make a bigger change or kill the product, you should do what is in the best interest of the users and the company. Ultimately, a product is just a means to an end: It’s a value-creating vehicle that should benefits the users and the business. \nCombine Product Strategy and Roadmap Reviews\nFinally, integrate product strategy and product roadmap reviews. This offers several benefits:\nTime savings: Combining the two reviews saves you scheduling another meeting and inviting the same attendees.Alignment: It helps you ensure that the two plans are close aligned and in synch. The roadmap should state how the current strategy is likely to be implemented, and bigger product roadmap changes may have an impact on the strategy and require adjustments.\nI suggest allocating two to three hours for a quarterly product strategy and roadmap workshop, assuming that the workshop is well prepared and facilitated. This includes having all relevant data and materials available and having a skilled facilitator present.\n ","url":"https://www.romanpichler.com/blog/tips-for-effective-product-strategy-reviews/"},{"date_scraped_timestamp":1710925753795,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=3098"},{"date_scraped_timestamp":1710925752469,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=20213"},{"date_scraped_timestamp":1710925750065,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=152713"},{"date_scraped_timestamp":1710925758684,"host":"www.romanpichler.com","page_title":"Use Decision Rules to Make Better Product Decisions","text":"\n \n Published on 5th December 2016\n \n Last Updated on: 13 Jun 2023\n \n \n \n \n \n \n As product managers and product owners, we make a myriad of decisions—from shaping the product strategy and determining the product roadmap to deciding the detailed functionality of our products. But do we make all these decisions effectively? And do we always secure the necessary buy-in? This post helps you make better decisions. It discusses five common decision rules and explains when to apply them. \n \nDecisions, Decisions\n“Is everybody OK with changing the product goal for Q3?”, asks Julie, the product manager. As nobody says anything, she assumes that everyone agrees. She thanks people for attending and closes the meeting. But in reality, most people are still thinking about the change proposed. To make things worse, it’s not clear who has the final say on product roadmap changes. Is it the product manager, the attendees, or the management sponsor?\nIf it’s unclear how a decision is made and whose input is required, people will be unsure if a decision has actually been made and if it should be actioned. Some people will start to implement the decision, while others ignore it instead of following it through. But if you want people to move together in the same direction, you need to give them a clear indicator if a decision has been made: you should clearly state how the decision is reached and whose input is required. In other words, you should apply the right decision rule.\nThere are six common decision rules, unanimity, consent, majority vote, product person decides after discussion, delegation, and product person decides without discussion, which I explain below. I base my description on the books The Facilitator’s Guide to Participatory Decision-Making and We the People.\nUnanimity\nDeciding by unanimity means that everyone required to make the decisions supports the proposed solution or idea. A unanimity decision creates strong buy-in and shared ownership, and it leverages the collective creativity and knowledge of the people present—everybody involved contributes to the decision. It is particularly helpful when the stakes are high and you make a strategic product decision, for example, if you should pivot, create a product variant to address new market segment, or change the goal of the next major release on the product roadmap.\nThe drawback of this approach is that it can take a comparatively long time to reach unanimity within a group, as it requires developing a mutual understanding and evaluating competing ideas. You may even have to schedule several meetings to come to a conclusion, particularly if you test different ideas as part of the process.\nWatch out that an unanimity-based approach does not degenerate into design by committee where people agree on the smallest common denominator and broker a weak compromise. This is unlikely to result in a sustainable agreement and translate into a successful product. As the saying goes, “a camel is a horse designed by a committee.” Similarly, don’t allow an individual to dominate and high-jack the decision-making process. Unanimity does mean that everybody is happy with the decision and fully supports it.\nWhen applying this decision rule, you will benefit from an experienced facilitator who guides everyone through the decision-making process and helps people reach agreement. Your ScrumMaster or agile coach might be able to help you with this.\nConsent\nConsent is the absence of objections: A decision is made when nobody disapproves. Deciding by consent requires that a proposal has been created—either as part of the decision-making process or by delegating the task to another group. Once the proposal has been discussed and a shared understanding has been established, ask the participants to clearly state if they object or consent to the proposal. If there are any objections, investigate their causes and ask why people object. Then amend the proposal or ask a group of people to rework it. Iterate the steps above until everyone involved in the decision-making process can live with the proposal and has no longer any meaningful objections.\nApplying this decision rule is beneficial when you don’t have the time to decide by unanimity or a good-enough solution is sufficient. Remember the product roadmap scenario from the beginning of this article? Using consent would have been a great way to understand if the development team and stakeholders agree with the proposed roadmap change. The drawback of the decision rule is that does not give you the same degree of buy-in as unanimity: Not objecting to a proposal does not necessarily imply that people are happy to support it.\nWhen deciding by consent, be careful not to shortcut the decision-making process by subtly pressurising people to agree or not considering all meaningful objections. For consent to work, everyone involved in the decision-making process must be OK with the proposal—no matter which role the person plays or how junior the individual might be.\nMajority Vote\nAs its name suggests, majority vote means that more than half of the people required to decide agree with the proposed solution or idea. Applying this rule is simple and comparatively fast. But it creates a win-lose situation that can leave the minority frustrated and unwilling to support the decision.\nI therefore recommend that you use this rule only if the stakes are not high. Asking the key stakeholders to vote on a major strategy change would probably not be appropriate; using consensus or product manager decides after discussion would be more helpful.\nIf, however, you cannot agree on a lower-impact issue, for instance, if a technical or user-related risk should be addressed in the next sprint, then you may want to the Scrum team members to cast their vote. This speeds up the decision-making-process and gets sprint planning done within its allocated time box; and it’s acceptable as the decision’s impact is likely to be limited: you’ll find out at the end of the next sprint if you’ve addressed the wrong risk, and in the worst case, you will have lost a sprint.\nDecide after Discussion\nThis decision rule requires you to discuss an idea or solution with the right people and poll them for their opinions as well as any data that backs them up. Once enough discussion has taken place or the time is up, you decide. A good example would be deciding how to evolve the product backlog. You may ask the stakeholders and development team for their input, but after some discussion you might decide if new stories are added or not, and how to prioritise them.\nThe benefit of this approach is that it involves people in the decision-making process, but you retain control over the decision. It can also speed up the process by limiting the time spent looking for an inclusive decision. But the decision rule’s drawback is that people may not support your decision—or worse, they might be frustrated and oppose it if their suggestions were not taken on board. And if the decision turns out to be wrong, then people may regard it as your mistake and your problem. Consequently, they may be reluctant to help you. The rule also requires that you do have the authority to make the decision, which might not the case particularly for high-impact decisions that affect revenue and other business goals.\nApply this rule when you need to involve the development team and stakeholders to benefit from their knowledge or make them feel valued but at the same time, you must make the decision rather than allowing the group to reach agreement. This can be case when the key stakeholders don’t have the knowledge or willingness to come to a meaningful consensus or when speed is more important than reaching a sustainable agreement and generating strong buy-in, for instance, in a crisis.\nDelegate\nDelegate a decision if others are better qualified to decide or if your input is not needed. As the person in charge of the product, you would typically expect that the development team takes care of all technical decisions. But you might also delegate decisions about how to write or refine user stories to the team, if the team members have enough knowledge about the users and the product.\nDelegation helps ensure that the best qualified people decide, and it frees up your time: you don’t spend more time making decisions than necessary. When applied correctly, it also sends a positive signal to the appointed decision makers: it shows that you trust them and value their expertise.\nBut don’t use the rule to avoid difficult decisions. It can be all too easy to delegate a decision that you don’t want to be responsible for. And do not try to influence the group tasked with making the decision, for example, by saying, “you decide, of course, but I think we should build our own data access layer,” as this is a sign of mistrust. If you need to be involved in the decision, then do not delegate the decision to others.\nDecide without Discussion\nAs the person in charge of the product, you don’t have to involve others in all your decisions, of course: There are lots of low-impact decisions that you can and should make on your own. For example, should you invite the sales rep required to the next sprint review meeting? Should you start breaking down some of the larger epics in the product backlog or hold off for another sprint? Should you move from monthly strategy and roadmap reviews to quarterly ones (or vice versa)?\nBe aware, though, that this decision rule will only be appropriate if you have the right knowledge to make the decision and you don’t need the buy-in from others. Take the last example from above where you decide to change the frequency of the product strategy reviews. If you are confident that the stakeholders will agree with your decision and if you don’t need their input or advice, then just decide.\nBut if you use the approach for important decisions, people may regard you as an autocratic leader and oppose your decisions. If in doubt, use consensus or product manager decides after discussion instead.\nChoose the Right Decision Rule\nEach decision rule discussed above has its benefits and drawbacks. No single approach is always appropriate. For guidance on how to choose the right decisions rule, download the infographic below by clicking on the image.\n ","url":"https://www.romanpichler.com/blog/decision-rules-to-make-better-product-decisions/?replytocom=3095"},{"date_scraped_timestamp":1710925654782,"host":"www.romanpichler.com","page_title":"User Stories are Not Enough for a Great User Experience","text":"\n \n Published on 5th November 2013\n \n \n \n \n \n \n \n Creating a product with a great user experience requires more than just user stories. While capturing the product functionality is important, the user journeys, the visual design, and the nonfunctional properties have to be described too. Stories should be complemented with other techniques including scenarios, storyboards, and design sketches. \n Creating a Great User Experience\nI like to think of a product description as a matrix: One quadrant describes the functionality, another one the user journeys and interactions. There is a third quadrant that captures the visual design, and a final one for the nonfunctional properties such as performance, robustness, and interoperability. All four have to be present and fit together to create a product with a great user experience, as the following picture illustrates.\nThe four areas above are best covered by different techniques. User stories work well for the product functionality. Scenarios, workflows, and storyboards are great to describe the journeys. Sketches and mock-ups capture the design, and constraint stories describe the nonfunctional properties, as shown in the picture below. No single technique can handle all four aspects equally well.\nYou can employ further techniques, of course, including screenshots and photos, context and activity diagrams, value stream maps, story maps, and so fourth. You can also combine different techniques, for instance, providing a design sketch for each step in a scenario. Use the techniques that work best for your product, and that enable you to describe your ideas so that they are easy to understand and to validate. (Note that I have placed storyboards between “User Journeys” and “Visual Design” in the picture above as the technique can cover both aspects.)\nIdentifying Assumptions and Risks\nThere is another reason why a holistic product description is beneficial especially for new products and new features: It helps you identify all relevant assumptions and risks. If you only write user stories, chances are that you are unaware of the interaction and design risks. This may result in late failure or a poor user experience.\nFor instance, every now and then when I shop online, I come across a website that asks me to select the payment type before allowing me to enter the payment details on the next page. Unfortunately, I typically forget to make the right choice in the first step. As a consequence, I have to go back to the initial page to correct my selection and then move on to the details page. As my payments details are lost, I have to re-enter them. While this experience may be good to test my patience, it certainly does not make me want to use the website again. Considering and validating the user interaction could have easily resulted in a better design and in a more pleasant user experience.\nVisualising and Managing the Four Aspects\nA handy tool to capture and manage the four aspects is the Product Canvas. The canvas provides three major sections: The first section is called “Target Group” and describes the users and customers with their needs in form of personas. The second section named “Big Picture” outlines the desired user experience and describes the important user journeys, product capabilities, design ideas, and nonfunctional properties. The third section called “Product Details” captures the goal or hypothesis of the next cycle together with actionable items, which may be written as ready stories.\nThe Big Picture section plays a key role in capturing the four pieces, as the following sample canvas shows:\nThe picture above is an extract of the Product Canvas I used to create the current version of my website, romanpichler.com. The Big Picture section in the middle contains epics to describe the product functionality, storyboards to capture the user interactions, design sketches to illustrate important design ideas, and a performance constraint. It provides a coarse-grained but holistic description of the product. For more information on the canvas, please visit the Product Canvas tool page, which also provides a downloadable template.\nWrap-up\nWhen you create a new product or when you make bigger changes to an existing one, take a holistically holistic approach. Describe the relevant user journeys, the product functionality, the visual design, and the nonfunctional properties. Neglecting one of them is likely to result in a suboptimal user experience, which may well have a negative impact on the success of your product.\n ","url":"https://www.romanpichler.com/blog/user-stories-enough-for-a-great-user-experience/"},{"date_scraped_timestamp":1710925460468,"host":"www.romanpichler.com","page_title":"What Exactly is a Product Strategy?","text":"\n \n Published on 14th March 2023\n \n \n \n \n \n \n \n The product strategy is possibly the most important product management plan. But what exactly is it? Which information should it contain? Do you need a strategy for your product? How can you ensure that it is likely to result in a successful product and how do you keep it up to date? These are the questions I am going to answer in this article. \n \nListen to the audio version of this article:\nWhat Information Should a Product Strategy Provide?\nI like to think of the product strategy as a high-level plan that helps you realise your vision and that answers the following four questions:\nWho is the product for? Who are the users and, if appropriate, who are the customers?\nWhy would people want to use and buy it? What specific problem does it address, or which tangible benefit does it offer?\nWhat kind of product is it and what makes it stand out? How does it differ from competing offerings? Why would people choose it over alternatives?\nWhat are the business goals? Which benefits does the product create for the company developing and providing it?\nTo make these recommendations more concrete, let’s look at an example. Say that I want to develop a product that helps people eat more healthily. To create a strategy, I might choose middle aged men with busy jobs and an unhealthy lifestyle as the target users. The benefit the product should create for this user group might be to reduce the risk of developing type-2 diabetes. The product might be a mobile app, and its standout features might include measure and record sugar levels in food, analyse eating habits and make individualised recommendations, and seamlessly integrate with leading smart scales. The business benefits, finally, might be to create a new revenue stream, diversify the business, or develop the company brand.\nTo capture the product strategy, you can use my product vision board. It’s a tool I have developed specifically to help people describe the vision and strategy of their products. You can download the product vision board from my website and by clicking on the image below. If you want to learn more about the tool, then read my article The Product Vision Board or watch my video Introduction to the Product Vision Board.\nHow Does the Strategy Relate to the Vision and Roadmap?\nAnother approach to define the product strategy is to explore how it relates to other product plans. To do this, let’s take a look at my product strategy framework shown below.\nAs the image above shows, the product strategy sits between the vision and the product roadmap in my model. To put it differently, it states how you intend to realise the vision and thereby make the product successful, and it provides the necessary input to create an actionable product roadmap. The roadmap, in turn, provides the context to discover the right product details and capture them in the product backlog. You can learn more about the framework by reading the article My Product Strategy Model.\nDo You Need a Strategy for Your Product?\nNow, you might be wondering if you need a product strategy at all. Without a product strategy, you will struggle to explain how your product creates value; you will find it difficult to come up with a realistic product roadmap; and you will have a hard time determining the product details. How can you capture the right user stories, for example, if you don’t know for sure who the users are and why they would want to use your product? Finally, it will be hard to select the right key performance indicators (KPIs) and measure how much value your product creates—the product strategy forms the basis for choosing the correct KPIs. I therefore recommend that every product has a strategy. If that’s not the case for your offering, then you should create one, for example by using the product vision board template shown above.\nHow Can You Create a Strategy that likely to Result in a Successful Product?\nIt’s great to have an initial product strategy. But to increase the chances that it will result in a successful product—a product that is desirable, feasible, viable, and ethical product—you should test your plan. A great way to achieve this is to start with an initial strategy and to iteratively validate and change it, as the picture below illustrates.\nThe process above—which is loosely based on Eric Ries’ work—consists of the following four steps: First, identify the biggest risk currently contained in the product strategy. That’s the uncertainty that must be addressed now to make the right strategic decisions. A sample risk might be that the target group is not big enough or that the need identified may not be compelling enough. Second, determine the right method to address the risk such as direct observation and user interview. Third, apply the method and collect the relevant data, for example, carry out the user interviews and capture the answers in the form of notes or video footage. Fourth, evaluate the data and use the insights gained to decide how to proceed: persevere, pivot, or stop.\nPersevere means sticking with the strategy, possibly making smaller changes, and addressing the next risk. Pivot entails changing the strategy, for example, writing a book on healthy eating rather than developing an app to build on the example used earlier. Stop, finally, means what it says: to stop working on the product strategy and looking for a new idea. For a more detailed explanation of how to create and iteratively validate a product strategy, refer to my book Strategize.\nHow Do You Keep the Product Strategy Relevant and Up to Date?\nFinally, the product strategy is not a fixed, static plan that simply has to be implemented. Instead, it is changeable and dynamic. As new technologies emerge, as competitors offer new products or update existing ones, and as users’ needs evolve, your strategy has to change in order to proactively guide the product delivery and maximise the chances of offering a successful product. You should therefore regularly review your product strategy. The following four factors will help you with this.\nPerformance: How your product doing based on its key performance indicators (KPIs)?\nTrends: Are there any new technology, regulatory, or social developments that will affect your product?\nCompetition: Are your competitors launching new products or features? Is your product still sufficiently differentiated?\nCompany: Are there any significant changes in your company that affect the product strategy? For example, has the business strategy changed or have key people left?\n ","url":"https://www.romanpichler.com/blog/what-is-a-product-strategy/"},{"date_scraped_timestamp":1710925567279,"host":"www.romanpichler.com","page_title":"What Exactly is a Product Strategy?","text":"\n \n Published on 14th March 2023\n \n \n \n \n \n \n \n The product strategy is possibly the most important product management plan. But what exactly is it? Which information should it contain? Do you need a strategy for your product? How can you ensure that it is likely to result in a successful product and how do you keep it up to date? These are the questions I am going to answer in this article. \n \nListen to the audio version of this article:\nWhat Information Should a Product Strategy Provide?\nI like to think of the product strategy as a high-level plan that helps you realise your vision and that answers the following four questions:\nWho is the product for? Who are the users and, if appropriate, who are the customers?\nWhy would people want to use and buy it? What specific problem does it address, or which tangible benefit does it offer?\nWhat kind of product is it and what makes it stand out? How does it differ from competing offerings? Why would people choose it over alternatives?\nWhat are the business goals? Which benefits does the product create for the company developing and providing it?\nTo make these recommendations more concrete, let’s look at an example. Say that I want to develop a product that helps people eat more healthily. To create a strategy, I might choose middle aged men with busy jobs and an unhealthy lifestyle as the target users. The benefit the product should create for this user group might be to reduce the risk of developing type-2 diabetes. The product might be a mobile app, and its standout features might include measure and record sugar levels in food, analyse eating habits and make individualised recommendations, and seamlessly integrate with leading smart scales. The business benefits, finally, might be to create a new revenue stream, diversify the business, or develop the company brand.\nTo capture the product strategy, you can use my product vision board. It’s a tool I have developed specifically to help people describe the vision and strategy of their products. You can download the product vision board from my website and by clicking on the image below. If you want to learn more about the tool, then read my article The Product Vision Board or watch my video Introduction to the Product Vision Board.\nHow Does the Strategy Relate to the Vision and Roadmap?\nAnother approach to define the product strategy is to explore how it relates to other product plans. To do this, let’s take a look at my product strategy framework shown below.\nAs the image above shows, the product strategy sits between the vision and the product roadmap in my model. To put it differently, it states how you intend to realise the vision and thereby make the product successful, and it provides the necessary input to create an actionable product roadmap. The roadmap, in turn, provides the context to discover the right product details and capture them in the product backlog. You can learn more about the framework by reading the article My Product Strategy Model.\nDo You Need a Strategy for Your Product?\nNow, you might be wondering if you need a product strategy at all. Without a product strategy, you will struggle to explain how your product creates value; you will find it difficult to come up with a realistic product roadmap; and you will have a hard time determining the product details. How can you capture the right user stories, for example, if you don’t know for sure who the users are and why they would want to use your product? Finally, it will be hard to select the right key performance indicators (KPIs) and measure how much value your product creates—the product strategy forms the basis for choosing the correct KPIs. I therefore recommend that every product has a strategy. If that’s not the case for your offering, then you should create one, for example by using the product vision board template shown above.\nHow Can You Create a Strategy that likely to Result in a Successful Product?\nIt’s great to have an initial product strategy. But to increase the chances that it will result in a successful product—a product that is desirable, feasible, viable, and ethical product—you should test your plan. A great way to achieve this is to start with an initial strategy and to iteratively validate and change it, as the picture below illustrates.\nThe process above—which is loosely based on Eric Ries’ work—consists of the following four steps: First, identify the biggest risk currently contained in the product strategy. That’s the uncertainty that must be addressed now to make the right strategic decisions. A sample risk might be that the target group is not big enough or that the need identified may not be compelling enough. Second, determine the right method to address the risk such as direct observation and user interview. Third, apply the method and collect the relevant data, for example, carry out the user interviews and capture the answers in the form of notes or video footage. Fourth, evaluate the data and use the insights gained to decide how to proceed: persevere, pivot, or stop.\nPersevere means sticking with the strategy, possibly making smaller changes, and addressing the next risk. Pivot entails changing the strategy, for example, writing a book on healthy eating rather than developing an app to build on the example used earlier. Stop, finally, means what it says: to stop working on the product strategy and looking for a new idea. For a more detailed explanation of how to create and iteratively validate a product strategy, refer to my book Strategize.\nHow Do You Keep the Product Strategy Relevant and Up to Date?\nFinally, the product strategy is not a fixed, static plan that simply has to be implemented. Instead, it is changeable and dynamic. As new technologies emerge, as competitors offer new products or update existing ones, and as users’ needs evolve, your strategy has to change in order to proactively guide the product delivery and maximise the chances of offering a successful product. You should therefore regularly review your product strategy. The following four factors will help you with this.\nPerformance: How your product doing based on its key performance indicators (KPIs)?\nTrends: Are there any new technology, regulatory, or social developments that will affect your product?\nCompetition: Are your competitors launching new products or features? Is your product still sufficiently differentiated?\nCompany: Are there any significant changes in your company that affect the product strategy? For example, has the business strategy changed or have key people left?\n ","url":"https://www.romanpichler.com/blog/what-is-a-product-strategy/?replytocom=151986"},{"date_scraped_timestamp":1710925567484,"host":"www.romanpichler.com","page_title":"What Exactly is a Product Strategy?","text":"\n \n Published on 14th March 2023\n \n \n \n \n \n \n \n The product strategy is possibly the most important product management plan. But what exactly is it? Which information should it contain? Do you need a strategy for your product? How can you ensure that it is likely to result in a successful product and how do you keep it up to date? These are the questions I am going to answer in this article. \n \nListen to the audio version of this article:\nWhat Information Should a Product Strategy Provide?\nI like to think of the product strategy as a high-level plan that helps you realise your vision and that answers the following four questions:\nWho is the product for? Who are the users and, if appropriate, who are the customers?\nWhy would people want to use and buy it? What specific problem does it address, or which tangible benefit does it offer?\nWhat kind of product is it and what makes it stand out? How does it differ from competing offerings? Why would people choose it over alternatives?\nWhat are the business goals? Which benefits does the product create for the company developing and providing it?\nTo make these recommendations more concrete, let’s look at an example. Say that I want to develop a product that helps people eat more healthily. To create a strategy, I might choose middle aged men with busy jobs and an unhealthy lifestyle as the target users. The benefit the product should create for this user group might be to reduce the risk of developing type-2 diabetes. The product might be a mobile app, and its standout features might include measure and record sugar levels in food, analyse eating habits and make individualised recommendations, and seamlessly integrate with leading smart scales. The business benefits, finally, might be to create a new revenue stream, diversify the business, or develop the company brand.\nTo capture the product strategy, you can use my product vision board. It’s a tool I have developed specifically to help people describe the vision and strategy of their products. You can download the product vision board from my website and by clicking on the image below. If you want to learn more about the tool, then read my article The Product Vision Board or watch my video Introduction to the Product Vision Board.\nHow Does the Strategy Relate to the Vision and Roadmap?\nAnother approach to define the product strategy is to explore how it relates to other product plans. To do this, let’s take a look at my product strategy framework shown below.\nAs the image above shows, the product strategy sits between the vision and the product roadmap in my model. To put it differently, it states how you intend to realise the vision and thereby make the product successful, and it provides the necessary input to create an actionable product roadmap. The roadmap, in turn, provides the context to discover the right product details and capture them in the product backlog. You can learn more about the framework by reading the article My Product Strategy Model.\nDo You Need a Strategy for Your Product?\nNow, you might be wondering if you need a product strategy at all. Without a product strategy, you will struggle to explain how your product creates value; you will find it difficult to come up with a realistic product roadmap; and you will have a hard time determining the product details. How can you capture the right user stories, for example, if you don’t know for sure who the users are and why they would want to use your product? Finally, it will be hard to select the right key performance indicators (KPIs) and measure how much value your product creates—the product strategy forms the basis for choosing the correct KPIs. I therefore recommend that every product has a strategy. If that’s not the case for your offering, then you should create one, for example by using the product vision board template shown above.\nHow Can You Create a Strategy that likely to Result in a Successful Product?\nIt’s great to have an initial product strategy. But to increase the chances that it will result in a successful product—a product that is desirable, feasible, viable, and ethical product—you should test your plan. A great way to achieve this is to start with an initial strategy and to iteratively validate and change it, as the picture below illustrates.\nThe process above—which is loosely based on Eric Ries’ work—consists of the following four steps: First, identify the biggest risk currently contained in the product strategy. That’s the uncertainty that must be addressed now to make the right strategic decisions. A sample risk might be that the target group is not big enough or that the need identified may not be compelling enough. Second, determine the right method to address the risk such as direct observation and user interview. Third, apply the method and collect the relevant data, for example, carry out the user interviews and capture the answers in the form of notes or video footage. Fourth, evaluate the data and use the insights gained to decide how to proceed: persevere, pivot, or stop.\nPersevere means sticking with the strategy, possibly making smaller changes, and addressing the next risk. Pivot entails changing the strategy, for example, writing a book on healthy eating rather than developing an app to build on the example used earlier. Stop, finally, means what it says: to stop working on the product strategy and looking for a new idea. For a more detailed explanation of how to create and iteratively validate a product strategy, refer to my book Strategize.\nHow Do You Keep the Product Strategy Relevant and Up to Date?\nFinally, the product strategy is not a fixed, static plan that simply has to be implemented. Instead, it is changeable and dynamic. As new technologies emerge, as competitors offer new products or update existing ones, and as users’ needs evolve, your strategy has to change in order to proactively guide the product delivery and maximise the chances of offering a successful product. You should therefore regularly review your product strategy. The following four factors will help you with this.\nPerformance: How your product doing based on its key performance indicators (KPIs)?\nTrends: Are there any new technology, regulatory, or social developments that will affect your product?\nCompetition: Are your competitors launching new products or features? Is your product still sufficiently differentiated?\nCompany: Are there any significant changes in your company that affect the product strategy? For example, has the business strategy changed or have key people left?\n ","url":"https://www.romanpichler.com/blog/what-is-a-product-strategy/?replytocom=151751"},{"date_scraped_timestamp":1710925746636,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=124781"},{"date_scraped_timestamp":1710925748148,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=127942"},{"date_scraped_timestamp":1710925740780,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=124829"},{"date_scraped_timestamp":1710925742147,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=124814"},{"date_scraped_timestamp":1710925750512,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=124782"},{"date_scraped_timestamp":1710925746198,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/?replytocom=124825"},{"date_scraped_timestamp":1710925490722,"host":"www.romanpichler.com","page_title":"Why Product Owners Need Effective Scrum Masters","text":"\n \n Published on 9th February 2022\n \n \n \n \n \n \n \n When you consider who the important partners for product people are, your thoughts might turn to the stakeholders, development team, and sponsor. But having an effective Scrum Master is crucial when you work with a Scrum-based process. Sadly, many product owners don’t have an effective Scrum Master at their side. More often than not, this causes the individuals to take on some Scrum Master duties like coaching the development team. In this article, I explain why this is a bad idea, why you need a qualified Scrum Master to succeed as a product owner, and what you can do when you lack one. \n \nListen to this article:\nWhat the Scrum Master Should Do\nWhile the role is discussed in many books and articles, I find that it is still not always correctly understood. What’s more, it’s not uncommon in my experience that product owners have to do their job without the support of a Scrum Master or agile coach.\nSo why is the role important? I view the Scrum Master as someone who takes care of process, collaboration, and organisational change issues. This includes the following six duties:\nRoles: Ensure that the right roles are in place and their authority and responsibilities are clear to everyone. This includes product roles such as product owner and feature owner.Staffing: Help find people who have the right skills and are motivated to work on the product and who can fill the roles. For example, I’ve seen organisations where the Scrum Masters work with HR and the development teams to recruit new team members.Process and collaboration: Teach agile values, principles, and practises to the product owners, development teams, stakeholders, and management. Help people use the right processes in the right way; help them discover ways to improve their work, for instance, in the form of sprint retrospectives.Productive work environment: Help set up an environment that is conducive to creative teamwork and encourage people to practice sustainable pace—to do a great job without getting overworked, losing motivation, and falling ill. Ensure that people have the infrastructure and tools they need to do a good job. This includes laptops, tablets, phones, and software tools; but it may also include having access to a kitchen and a coffee machine.Organisational change and empowerment: Work with senior management, HR, and other business groups to implement the necessary organisational changes required to fully empower product people and leverage agile practises.Meetings: Prepare and facilitate meetings. This includes sprint planning, Daily Scrum, sprint review, and sprint retrospective, as well as product strategy and product roadmap workshops. Establish ground rules and ensure that everyone is heard, and that nobody dominates.\nHaving an effective Scrum Master allows you to focus on your job—to maximise the value the product create. It avoids that you get too involved with people, process, and organisational issues. A Scrum Master can also be a sparring partner for you—someone who you can discuss concerns with and who offers helpful feedback.\nYou can think of the product owner and Scrum Master as two complementary roles in Scrum: the former is responsible for product success and the latter for process success. And without the right processes in place, it is hard to maximise value creation on a continued basis.\nWhat the Scrum Master Should NOT Do\nIn theory, your Scrum Master should focus on providing people and process leadership. In practice, however, Scrum Masters sometimes take on duties that do not belong to the role, including the following three ones:\nProject management: The Scrum Master is not a project manager, even though that’s a common misunderstanding. The individual should neither identify and assign tasks nor create reports like a release burndown chart, for example. Instead, the person should teach the Scrum product owner and development team how to how to proactively manage a sprint and a release, respectively.Product backlog work: Keeping the product backlog up to date is a responsibility the Scrum product owner and development team share. But it’s not the job of the Scrum Master. You should therefore not expect that your Scrum Master refines the backlog for you. The individual is not a product backlog manager or a user story writer. The same is true for setting product goals. An effective Scrum Master will remind you to select product goals, but the individual won’t do it for you.Team management: The Scrum Master should not manage the development team. Instead, the individual should help the team practise self-management so that the members learn to make realistic commitments and work together effectively.\nYou can view the Scrum Master as an enabler or a coach, as someone who helps others understand how they can create a valuable product rather than doing the work for them.\nDealing with a Non-existent or Ineffective Scrum Master\nAs I mentioned earlier, it’s not uncommon in my experience that there is no Scrum Master at all or that the role is not effectively applied. But as the Scrum Master work is important, someone else usually steps up and takes on the duties. Often, that’s you, the person in charge of the product. While it’s great to care about the development team and the process, taking on Scrum Master duties in addition to your other work is a bad idea for the following three reasons:\nTaking on more duties is likely to cause you to be overworked or to neglect some of your product management responsibilities. In the first case, your creativity and health will suffer. You are more prone to make mistakes and choose wrong product decisions. In the second case, non-urgent but important work like continuous discovery and strategizing is often scarified. Sadly, this usually creates more work for you in the future. You might even have to deal with an emergency, as you desperately try to catch up with competitors or adjust to new trends, which you had missed.It takes time to acquire the necessary Scrum Master skills, such as facilitating organisational change or building productive teams. It’s usually not something you can learn within a few days or by attending a single training course. Consequently, I prefer to work with professional, full-time Scrum Masters who carry out their jobs for an extended period, who are able to deepen their skills and develop the necessary expertise.If you seem to be able to take on the Scrum Master role, then there is little need for your company to hire or develop Scrum Masters. Think about it: If management sees that you apparently cope without a Scrum Master, then why should they change anything? Trying to help might therefore mask a systemic problem and organisational impediment, rather than making it obvious.\nTherefore, if you don’t have a Scrum Master or if the individual is not able to do an effective job, then don’t take on the role—certainly on for an extended period. Instead, address the problem and its causes. In the first case, consider how you can help the decision makers in your company understand that Scrum Masters are not optional but mandatory to foster an agile way of working and to support product people and their development teams. \nThat’s not only true during an agile transition, but it also applies to organisations that have used agile practises for some time. This ensures that product owners, development teams, and stakeholders receive support on a continued basis. Personally, I find it simply unfair to ask someone to be a Scrum product owner without ensuring that the individual has an effective Scrum Master to partner with.\nIf you have a Scrum Master, but the individual’s work is ineffective, then explore the causes. For example, the Scrum Master might be stretched and does not have enough time to do a good job; the person might lack the skills to be effective; or there might be conflict between the Scrum Master and the development team members or yourself. \nWhatever the cause might be, talk to the Scrum Master. Share your observations as objectively as possible without judgement or blame, and actively listen to the Scrum Master. This will allow you to understand their perspective and empathise with them. Offer your help when possible and be willing to change when that’s necessary. If the Scrum Master is not willing to adjust their behaviour, though, then it might be best to find another person who can play the role and is more effective at supporting the dev team, product owner, stakeholders, and the wider organisation.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-need-effective-scrum-masters/"},{"date_scraped_timestamp":1710925700993,"host":"www.romanpichler.com","page_title":"Why Product Owners should Care about Quality","text":"\n \n Published on 8th April 2010\n \n \n \n \n \n \n \n Software quality is often perceived as something the nerds should worry about. But it can significantly impact customer satisfaction and brand value; the total cost of ownership and life expectancy of your product; and the product’s competitiveness. This post explains what product owners can do to help their development teams get quality right. \n Why Quality Matters\nQuality influences customer satisfaction and brand value.It’s like drinking coffee. Who wants bad-tasting or strange looking cup? Only if the product’s functionality works reliably as expected will customers be satisfied and value the brand highly. Defective software does not only leave customers dissatisfied, frustrated or angry, it also damages the brand value. Think about the issues Microsoft experienced with Windows Vista. These contributed customers defecting Microsoft and to the company to discontinuing the Vista brand calling its next OS version “Windows 7.”\nQuality impacts the total cost of ownership and life expectancy of a product. Getting software out of the door quickly with poor quality may achieve a short-term win but it incurs technical debt: The software becomes difficult to extend and maintain, as Ward Cunningham observed nearly two decades ago. This results in high cost and long lead times for new functionality. And software with poor quality often has to be replaced sooner rather then later resulting in a short life expectancy and a poor return on investment.\nQuality affects the product’s competitiveness: To create a product that incorporates customer feedback on early product increment, to release software in response to the latest market development, and to bring new functionality to the market quickly is only possible if the product exhibits the right quality. Take the development of Google News, an application that aggregates news from around the world. Google used user feedback on early versions of the software and user requests for new features to determine which functionality the product should contain.\nCompromising software quality means trading in short-term gains for longer-term growth cheating the company of a better, brighter future. As the product owner, you are first and foremost responsible for product success. Software quality should hence be a concern to you.\nWhat Product Owners can do to Ensure Right Quality\nThink products, not projects: A product owner should own a product and look after it for an extended period of time thereby managing the product’s lifecycle. A longer-term responsibility counteracts the temptation to compromise quality in order to get the next release out as soon as possible. It creates a desire for sustained success and it encourages long-term thinking.\nCreate a common understanding of quality. Make sure that a definition of done is available and apply it properly. The definition should clearly state the general quality criteria product increments must fulfil. It usually requires that a (potentially) shippable product increment is available at the end of each sprint: executable software that has been tested and documented and that could be released. As a consequence, quality assurance and control measures form an integral part of the development work—instead of being carried out at the end of the project as an afterthought. Be specific what tested and documented mean for your product; I have worked with teams that used metrics to refine and measure the quality criteria. As the product owner, you have to apply the done criteria to accept or reject work results when reviewing items; only work results that fulfil all the done criteria can be accepted. By enforcing the definition of done the product owner acts as the guardian of quality.\nMinimise defects and unnecessary rework. Groom the product backlog together with the team and by be available to answer questions as they arise. With requirements emerging and changing, the product backlog needs continued attention and care. New items have to be captured, existing ones adjusted or removed. Items have to be prioritised and estimated; and the high-priority items have to be ready for the next sprint planning meeting. User stories likely to be implemented in the next sprint should now have well-formed acceptance criteria, for instance. Jointly grooming the product backlog ensures that it contains the right items in the right order. It also reduces the likelihood that an items implementation differs from how the product owner intended it to be realised. When it comes to product owner availability, I often suggest the one-hour rule: Product owners should spend at least one hour per day on average with their teams in the same room. This ensures that the product owner is available to answer questions and to provide feedback on work results.\nInvest in quality: Product owners must understand that team members need time to create high-quality software and regard agile development practices like test-driven development and continuous integration as a great way to ensure sustained product health. Setting aside time for team members to experiment with new practices and tools may result a lower velocity in the short term, but it speeds up development in the mid to long-term.\nBe clear on the difference between fidelity and quality. The product’s functionality evolves, and its fidelity may well increase during the project; the look and feel and the overall user experience might improve. But the software quality – as defined in the definition of done – should stay constant throughout.\n ","url":"https://www.romanpichler.com/blog/why-product-owners-should-care-about-quality/"},{"date_scraped_timestamp":1710925639898,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=127338"},{"date_scraped_timestamp":1710925640426,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=126167"},{"date_scraped_timestamp":1710925651129,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=3158"},{"date_scraped_timestamp":1710925642845,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=41627"},{"date_scraped_timestamp":1710925637774,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=135107"},{"date_scraped_timestamp":1710925647649,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=39962"},{"date_scraped_timestamp":1710925640767,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=125360"},{"date_scraped_timestamp":1710925643067,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=41609"},{"date_scraped_timestamp":1710925650622,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=3157"},{"date_scraped_timestamp":1710925639215,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=125264"},{"date_scraped_timestamp":1710925470034,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/"},{"date_scraped_timestamp":1710925645749,"host":"www.romanpichler.com","page_title":"Why Product People Should Care About Business Strategy","text":"\n \n Published on 3rd April 2018\n \n Last Updated on: 9 Oct 2023\n \n \n \n \n \n \n As product people, we can be very fond of the products we manage. While it’s good to care about them, we must not forget that they are a means to an end: Products only exist to create value for their users and the business. It is therefore important that your product helps your company move forward and supports the overall business strategy, as I discuss in this article. \n Business Strategy vs. Product Strategy\nA business strategy describes how a company wants to achieve its overall aspiration and create value for its users, employees, and shareholders. It’s distinct from the product strategy: The business strategy states how the company will be successful, whereas the product strategy describes how a product will achieve success, as the following picture illustrates.\nThe business strategy provides the company with the basis for making the right investment decisions. This includes determining if a new product idea should be pursued and how much money should be spent on an existing product. At the same time, it offers you, the person in charge of the product, the necessary context to make the right strategic product decisions, for example, the market your product should serve and the business goals it should meet. It is therefore a key input for any product strategy work.\nUnfortunately, it’s not uncommon in my experience that organisations don’t have a business strategy, or that the strategy is not communicated. Statements like we want to grow, increase our profit margin, or gain more market share are not business strategies. Achieving growth is a business imperative; increasing margins and market share are goals that might be part of a business strategy. On their own, they are not enough.\nElements of an Effective Business Strategy\nWhat does an effective business strategy look like? I find Roger Martin’s approach for creating such a strategy helpful. It involves answering the following five questions.\nWhat is your winning aspiration? Why does your organisation exist? What is the company’s vision? State the purpose of the organisation that provides continued guidance and helps identify the right strategic objectives. Think, for instance, of Google’s vision “to organise the world’s information and make it universally accessible and useful.”\nWhere will you play? Clearly describe the areas in which the company will compete to fulfil its aspiration. Who should benefit from your offerings? Do you intend, for instance, to address existing markets? Or do you aim to create new markets (also called blue oceans). Which geographies or regions do you want to address? Which product categories and channels will you require? Note that answering this question requires making tough choices—saying yes to some options, and explicitly discarding others.\nHow will you win? What is your competitive advantage? For example, cost leadership (low prices), differentiation (uniquely desirable products and services), or focus (niche markets)—three options originally suggested by Michael Porter. Answering this question requires you to understand the strengths and weaknesses of your business and the competition you face.\nWhat capabilities must be in place? What do you need to be really good at? Which new products or services do you require? Which existing products you should enhance, and which offerings you should remove? In other words, decide how you should adjust your product portfolio thereby creating the context to allow the product people to make the right strategic choices for their individual products.\nWhich management systems are required? Which processes and structures are necessary to build the appropriate capabilities and reinforce your organisation’s strategic choices? This might involve creating or strengthening a product management organisation and hiring or developing product people who have the right skills to professionally manage digital products.\nNote that there is no perfect business strategy—just like there is no perfect product strategy. Instead, strategy is about increasing the chances of being successful. Bear in mind that strategy is not fixed: as the market and competition change, your business and product strategies have to evolve. It is therefore important that you regularly review the business strategy, as well as the product strategy—biannual reviews for the former, and quarterly reviews for the latter, as a rule of thumb.\nOwnership of Business and Product Strategy\nWho’s responsible for ensuring that an effective business strategy exists? The answer is simple in my mind: executive management. The leadership team of any company must lead the effort to create, review, and adjust the business strategy.\nBut things are different when it comes to product strategy. Product management should be in charge of the product portfolio and make the necessary product strategy decisions—within the context established by the business strategy. This requires that the product people know the business strategy, have the appropriate decision-making authority, trust, and support, as well as the right knowledge and skills, as the picture below shows.\nRegrettably, the division of labour shown above is not always used. I have worked even with mid-sized companies, where the leadership team was firmly in charge of product strategy; the product people were largely left to manage the product backlogs and write user stories. While there is usually a reason for this setup—for example, the founders are still in charge and find it hard to let go, or the product people lack the right skills and experience—I find that it risks turning the leadership team into a bottleneck thereby limiting the company’s growth opportunities. It often has a negative impact on morale in product management too—few product people enjoy being solely a backlog manager and not being able to shape the key product decisions.\nWhile I believe that is helpful to have the right roles and responsibilities in place, business and product success relies on an effective collaboration between executive/senior and product management. As a product person, you should contribute to the business strategy. You often hold key insights into markets, competition, and trends. You are therefore able to help answer the five strategy questions discussed earlier, and in particular determine the necessary product portfolio adjustments. Similarly, the leadership team may be able to help make the right portfolio decisions and probably wants to understand how the product portfolio executes the business strategy, which business goals the individual products support, and which KPIs will be used to measure their performance.\nIf you currently don’t have a business strategy available, I would encourage you to collaborate with management to create one. Without it, you risk making wrong or suboptimal product decisions instead of achieving product success.\n ","url":"https://www.romanpichler.com/blog/business-strategy-and-product-strategy/?replytocom=40144"}]